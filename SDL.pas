
{==============================================================================
  ____  ____  _                       
 / ___||  _ \| |      _ __   __ _ ___ 
 \___ \| | | | |     | '_ \ / _` / __|
  ___) | |_| | |___ _| |_) | (_| \__ \
 |____/|____/|_____(_) .__/ \__,_|___/
                     |_|              
  Simple DirectMedia Layer for Pascal

 Includes:
   SDL2      - 2.0.18
   SDL_image - 2.0.5
   SDL_mixer - 2.0.4
   SDL_net   - 2.0.1
   SDL_ttf   - 2.0.15
   Nuklear   - 4.09.1
   pl_mpeg    

Copyright © 2021 tinyBigGAMES™ LLC
All Rights Reserved.

Website: https://tinybiggames.com
Email  : support@tinybiggames.com

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software in
   a product, an acknowledgment in the product documentation would be
   appreciated but is not required.

2. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

3. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

4. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

5. All video, audio, graphics and other content accessed through the
   software in this distro is the property of the applicable content owner
   and may be protected by applicable copyright law. This License gives
   Customer no rights to such content, and Company disclaims any liability
   for misuse of content.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
----------------------------------------------------------------------------
SDL.pas - https://github.com/tinyBigGAMES/SDL.pas
SDL2    - https://github.com/libsdl-org/SDL, https://libsdl.org/
plmpeg  - https://github.com/phoboslab/pl_mpeg
nuklear - https://github.com/Immediate-Mode-UI/Nuklear
============================================================================= }

unit SDL;

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}

interface

const
  HAVE_WINAPIFAMILY_H = 1;
  WINAPI_FAMILY_DESKTOP_APP = 100;
  WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP;
  WINAPI_PARTITION_DESKTOP = (WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP);
  HAVE_WINSDKVER_H = 1;
  HAVE_STDINT_H = 1;
  SIZEOF_VOIDP = 8;
  HAVE_DDRAW_H = 1;
  HAVE_DINPUT_H = 1;
  HAVE_DSOUND_H = 1;
  HAVE_DXGI_H = 1;
  HAVE_XINPUT_H = 1;
  HAVE_WINDOWS_GAMING_INPUT_H = 1;
  HAVE_D3D11_H = 1;
  HAVE_MMDEVICEAPI_H = 1;
  HAVE_AUDIOCLIENT_H = 1;
  HAVE_SENSORSAPI_H = 1;
  HAVE_IMMINTRIN_H = 1;
  HAVE_STDARG_H = 1;
  HAVE_STDDEF_H = 1;
  SDL_AUDIO_DRIVER_WASAPI = 1;
  SDL_AUDIO_DRIVER_DSOUND = 1;
  SDL_AUDIO_DRIVER_WINMM = 1;
  SDL_AUDIO_DRIVER_DISK = 1;
  SDL_AUDIO_DRIVER_DUMMY = 1;
  SDL_JOYSTICK_DINPUT = 1;
  SDL_JOYSTICK_HIDAPI = 1;
  SDL_JOYSTICK_RAWINPUT = 1;
  SDL_JOYSTICK_VIRTUAL = 1;
  SDL_JOYSTICK_WGI = 1;
  SDL_JOYSTICK_XINPUT = 1;
  SDL_HAPTIC_DINPUT = 1;
  SDL_HAPTIC_XINPUT = 1;
  SDL_SENSOR_WINDOWS = 1;
  SDL_LOADSO_WINDOWS = 1;
  SDL_THREAD_GENERIC_COND_SUFFIX = 1;
  SDL_THREAD_WINDOWS = 1;
  SDL_TIMER_WINDOWS = 1;
  SDL_VIDEO_DRIVER_DUMMY = 1;
  SDL_VIDEO_DRIVER_WINDOWS = 1;
  SDL_VIDEO_RENDER_D3D = 1;
  SDL_VIDEO_RENDER_D3D11 = 1;
  SDL_VIDEO_OPENGL = 1;
  SDL_VIDEO_OPENGL_WGL = 1;
  SDL_VIDEO_RENDER_OGL = 1;
  SDL_VIDEO_RENDER_OGL_ES2 = 1;
  SDL_VIDEO_OPENGL_ES2 = 1;
  SDL_VIDEO_OPENGL_EGL = 1;
  SDL_VIDEO_VULKAN = 1;
  SDL_POWER_WINDOWS = 1;
  SDL_FILESYSTEM_WINDOWS = 1;
  SDL_MAX_SINT8 = ($7F);
  SDL_MIN_SINT8 = (( not $7F));
  SDL_MAX_UINT8 = ($FF);
  SDL_MIN_UINT8 = ($00);
  SDL_MAX_SINT16 = ($7FFF);
  SDL_MIN_SINT16 = (( not $7FFF));
  SDL_MAX_UINT16 = ($FFFF);
  SDL_MIN_UINT16 = ($0000);
  SDL_MAX_SINT32 = ($7FFFFFFF);
  SDL_MIN_SINT32 = (( not $7FFFFFFF));
  SDL_MAX_UINT32 = ($FFFFFFFF);
  SDL_MIN_UINT32 = ($00000000);
  SDL_MAX_SINT64 = ($7FFFFFFFFFFFFFFF);
  SDL_MIN_SINT64 = (( not $7FFFFFFFFFFFFFFF));
  SDL_MAX_UINT64 = ($FFFFFFFFFFFFFFFF);
  SDL_MIN_UINT64 = (($0000000000000000));
  SDL_PRIs64 = 'I64d';
  SDL_PRIu64 = 'I64u';
  SDL_PRIx64 = 'I64x';
  SDL_PRIs32 = 'd';
  SDL_PRIu32 = 'u';
  SDL_PRIx32 = 'x';
  M_PI = 3.14159265358979323846264338327950288;
  SDL_ASSERT_LEVEL = 1;
  SDL_LIL_ENDIAN = 1234;
  SDL_BIG_ENDIAN = 4321;
  SDL_BYTEORDER = SDL_LIL_ENDIAN;
  SDL_MUTEX_TIMEDOUT = 1;
  SDL_MUTEX_MAXWAIT = ( not 0);
  SDL_RWOPS_UNKNOWN = 0;
  SDL_RWOPS_WINFILE = 1;
  SDL_RWOPS_STDFILE = 2;
  SDL_RWOPS_JNIFILE = 3;
  SDL_RWOPS_MEMORY = 4;
  SDL_RWOPS_MEMORY_RO = 5;
  RW_SEEK_SET = 0;
  RW_SEEK_CUR = 1;
  RW_SEEK_END = 2;
  SDL_AUDIO_MASK_BITSIZE = ($FF);
  SDL_AUDIO_MASK_DATATYPE = (1 shl 8);
  SDL_AUDIO_MASK_ENDIAN = (1 shl 12);
  SDL_AUDIO_MASK_SIGNED = (1 shl 15);
  AUDIO_U8 = $0008;
  AUDIO_S8 = $8008;
  AUDIO_U16LSB = $0010;
  AUDIO_S16LSB = $8010;
  AUDIO_U16MSB = $1010;
  AUDIO_S16MSB = $9010;
  AUDIO_U16 = AUDIO_U16LSB;
  AUDIO_S16 = AUDIO_S16LSB;
  AUDIO_S32LSB = $8020;
  AUDIO_S32MSB = $9020;
  AUDIO_S32 = AUDIO_S32LSB;
  AUDIO_F32LSB = $8120;
  AUDIO_F32MSB = $9120;
  AUDIO_F32 = AUDIO_F32LSB;
  AUDIO_U16SYS = AUDIO_U16LSB;
  AUDIO_S16SYS = AUDIO_S16LSB;
  AUDIO_S32SYS = AUDIO_S32LSB;
  AUDIO_F32SYS = AUDIO_F32LSB;
  SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = $00000001;
  SDL_AUDIO_ALLOW_FORMAT_CHANGE = $00000002;
  SDL_AUDIO_ALLOW_CHANNELS_CHANGE = $00000004;
  SDL_AUDIO_ALLOW_SAMPLES_CHANGE = $00000008;
  SDL_AUDIO_ALLOW_ANY_CHANGE = (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE or SDL_AUDIO_ALLOW_FORMAT_CHANGE or SDL_AUDIO_ALLOW_CHANNELS_CHANGE or SDL_AUDIO_ALLOW_SAMPLES_CHANGE);
  SDL_AUDIOCVT_MAX_FILTERS = 9;
  SDL_MIX_MAXVOLUME = 128;
  SDL_CACHELINE_SIZE = 128;
  SDL_ALPHA_OPAQUE = 255;
  SDL_ALPHA_TRANSPARENT = 0;
  SDL_SWSURFACE = 0;
  SDL_PREALLOC = $00000001;
  SDL_RLEACCEL = $00000002;
  SDL_DONTFREE = $00000004;
  SDL_SIMD_ALIGNED = $00000008;
  SDL_WINDOWPOS_UNDEFINED_MASK = $1FFF0000;
  SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_MASK or 0;
  SDL_WINDOWPOS_CENTERED_MASK = $2FFF0000;
  SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_MASK or 0;
  SDLK_SCANCODE_MASK = (1 shl 30);
  SDL_BUTTON_LEFT = 1;
  SDL_BUTTON_MIDDLE = 2;
  SDL_BUTTON_RIGHT = 3;
  SDL_BUTTON_X1 = 4;
  SDL_BUTTON_X2 = 5;
  SDL_IPHONE_MAX_GFORCE = 5.0;
  SDL_JOYSTICK_AXIS_MAX = 32767;
  SDL_JOYSTICK_AXIS_MIN = -32768;
  SDL_HAT_CENTERED = $00;
  SDL_HAT_UP = $01;
  SDL_HAT_RIGHT = $02;
  SDL_HAT_DOWN = $04;
  SDL_HAT_LEFT = $08;
  SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT or SDL_HAT_UP);
  SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT or SDL_HAT_DOWN);
  SDL_HAT_LEFTUP = (SDL_HAT_LEFT or SDL_HAT_UP);
  SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT or SDL_HAT_DOWN);
  SDL_STANDARD_GRAVITY = 9.80665;
  SDL_TOUCH_MOUSEID = (-1);
  SDL_MOUSE_TOUCHID = (-1);
  SDL_RELEASED = 0;
  SDL_PRESSED = 1;
  SDL_TEXTEDITINGEVENT_TEXT_SIZE = (32);
  SDL_TEXTINPUTEVENT_TEXT_SIZE = (32);
  SDL_QUERY = -1;
  SDL_IGNORE = 0;
  SDL_DISABLE = 0;
  SDL_ENABLE = 1;
  SDL_HAPTIC_CONSTANT = (1 shl 0);
  SDL_HAPTIC_SINE = (1 shl 1);
  SDL_HAPTIC_LEFTRIGHT = (1 shl 2);
  SDL_HAPTIC_TRIANGLE = (1 shl 3);
  SDL_HAPTIC_SAWTOOTHUP = (1 shl 4);
  SDL_HAPTIC_SAWTOOTHDOWN = (1 shl 5);
  SDL_HAPTIC_RAMP = (1 shl 6);
  SDL_HAPTIC_SPRING = (1 shl 7);
  SDL_HAPTIC_DAMPER = (1 shl 8);
  SDL_HAPTIC_INERTIA = (1 shl 9);
  SDL_HAPTIC_FRICTION = (1 shl 10);
  SDL_HAPTIC_CUSTOM = (1 shl 11);
  SDL_HAPTIC_GAIN = (1 shl 12);
  SDL_HAPTIC_AUTOCENTER = (1 shl 13);
  SDL_HAPTIC_STATUS = (1 shl 14);
  SDL_HAPTIC_PAUSE = (1 shl 15);
  SDL_HAPTIC_POLAR = 0;
  SDL_HAPTIC_CARTESIAN = 1;
  SDL_HAPTIC_SPHERICAL = 2;
  SDL_HAPTIC_STEERING_AXIS = 3;
  SDL_HAPTIC_INFINITY = 4294967295;
  SDL_HINT_ACCELEROMETER_AS_JOYSTICK = 'SDL_ACCELEROMETER_AS_JOYSTICK';
  SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = 'SDL_ALLOW_ALT_TAB_WHILE_GRABBED';
  SDL_HINT_ALLOW_TOPMOST = 'SDL_ALLOW_TOPMOST';
  SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION';
  SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = 'SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO';
  SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';
  SDL_HINT_APP_NAME = 'SDL_APP_NAME';
  SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = 'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';
  SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = 'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';
  SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';
  SDL_HINT_AUDIO_DEVICE_APP_NAME = 'SDL_AUDIO_DEVICE_APP_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_NAME = 'SDL_AUDIO_DEVICE_STREAM_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = 'SDL_AUDIO_DEVICE_STREAM_ROLE';
  SDL_HINT_AUDIO_RESAMPLING_MODE = 'SDL_AUDIO_RESAMPLING_MODE';
  SDL_HINT_AUTO_UPDATE_JOYSTICKS = 'SDL_AUTO_UPDATE_JOYSTICKS';
  SDL_HINT_AUTO_UPDATE_SENSORS = 'SDL_AUTO_UPDATE_SENSORS';
  SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';
  SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';
  SDL_HINT_EMSCRIPTEN_ASYNCIFY = 'SDL_EMSCRIPTEN_ASYNCIFY';
  SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = 'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';
  SDL_HINT_ENABLE_STEAM_CONTROLLERS = 'SDL_ENABLE_STEAM_CONTROLLERS';
  SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';
  SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
  SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
  SDL_HINT_GAMECONTROLLERCONFIG_FILE = 'SDL_GAMECONTROLLERCONFIG_FILE';
  SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = 'SDL_GAMECONTROLLER_IGNORE_DEVICES';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = 'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';
  SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = 'SDL_GAMECONTROLLER_USE_BUTTON_LABELS';
  SDL_HINT_GRAB_KEYBOARD = 'SDL_GRAB_KEYBOARD';
  SDL_HINT_IDLE_TIMER_DISABLED = 'SDL_IOS_IDLE_TIMER_DISABLED';
  SDL_HINT_IME_INTERNAL_EDITING = 'SDL_IME_INTERNAL_EDITING';
  SDL_HINT_IME_SHOW_UI = 'SDL_IME_SHOW_UI';
  SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';
  SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = 'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
  SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';
  SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';
  SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_LUNA = 'SDL_JOYSTICK_HIDAPI_LUNA';
  SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';
  SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS4_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_PS5 = 'SDL_JOYSTICK_HIDAPI_PS5';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS5_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_STADIA = 'SDL_JOYSTICK_HIDAPI_STADIA';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = 'SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';
  SDL_HINT_JOYSTICK_RAWINPUT = 'SDL_JOYSTICK_RAWINPUT';
  SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = 'SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT';
  SDL_HINT_JOYSTICK_THREAD = 'SDL_JOYSTICK_THREAD';
  SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = 'SDL_KMSDRM_REQUIRE_DRM_MASTER';
  SDL_HINT_JOYSTICK_DEVICE = 'SDL_JOYSTICK_DEVICE';
  SDL_HINT_LINUX_JOYSTICK_CLASSIC = 'SDL_LINUX_JOYSTICK_CLASSIC';
  SDL_HINT_LINUX_JOYSTICK_DEADZONES = 'SDL_LINUX_JOYSTICK_DEADZONES';
  SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';
  SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = 'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';
  SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = 'SDL_MOUSE_DOUBLE_CLICK_RADIUS';
  SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';
  SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';
  SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';
  SDL_HINT_MOUSE_RELATIVE_MODE_WARP = 'SDL_MOUSE_RELATIVE_MODE_WARP';
  SDL_HINT_MOUSE_RELATIVE_SCALING = 'SDL_MOUSE_RELATIVE_SCALING';
  SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = 'SDL_MOUSE_RELATIVE_SPEED_SCALE';
  SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';
  SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';
  SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';
  SDL_HINT_ORIENTATIONS = 'SDL_IOS_ORIENTATIONS';
  SDL_HINT_POLL_SENTINEL = 'SDL_POLL_SENTINEL';
  SDL_HINT_PREFERRED_LOCALES = 'SDL_PREFERRED_LOCALES';
  SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = 'SDL_QTWAYLAND_CONTENT_ORIENTATION';
  SDL_HINT_QTWAYLAND_WINDOW_FLAGS = 'SDL_QTWAYLAND_WINDOW_FLAGS';
  SDL_HINT_RENDER_BATCHING = 'SDL_RENDER_BATCHING';
  SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';
  SDL_HINT_RENDER_DIRECT3D_THREADSAFE = 'SDL_RENDER_DIRECT3D_THREADSAFE';
  SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
  SDL_HINT_RENDER_LOGICAL_SIZE_MODE = 'SDL_RENDER_LOGICAL_SIZE_MODE';
  SDL_HINT_RENDER_OPENGL_SHADERS = 'SDL_RENDER_OPENGL_SHADERS';
  SDL_HINT_RENDER_SCALE_QUALITY = 'SDL_RENDER_SCALE_QUALITY';
  SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
  SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';
  SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';
  SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = 'SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME';
  SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = 'SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL';
  SDL_HINT_THREAD_PRIORITY_POLICY = 'SDL_THREAD_PRIORITY_POLICY';
  SDL_HINT_THREAD_STACK_SIZE = 'SDL_THREAD_STACK_SIZE';
  SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
  SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';
  SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';
  SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';
  SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';
  SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY = 'SDL_VIDEO_EGL_ALLOW_TRANSPARENCY';
  SDL_HINT_VIDEO_EXTERNAL_CONTEXT = 'SDL_VIDEO_EXTERNAL_CONTEXT';
  SDL_HINT_VIDEO_HIGHDPI_DISABLED = 'SDL_VIDEO_HIGHDPI_DISABLED';
  SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = 'SDL_VIDEO_MAC_FULLSCREEN_SPACES';
  SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = 'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
  SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = 'SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR';
  SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = 'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT';
  SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';
  SDL_HINT_VIDEO_X11_FORCE_EGL = 'SDL_VIDEO_X11_FORCE_EGL';
  SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = 'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';
  SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';
  SDL_HINT_VIDEO_X11_WINDOW_VISUALID = 'SDL_VIDEO_X11_WINDOW_VISUALID';
  SDL_HINT_VIDEO_X11_XINERAMA = 'SDL_VIDEO_X11_XINERAMA';
  SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
  SDL_HINT_VIDEO_X11_XVIDMODE = 'SDL_VIDEO_X11_XVIDMODE';
  SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';
  SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';
  SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';
  SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = 'SDL_WINDOWS_DISABLE_THREAD_NAMING';
  SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = 'SDL_WINDOWS_ENABLE_MESSAGELOOP';
  SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = 'SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS';
  SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = 'SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = 'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';
  SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = 'SDL_WINDOWS_NO_CLOSE_ON_ALT_F4';
  SDL_HINT_WINDOWS_USE_D3D9EX = 'SDL_WINDOWS_USE_D3D9EX';
  SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = 'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';
  SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN = 'SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN';
  SDL_HINT_WINRT_HANDLE_BACK_BUTTON = 'SDL_WINRT_HANDLE_BACK_BUTTON';
  SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = 'SDL_WINRT_PRIVACY_POLICY_LABEL';
  SDL_HINT_WINRT_PRIVACY_POLICY_URL = 'SDL_WINRT_PRIVACY_POLICY_URL';
  SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = 'SDL_X11_FORCE_OVERRIDE_REDIRECT';
  SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
  SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = 'SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING';
  SDL_HINT_AUDIO_INCLUDE_MONITORS = 'SDL_AUDIO_INCLUDE_MONITORS';
  SDL_MAX_LOG_MESSAGE = 4096;
  SDL_NONSHAPEABLE_WINDOW = -1;
  SDL_INVALID_SHAPE_ARGUMENT = -2;
  SDL_WINDOW_LACKS_SHAPE = -3;
  SDL_MAJOR_VERSION = 2;
  SDL_MINOR_VERSION = 0;
  SDL_PATCHLEVEL = 18;
  SDL_INIT_TIMER = $00000001;
  SDL_INIT_AUDIO = $00000010;
  SDL_INIT_VIDEO = $00000020;
  SDL_INIT_JOYSTICK = $00000200;
  SDL_INIT_HAPTIC = $00001000;
  SDL_INIT_GAMECONTROLLER = $00002000;
  SDL_INIT_EVENTS = $00004000;
  SDL_INIT_SENSOR = $00008000;
  SDL_INIT_NOPARACHUTE = $00100000;
  SDL_INIT_EVERYTHING = (SDL_INIT_TIMER or SDL_INIT_AUDIO or SDL_INIT_VIDEO or SDL_INIT_EVENTS or SDL_INIT_JOYSTICK or SDL_INIT_HAPTIC or SDL_INIT_GAMECONTROLLER or SDL_INIT_SENSOR);
  SDL_IMAGE_MAJOR_VERSION = 2;
  SDL_IMAGE_MINOR_VERSION = 0;
  SDL_IMAGE_PATCHLEVEL = 5;
  SDL_MIXER_MAJOR_VERSION = 2;
  SDL_MIXER_MINOR_VERSION = 0;
  SDL_MIXER_PATCHLEVEL = 4;
  MIX_MAJOR_VERSION = SDL_MIXER_MAJOR_VERSION;
  MIX_MINOR_VERSION = SDL_MIXER_MINOR_VERSION;
  MIX_PATCHLEVEL = SDL_MIXER_PATCHLEVEL;
  MIX_CHANNELS = 8;
  MIX_DEFAULT_FREQUENCY = 22050;
  MIX_DEFAULT_FORMAT = AUDIO_S16LSB;
  MIX_DEFAULT_CHANNELS = 2;
  MIX_MAX_VOLUME = SDL_MIX_MAXVOLUME;
  MIX_CHANNEL_POST = -2;
  MIX_EFFECTSMAXSPEED = 'MIX_EFFECTSMAXSPEED';
  SDL_NET_MAJOR_VERSION = 2;
  SDL_NET_MINOR_VERSION = 0;
  SDL_NET_PATCHLEVEL = 1;
  INADDR_ANY = $00000000;
  INADDR_NONE = $FFFFFFFF;
  INADDR_LOOPBACK = $7f000001;
  INADDR_BROADCAST = $FFFFFFFF;
  SDLNET_MAX_UDPCHANNELS = 32;
  SDLNET_MAX_UDPADDRESSES = 4;
  SDL_DATA_ALIGNED = 0;
  SDL_TTF_MAJOR_VERSION = 2;
  SDL_TTF_MINOR_VERSION = 0;
  SDL_TTF_PATCHLEVEL = 15;
  TTF_MAJOR_VERSION = SDL_TTF_MAJOR_VERSION;
  TTF_MINOR_VERSION = SDL_TTF_MINOR_VERSION;
  TTF_PATCHLEVEL = SDL_TTF_PATCHLEVEL;
  UNICODE_BOM_NATIVE = $FEFF;
  UNICODE_BOM_SWAPPED = $FFFE;
  TTF_STYLE_NORMAL = $00;
  TTF_STYLE_BOLD = $01;
  TTF_STYLE_ITALIC = $02;
  TTF_STYLE_UNDERLINE = $04;
  TTF_STYLE_STRIKETHROUGH = $08;
  TTF_HINTING_NORMAL = 0;
  TTF_HINTING_LIGHT = 1;
  TTF_HINTING_MONO = 2;
  TTF_HINTING_NONE = 3;
  PLM_PACKET_INVALID_TS = -1;
  PLM_AUDIO_SAMPLES_PER_FRAME = 1152;
  PLM_BUFFER_DEFAULT_SIZE = (128*1024);
  NK_UNDEFINED = (-1.0);
  NK_UTF_INVALID = $FFFD;
  NK_UTF_SIZE = 4;
  NK_INPUT_MAX = 16;
  NK_MAX_NUMBER_BUFFER = 64;
  NK_SCROLLBAR_HIDING_TIMEOUT = 4.0;
  NK_TEXTEDIT_UNDOSTATECOUNT = 99;
  NK_TEXTEDIT_UNDOCHARCOUNT = 999;
  NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS = 16;
  NK_CHART_MAX_SLOT = 4;
  NK_WINDOW_MAX_NAME = 64;
  NK_BUTTON_BEHAVIOR_STACK_SIZE = 8;
  NK_FONT_STACK_SIZE = 8;
  NK_STYLE_ITEM_STACK_SIZE = 16;
  NK_FLOAT_STACK_SIZE = 32;
  NK_VECTOR_STACK_SIZE = 16;
  NK_FLAGS_STACK_SIZE = 32;
  NK_COLOR_STACK_SIZE = 32;
  NK_PI = 3.141592654;
  NK_MAX_FLOAT_PRECISION = 2;

type
  SDL_bool = Integer;
  PSDL_bool = ^SDL_bool;

const
  SDL_FALSE = 0;
  SDL_TRUE = 1;

type
  SDL_DUMMY_ENUM = Integer;
  PSDL_DUMMY_ENUM = ^SDL_DUMMY_ENUM;

const
  DUMMY_ENUM_VALUE = 0;

type
  SDL_AssertState = Integer;
  PSDL_AssertState = ^SDL_AssertState;

const
  /// <summary>Retry the assert immediately.</summary>
  SDL_ASSERTION_RETRY = 0;
  /// <summary>Make the debugger trigger a breakpoint.</summary>
  SDL_ASSERTION_BREAK = 1;
  /// <summary>Terminate the program.</summary>
  SDL_ASSERTION_ABORT = 2;
  /// <summary>Ignore the assert.</summary>
  SDL_ASSERTION_IGNORE = 3;
  /// <summary>Ignore the assert from now on.</summary>
  SDL_ASSERTION_ALWAYS_IGNORE = 4;

type
  SDL_errorcode = Integer;
  PSDL_errorcode = ^SDL_errorcode;

const
  SDL_ENOMEM = 0;
  SDL_EFREAD = 1;
  SDL_EFWRITE = 2;
  SDL_EFSEEK = 3;
  SDL_UNSUPPORTED = 4;
  SDL_LASTERROR = 5;

/// <summary>The SDL thread priority.</summary>
/// <remarks>SDL will make system changes as necessary in order to apply the thread priority.
/// Code which attempts to control thread state related to priority should be aware
/// that calling SDL_SetThreadPriority may alter such state.
/// SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of this behavior.
/// On many systems you require special privileges to set high or time critical priority.</remarks>
type
  SDL_ThreadPriority = Integer;
  PSDL_ThreadPriority = ^SDL_ThreadPriority;

const
  SDL_THREAD_PRIORITY_LOW = 0;
  SDL_THREAD_PRIORITY_NORMAL = 1;
  SDL_THREAD_PRIORITY_HIGH = 2;
  SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;

type
  SDL_AudioStatus = Integer;
  PSDL_AudioStatus = ^SDL_AudioStatus;

const
  SDL_AUDIO_STOPPED = 0;
  SDL_AUDIO_PLAYING = 1;
  SDL_AUDIO_PAUSED = 2;

/// <summary>Pixel type.</summary>
type
  SDL_PixelType = Integer;
  PSDL_PixelType = ^SDL_PixelType;

const
  SDL_PIXELTYPE_UNKNOWN = 0;
  SDL_PIXELTYPE_INDEX1 = 1;
  SDL_PIXELTYPE_INDEX4 = 2;
  SDL_PIXELTYPE_INDEX8 = 3;
  SDL_PIXELTYPE_PACKED8 = 4;
  SDL_PIXELTYPE_PACKED16 = 5;
  SDL_PIXELTYPE_PACKED32 = 6;
  SDL_PIXELTYPE_ARRAYU8 = 7;
  SDL_PIXELTYPE_ARRAYU16 = 8;
  SDL_PIXELTYPE_ARRAYU32 = 9;
  SDL_PIXELTYPE_ARRAYF16 = 10;
  SDL_PIXELTYPE_ARRAYF32 = 11;

/// <summary>Bitmap pixel order, high bit -> low bit.</summary>
type
  SDL_BitmapOrder = Integer;
  PSDL_BitmapOrder = ^SDL_BitmapOrder;

const
  SDL_BITMAPORDER_NONE = 0;
  SDL_BITMAPORDER_4321 = 1;
  SDL_BITMAPORDER_1234 = 2;

/// <summary>Packed component order, high bit -> low bit.</summary>
type
  SDL_PackedOrder = Integer;
  PSDL_PackedOrder = ^SDL_PackedOrder;

const
  SDL_PACKEDORDER_NONE = 0;
  SDL_PACKEDORDER_XRGB = 1;
  SDL_PACKEDORDER_RGBX = 2;
  SDL_PACKEDORDER_ARGB = 3;
  SDL_PACKEDORDER_RGBA = 4;
  SDL_PACKEDORDER_XBGR = 5;
  SDL_PACKEDORDER_BGRX = 6;
  SDL_PACKEDORDER_ABGR = 7;
  SDL_PACKEDORDER_BGRA = 8;

/// <summary>Array component order, low byte -> high byte.</summary>
type
  SDL_ArrayOrder = Integer;
  PSDL_ArrayOrder = ^SDL_ArrayOrder;

const
  SDL_ARRAYORDER_NONE = 0;
  SDL_ARRAYORDER_RGB = 1;
  SDL_ARRAYORDER_RGBA = 2;
  SDL_ARRAYORDER_ARGB = 3;
  SDL_ARRAYORDER_BGR = 4;
  SDL_ARRAYORDER_BGRA = 5;
  SDL_ARRAYORDER_ABGR = 6;

/// <summary>Packed component layout.</summary>
type
  SDL_PackedLayout = Integer;
  PSDL_PackedLayout = ^SDL_PackedLayout;

const
  SDL_PACKEDLAYOUT_NONE = 0;
  SDL_PACKEDLAYOUT_332 = 1;
  SDL_PACKEDLAYOUT_4444 = 2;
  SDL_PACKEDLAYOUT_1555 = 3;
  SDL_PACKEDLAYOUT_5551 = 4;
  SDL_PACKEDLAYOUT_565 = 5;
  SDL_PACKEDLAYOUT_8888 = 6;
  SDL_PACKEDLAYOUT_2101010 = 7;
  SDL_PACKEDLAYOUT_1010102 = 8;

type
  SDL_PixelFormatEnum = Integer;
  PSDL_PixelFormatEnum = ^SDL_PixelFormatEnum;

const
  SDL_PIXELFORMAT_UNKNOWN = 0;
  SDL_PIXELFORMAT_INDEX1LSB = 286261504;
  SDL_PIXELFORMAT_INDEX1MSB = 287310080;
  SDL_PIXELFORMAT_INDEX4LSB = 303039488;
  SDL_PIXELFORMAT_INDEX4MSB = 304088064;
  SDL_PIXELFORMAT_INDEX8 = 318769153;
  SDL_PIXELFORMAT_RGB332 = 336660481;
  SDL_PIXELFORMAT_XRGB4444 = 353504258;
  SDL_PIXELFORMAT_RGB444 = 353504258;
  SDL_PIXELFORMAT_XBGR4444 = 357698562;
  SDL_PIXELFORMAT_BGR444 = 357698562;
  SDL_PIXELFORMAT_XRGB1555 = 353570562;
  SDL_PIXELFORMAT_RGB555 = 353570562;
  SDL_PIXELFORMAT_XBGR1555 = 357764866;
  SDL_PIXELFORMAT_BGR555 = 357764866;
  SDL_PIXELFORMAT_ARGB4444 = 355602434;
  SDL_PIXELFORMAT_RGBA4444 = 356651010;
  SDL_PIXELFORMAT_ABGR4444 = 359796738;
  SDL_PIXELFORMAT_BGRA4444 = 360845314;
  SDL_PIXELFORMAT_ARGB1555 = 355667970;
  SDL_PIXELFORMAT_RGBA5551 = 356782082;
  SDL_PIXELFORMAT_ABGR1555 = 359862274;
  SDL_PIXELFORMAT_BGRA5551 = 360976386;
  SDL_PIXELFORMAT_RGB565 = 353701890;
  SDL_PIXELFORMAT_BGR565 = 357896194;
  SDL_PIXELFORMAT_RGB24 = 386930691;
  SDL_PIXELFORMAT_BGR24 = 390076419;
  SDL_PIXELFORMAT_XRGB8888 = 370546692;
  SDL_PIXELFORMAT_RGB888 = 370546692;
  SDL_PIXELFORMAT_RGBX8888 = 371595268;
  SDL_PIXELFORMAT_XBGR8888 = 374740996;
  SDL_PIXELFORMAT_BGR888 = 374740996;
  SDL_PIXELFORMAT_BGRX8888 = 375789572;
  SDL_PIXELFORMAT_ARGB8888 = 372645892;
  SDL_PIXELFORMAT_RGBA8888 = 373694468;
  SDL_PIXELFORMAT_ABGR8888 = 376840196;
  SDL_PIXELFORMAT_BGRA8888 = 377888772;
  SDL_PIXELFORMAT_ARGB2101010 = 372711428;
  SDL_PIXELFORMAT_RGBA32 = 376840196;
  SDL_PIXELFORMAT_ARGB32 = 377888772;
  SDL_PIXELFORMAT_BGRA32 = 372645892;
  SDL_PIXELFORMAT_ABGR32 = 373694468;
  /// <summary>Planar mode: Y + V + U  (3 planes)</summary>
  SDL_PIXELFORMAT_YV12 = 842094169;
  /// <summary>Planar mode: Y + U + V  (3 planes)</summary>
  SDL_PIXELFORMAT_IYUV = 1448433993;
  /// <summary>Packed mode: Y0+U0+Y1+V0 (1 plane)</summary>
  SDL_PIXELFORMAT_YUY2 = 844715353;
  /// <summary>Packed mode: U0+Y0+V0+Y1 (1 plane)</summary>
  SDL_PIXELFORMAT_UYVY = 1498831189;
  /// <summary>Packed mode: Y0+V0+Y1+U0 (1 plane)</summary>
  SDL_PIXELFORMAT_YVYU = 1431918169;
  /// <summary>Planar mode: Y + U/V interleaved  (2 planes)</summary>
  SDL_PIXELFORMAT_NV12 = 842094158;
  /// <summary>Planar mode: Y + V/U interleaved  (2 planes)</summary>
  SDL_PIXELFORMAT_NV21 = 825382478;
  /// <summary>Android video texture format</summary>
  SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;

/// <summary>The blend mode used in SDL_RenderCopy() and drawing operations.</summary>
type
  SDL_BlendMode = Integer;
  PSDL_BlendMode = ^SDL_BlendMode;

const
  /// <summary>no blending
/// dstRGBA = srcRGBA</summary>
  SDL_BLENDMODE_NONE = 0;
  /// <summary>alpha blending
  /// dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))
  /// dstA = srcA + (dstA * (1-srcA))</summary>
  SDL_BLENDMODE_BLEND = 1;
  /// <summary>additive blending
  /// dstRGB = (srcRGB * srcA) + dstRGB
  /// dstA = dstA</summary>
  SDL_BLENDMODE_ADD = 2;
  /// <summary>color modulate
  /// dstRGB = srcRGB * dstRGB
  /// dstA = dstA</summary>
  SDL_BLENDMODE_MOD = 4;
  /// <summary>color multiply
  /// dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))
  /// dstA = (srcA * dstA) + (dstA * (1-srcA))</summary>
  SDL_BLENDMODE_MUL = 8;
  SDL_BLENDMODE_INVALID = 2147483647;

/// <summary>The blend operation used when combining source and destination pixel components</summary>
type
  SDL_BlendOperation = Integer;
  PSDL_BlendOperation = ^SDL_BlendOperation;

const
  /// <summary>dst + src: supported by all renderers</summary>
  SDL_BLENDOPERATION_ADD = 1;
  /// <summary>dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
  SDL_BLENDOPERATION_SUBTRACT = 2;
  /// <summary>src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
  SDL_BLENDOPERATION_REV_SUBTRACT = 3;
  /// <summary>min(dst, src) : supported by D3D11</summary>
  SDL_BLENDOPERATION_MINIMUM = 4;
  /// <summary>max(dst, src) : supported by D3D11</summary>
  SDL_BLENDOPERATION_MAXIMUM = 5;

/// <summary>The normalized factor used to multiply pixel components</summary>
type
  SDL_BlendFactor = Integer;
  PSDL_BlendFactor = ^SDL_BlendFactor;

const
  /// <summary>0, 0, 0, 0</summary>
  SDL_BLENDFACTOR_ZERO = 1;
  /// <summary>1, 1, 1, 1</summary>
  SDL_BLENDFACTOR_ONE = 2;
  /// <summary>srcR, srcG, srcB, srcA</summary>
  SDL_BLENDFACTOR_SRC_COLOR = 3;
  /// <summary>1-srcR, 1-srcG, 1-srcB, 1-srcA</summary>
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
  /// <summary>srcA, srcA, srcA, srcA</summary>
  SDL_BLENDFACTOR_SRC_ALPHA = 5;
  /// <summary>1-srcA, 1-srcA, 1-srcA, 1-srcA</summary>
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;
  /// <summary>dstR, dstG, dstB, dstA</summary>
  SDL_BLENDFACTOR_DST_COLOR = 7;
  /// <summary>1-dstR, 1-dstG, 1-dstB, 1-dstA</summary>
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;
  /// <summary>dstA, dstA, dstA, dstA</summary>
  SDL_BLENDFACTOR_DST_ALPHA = 9;
  /// <summary>1-dstA, 1-dstA, 1-dstA, 1-dstA</summary>
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;

/// <summary>The formula used for converting between YUV and RGB</summary>
type
  SDL_YUV_CONVERSION_MODE = Integer;
  PSDL_YUV_CONVERSION_MODE = ^SDL_YUV_CONVERSION_MODE;

const
  /// <summary>Full range JPEG</summary>
  SDL_YUV_CONVERSION_JPEG = 0;
  /// <summary>BT.601 (the default)</summary>
  SDL_YUV_CONVERSION_BT601 = 1;
  /// <summary>BT.709</summary>
  SDL_YUV_CONVERSION_BT709 = 2;
  /// <summary>BT.601 for SD content, BT.709 for HD content</summary>
  SDL_YUV_CONVERSION_AUTOMATIC = 3;

/// <summary>The flags on a window</summary>
/// <remarks>SDL_GetWindowFlags()</remarks>
type
  SDL_WindowFlags = Integer;
  PSDL_WindowFlags = ^SDL_WindowFlags;

const
  /// <summary>fullscreen window</summary>
  SDL_WINDOW_FULLSCREEN = 1;
  /// <summary>window usable with OpenGL context</summary>
  SDL_WINDOW_OPENGL = 2;
  /// <summary>window is visible</summary>
  SDL_WINDOW_SHOWN = 4;
  /// <summary>window is not visible</summary>
  SDL_WINDOW_HIDDEN = 8;
  /// <summary>no window decoration</summary>
  SDL_WINDOW_BORDERLESS = 16;
  /// <summary>window can be resized</summary>
  SDL_WINDOW_RESIZABLE = 32;
  /// <summary>window is minimized</summary>
  SDL_WINDOW_MINIMIZED = 64;
  /// <summary>window is maximized</summary>
  SDL_WINDOW_MAXIMIZED = 128;
  /// <summary>window has grabbed mouse input</summary>
  SDL_WINDOW_MOUSE_GRABBED = 256;
  /// <summary>window has input focus</summary>
  SDL_WINDOW_INPUT_FOCUS = 512;
  /// <summary>window has mouse focus</summary>
  SDL_WINDOW_MOUSE_FOCUS = 1024;
  SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;
  /// <summary>window not created by SDL</summary>
  SDL_WINDOW_FOREIGN = 2048;
  /// <summary>window should be created in high-DPI mode if supported.
  /// On macOS NSHighResolutionCapable must be set true in the
  /// application's Info.plist for this to have any effect.</summary>
  SDL_WINDOW_ALLOW_HIGHDPI = 8192;
  /// <summary>window has mouse captured (unrelated to MOUSE_GRABBED)</summary>
  SDL_WINDOW_MOUSE_CAPTURE = 16384;
  /// <summary>window should always be above others</summary>
  SDL_WINDOW_ALWAYS_ON_TOP = 32768;
  /// <summary>window should not be added to the taskbar</summary>
  SDL_WINDOW_SKIP_TASKBAR = 65536;
  /// <summary>window should be treated as a utility window</summary>
  SDL_WINDOW_UTILITY = 131072;
  /// <summary>window should be treated as a tooltip</summary>
  SDL_WINDOW_TOOLTIP = 262144;
  /// <summary>window should be treated as a popup menu</summary>
  SDL_WINDOW_POPUP_MENU = 524288;
  /// <summary>window has grabbed keyboard input</summary>
  SDL_WINDOW_KEYBOARD_GRABBED = 1048576;
  /// <summary>window usable for Vulkan surface</summary>
  SDL_WINDOW_VULKAN = 268435456;
  /// <summary>window usable for Metal view</summary>
  SDL_WINDOW_METAL = 536870912;
  /// <summary>equivalent to SDL_WINDOW_MOUSE_GRABBED for compatibility</summary>
  SDL_WINDOW_INPUT_GRABBED = 256;

/// <summary>Event subtype for window events</summary>
type
  SDL_WindowEventID = Integer;
  PSDL_WindowEventID = ^SDL_WindowEventID;

const
  /// <summary>Never used</summary>
  SDL_WINDOWEVENT_NONE = 0;
  /// <summary>Window has been shown</summary>
  SDL_WINDOWEVENT_SHOWN = 1;
  /// <summary>Window has been hidden</summary>
  SDL_WINDOWEVENT_HIDDEN = 2;
  /// <summary>Window has been exposed and should be
  /// redrawn</summary>
  SDL_WINDOWEVENT_EXPOSED = 3;
  /// <summary>Window has been moved to data1, data2</summary>
  SDL_WINDOWEVENT_MOVED = 4;
  /// <summary>Window has been resized to data1xdata2</summary>
  SDL_WINDOWEVENT_RESIZED = 5;
  /// <summary>The window size has changed, either as
  /// a result of an API call or through the
  /// system or user changing the window size.</summary>
  SDL_WINDOWEVENT_SIZE_CHANGED = 6;
  /// <summary>Window has been minimized</summary>
  SDL_WINDOWEVENT_MINIMIZED = 7;
  /// <summary>Window has been maximized</summary>
  SDL_WINDOWEVENT_MAXIMIZED = 8;
  /// <summary>Window has been restored to normal size
  /// and position</summary>
  SDL_WINDOWEVENT_RESTORED = 9;
  /// <summary>Window has gained mouse focus</summary>
  SDL_WINDOWEVENT_ENTER = 10;
  /// <summary>Window has lost mouse focus</summary>
  SDL_WINDOWEVENT_LEAVE = 11;
  /// <summary>Window has gained keyboard focus</summary>
  SDL_WINDOWEVENT_FOCUS_GAINED = 12;
  /// <summary>Window has lost keyboard focus</summary>
  SDL_WINDOWEVENT_FOCUS_LOST = 13;
  /// <summary>The window manager requests that the window be closed</summary>
  SDL_WINDOWEVENT_CLOSE = 14;
  /// <summary>Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore)</summary>
  SDL_WINDOWEVENT_TAKE_FOCUS = 15;
  /// <summary>Window had a hit test that wasn't SDL_HITTEST_NORMAL.</summary>
  SDL_WINDOWEVENT_HIT_TEST = 16;
  /// <summary>The ICC profile of the window's display has changed.</summary>
  SDL_WINDOWEVENT_ICCPROF_CHANGED = 17;
  /// <summary>Window has been moved to display data1.</summary>
  SDL_WINDOWEVENT_DISPLAY_CHANGED = 18;

/// <summary>Event subtype for display events</summary>
type
  SDL_DisplayEventID = Integer;
  PSDL_DisplayEventID = ^SDL_DisplayEventID;

const
  /// <summary>Never used</summary>
  SDL_DISPLAYEVENT_NONE = 0;
  /// <summary>Display orientation has changed to data1</summary>
  SDL_DISPLAYEVENT_ORIENTATION = 1;
  /// <summary>Display has been added to the system</summary>
  SDL_DISPLAYEVENT_CONNECTED = 2;
  /// <summary>Display has been removed from the system</summary>
  SDL_DISPLAYEVENT_DISCONNECTED = 3;

/// <summary>Display orientation</summary>
type
  SDL_DisplayOrientation = Integer;
  PSDL_DisplayOrientation = ^SDL_DisplayOrientation;

const
  /// <summary>The display orientation can't be determined</summary>
  SDL_ORIENTATION_UNKNOWN = 0;
  /// <summary>The display is in landscape mode, with the right side up, relative to portrait mode</summary>
  SDL_ORIENTATION_LANDSCAPE = 1;
  /// <summary>The display is in landscape mode, with the left side up, relative to portrait mode</summary>
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
  /// <summary>The display is in portrait mode</summary>
  SDL_ORIENTATION_PORTRAIT = 3;
  /// <summary>The display is in portrait mode, upside down</summary>
  SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;

/// <summary>Window flash operation</summary>
type
  SDL_FlashOperation = Integer;
  PSDL_FlashOperation = ^SDL_FlashOperation;

const
  /// <summary>Cancel any window flash state</summary>
  SDL_FLASH_CANCEL = 0;
  /// <summary>Flash the window briefly to get attention</summary>
  SDL_FLASH_BRIEFLY = 1;
  /// <summary>Flash the window until it gets focus</summary>
  SDL_FLASH_UNTIL_FOCUSED = 2;

/// <summary>OpenGL configuration attributes</summary>
type
  SDL_GLattr = Integer;
  PSDL_GLattr = ^SDL_GLattr;

const
  SDL_GL_RED_SIZE = 0;
  SDL_GL_GREEN_SIZE = 1;
  SDL_GL_BLUE_SIZE = 2;
  SDL_GL_ALPHA_SIZE = 3;
  SDL_GL_BUFFER_SIZE = 4;
  SDL_GL_DOUBLEBUFFER = 5;
  SDL_GL_DEPTH_SIZE = 6;
  SDL_GL_STENCIL_SIZE = 7;
  SDL_GL_ACCUM_RED_SIZE = 8;
  SDL_GL_ACCUM_GREEN_SIZE = 9;
  SDL_GL_ACCUM_BLUE_SIZE = 10;
  SDL_GL_ACCUM_ALPHA_SIZE = 11;
  SDL_GL_STEREO = 12;
  SDL_GL_MULTISAMPLEBUFFERS = 13;
  SDL_GL_MULTISAMPLESAMPLES = 14;
  SDL_GL_ACCELERATED_VISUAL = 15;
  SDL_GL_RETAINED_BACKING = 16;
  SDL_GL_CONTEXT_MAJOR_VERSION = 17;
  SDL_GL_CONTEXT_MINOR_VERSION = 18;
  SDL_GL_CONTEXT_EGL = 19;
  SDL_GL_CONTEXT_FLAGS = 20;
  SDL_GL_CONTEXT_PROFILE_MASK = 21;
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
  SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
  SDL_GL_CONTEXT_NO_ERROR = 26;

type
  SDL_GLprofile = Integer;
  PSDL_GLprofile = ^SDL_GLprofile;

const
  SDL_GL_CONTEXT_PROFILE_CORE = 1;
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;
  /// <summary>GLX_CONTEXT_ES2_PROFILE_BIT_EXT</summary>
  SDL_GL_CONTEXT_PROFILE_ES = 4;

type
  SDL_GLcontextFlag = Integer;
  PSDL_GLcontextFlag = ^SDL_GLcontextFlag;

const
  SDL_GL_CONTEXT_DEBUG_FLAG = 1;
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;

type
  SDL_GLcontextReleaseFlag = Integer;
  PSDL_GLcontextReleaseFlag = ^SDL_GLcontextReleaseFlag;

const
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;

type
  SDL_GLContextResetNotification = Integer;
  PSDL_GLContextResetNotification = ^SDL_GLContextResetNotification;

const
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;

/// <summary>Possible return values from the SDL_HitTest callback.</summary>
/// <remarks>SDL_HitTest</remarks>
type
  SDL_HitTestResult = Integer;
  PSDL_HitTestResult = ^SDL_HitTestResult;

const
  /// <summary>Region is normal. No special properties.</summary>
  SDL_HITTEST_NORMAL = 0;
  /// <summary>Region can drag entire window.</summary>
  SDL_HITTEST_DRAGGABLE = 1;
  SDL_HITTEST_RESIZE_TOPLEFT = 2;
  SDL_HITTEST_RESIZE_TOP = 3;
  SDL_HITTEST_RESIZE_TOPRIGHT = 4;
  SDL_HITTEST_RESIZE_RIGHT = 5;
  SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
  SDL_HITTEST_RESIZE_BOTTOM = 7;
  SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
  SDL_HITTEST_RESIZE_LEFT = 9;

/// <summary>The SDL keyboard scancode representation.</summary>
/// <remarks>Values of this type are used to represent keyboard keys, among other places
/// in the 
/// <code>
///  SDL_Keysym::scancode key.keysym.scancode \endlink field of the
///   SDL_Event structure.
/// 
///   The values in this enumeration are based on the USB usage page standard:
///   https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf
///  
/// 
/// </code></remarks>
type
  SDL_Scancode = Integer;
  PSDL_Scancode = ^SDL_Scancode;

const
  SDL_SCANCODE_UNKNOWN = 0;
  SDL_SCANCODE_A = 4;
  SDL_SCANCODE_B = 5;
  SDL_SCANCODE_C = 6;
  SDL_SCANCODE_D = 7;
  SDL_SCANCODE_E = 8;
  SDL_SCANCODE_F = 9;
  SDL_SCANCODE_G = 10;
  SDL_SCANCODE_H = 11;
  SDL_SCANCODE_I = 12;
  SDL_SCANCODE_J = 13;
  SDL_SCANCODE_K = 14;
  SDL_SCANCODE_L = 15;
  SDL_SCANCODE_M = 16;
  SDL_SCANCODE_N = 17;
  SDL_SCANCODE_O = 18;
  SDL_SCANCODE_P = 19;
  SDL_SCANCODE_Q = 20;
  SDL_SCANCODE_R = 21;
  SDL_SCANCODE_S = 22;
  SDL_SCANCODE_T = 23;
  SDL_SCANCODE_U = 24;
  SDL_SCANCODE_V = 25;
  SDL_SCANCODE_W = 26;
  SDL_SCANCODE_X = 27;
  SDL_SCANCODE_Y = 28;
  SDL_SCANCODE_Z = 29;
  SDL_SCANCODE_1 = 30;
  SDL_SCANCODE_2 = 31;
  SDL_SCANCODE_3 = 32;
  SDL_SCANCODE_4 = 33;
  SDL_SCANCODE_5 = 34;
  SDL_SCANCODE_6 = 35;
  SDL_SCANCODE_7 = 36;
  SDL_SCANCODE_8 = 37;
  SDL_SCANCODE_9 = 38;
  SDL_SCANCODE_0 = 39;
  SDL_SCANCODE_RETURN = 40;
  SDL_SCANCODE_ESCAPE = 41;
  SDL_SCANCODE_BACKSPACE = 42;
  SDL_SCANCODE_TAB = 43;
  SDL_SCANCODE_SPACE = 44;
  SDL_SCANCODE_MINUS = 45;
  SDL_SCANCODE_EQUALS = 46;
  SDL_SCANCODE_LEFTBRACKET = 47;
  SDL_SCANCODE_RIGHTBRACKET = 48;
  /// <summary>Located at the lower left of the return
  /// key on ISO keyboards and at the right end
  /// of the QWERTY row on ANSI keyboards.
  /// Produces REVERSE SOLIDUS (backslash) and
  /// VERTICAL LINE in a US layout, REVERSE
  /// SOLIDUS and VERTICAL LINE in a UK Mac
  /// layout, NUMBER SIGN and TILDE in a UK
  /// Windows layout, DOLLAR SIGN and POUND SIGN
  /// in a Swiss German layout, NUMBER SIGN and
  /// APOSTROPHE in a German layout, GRAVE
  /// ACCENT and POUND SIGN in a French Mac
  /// layout, and ASTERISK and MICRO SIGN in a
  /// French Windows layout.</summary>
  SDL_SCANCODE_BACKSLASH = 49;
  /// <summary>ISO USB keyboards actually use this code
  /// instead of 49 for the same key, but all
  /// OSes I've seen treat the two codes
  /// identically. So, as an implementor, unless
  /// your keyboard generates both of those
  /// codes and your OS treats them differently,
  /// you should generate SDL_SCANCODE_BACKSLASH
  /// instead of this code. As a user, you
  /// should not rely on this code because SDL
  /// will never generate it with most (all?)
  /// keyboards.</summary>
  SDL_SCANCODE_NONUSHASH = 50;
  SDL_SCANCODE_SEMICOLON = 51;
  SDL_SCANCODE_APOSTROPHE = 52;
  /// <summary>Located in the top left corner (on both ANSI
  /// and ISO keyboards). Produces GRAVE ACCENT and
  /// TILDE in a US Windows layout and in US and UK
  /// Mac layouts on ANSI keyboards, GRAVE ACCENT
  /// and NOT SIGN in a UK Windows layout, SECTION
  /// SIGN and PLUS-MINUS SIGN in US and UK Mac
  /// layouts on ISO keyboards, SECTION SIGN and
  /// DEGREE SIGN in a Swiss German layout (Mac:
  /// only on ISO keyboards), CIRCUMFLEX ACCENT and
  /// DEGREE SIGN in a German layout (Mac: only on
  /// ISO keyboards), SUPERSCRIPT TWO and TILDE in a
  /// French Windows layout, COMMERCIAL AT and
  /// NUMBER SIGN in a French Mac layout on ISO
  /// keyboards, and LESS-THAN SIGN and GREATER-THAN
  /// SIGN in a Swiss German, German, or French Mac
  /// layout on ANSI keyboards.</summary>
  SDL_SCANCODE_GRAVE = 53;
  SDL_SCANCODE_COMMA = 54;
  SDL_SCANCODE_PERIOD = 55;
  SDL_SCANCODE_SLASH = 56;
  SDL_SCANCODE_CAPSLOCK = 57;
  SDL_SCANCODE_F1 = 58;
  SDL_SCANCODE_F2 = 59;
  SDL_SCANCODE_F3 = 60;
  SDL_SCANCODE_F4 = 61;
  SDL_SCANCODE_F5 = 62;
  SDL_SCANCODE_F6 = 63;
  SDL_SCANCODE_F7 = 64;
  SDL_SCANCODE_F8 = 65;
  SDL_SCANCODE_F9 = 66;
  SDL_SCANCODE_F10 = 67;
  SDL_SCANCODE_F11 = 68;
  SDL_SCANCODE_F12 = 69;
  SDL_SCANCODE_PRINTSCREEN = 70;
  SDL_SCANCODE_SCROLLLOCK = 71;
  SDL_SCANCODE_PAUSE = 72;
  /// <summary>insert on PC, help on some Mac keyboards (but
  /// does send code 73, not 117)</summary>
  SDL_SCANCODE_INSERT = 73;
  SDL_SCANCODE_HOME = 74;
  SDL_SCANCODE_PAGEUP = 75;
  SDL_SCANCODE_DELETE = 76;
  SDL_SCANCODE_END = 77;
  SDL_SCANCODE_PAGEDOWN = 78;
  SDL_SCANCODE_RIGHT = 79;
  SDL_SCANCODE_LEFT = 80;
  SDL_SCANCODE_DOWN = 81;
  SDL_SCANCODE_UP = 82;
  /// <summary>num lock on PC, clear on Mac keyboards</summary>
  SDL_SCANCODE_NUMLOCKCLEAR = 83;
  SDL_SCANCODE_KP_DIVIDE = 84;
  SDL_SCANCODE_KP_MULTIPLY = 85;
  SDL_SCANCODE_KP_MINUS = 86;
  SDL_SCANCODE_KP_PLUS = 87;
  SDL_SCANCODE_KP_ENTER = 88;
  SDL_SCANCODE_KP_1 = 89;
  SDL_SCANCODE_KP_2 = 90;
  SDL_SCANCODE_KP_3 = 91;
  SDL_SCANCODE_KP_4 = 92;
  SDL_SCANCODE_KP_5 = 93;
  SDL_SCANCODE_KP_6 = 94;
  SDL_SCANCODE_KP_7 = 95;
  SDL_SCANCODE_KP_8 = 96;
  SDL_SCANCODE_KP_9 = 97;
  SDL_SCANCODE_KP_0 = 98;
  SDL_SCANCODE_KP_PERIOD = 99;
  /// <summary>This is the additional key that ISO
  /// keyboards have over ANSI ones,
  /// located between left shift and Y.
  /// Produces GRAVE ACCENT and TILDE in a
  /// US or UK Mac layout, REVERSE SOLIDUS
  /// (backslash) and VERTICAL LINE in a
  /// US or UK Windows layout, and
  /// LESS-THAN SIGN and GREATER-THAN SIGN
  /// in a Swiss German, German, or French
  /// layout.</summary>
  SDL_SCANCODE_NONUSBACKSLASH = 100;
  /// <summary>windows contextual menu, compose</summary>
  SDL_SCANCODE_APPLICATION = 101;
  /// <summary>The USB document says this is a status flag,
  /// not a physical key - but some Mac keyboards
  /// do have a power key.</summary>
  SDL_SCANCODE_POWER = 102;
  SDL_SCANCODE_KP_EQUALS = 103;
  SDL_SCANCODE_F13 = 104;
  SDL_SCANCODE_F14 = 105;
  SDL_SCANCODE_F15 = 106;
  SDL_SCANCODE_F16 = 107;
  SDL_SCANCODE_F17 = 108;
  SDL_SCANCODE_F18 = 109;
  SDL_SCANCODE_F19 = 110;
  SDL_SCANCODE_F20 = 111;
  SDL_SCANCODE_F21 = 112;
  SDL_SCANCODE_F22 = 113;
  SDL_SCANCODE_F23 = 114;
  SDL_SCANCODE_F24 = 115;
  SDL_SCANCODE_EXECUTE = 116;
  SDL_SCANCODE_HELP = 117;
  SDL_SCANCODE_MENU = 118;
  SDL_SCANCODE_SELECT = 119;
  SDL_SCANCODE_STOP = 120;
  /// <summary>redo</summary>
  SDL_SCANCODE_AGAIN = 121;
  SDL_SCANCODE_UNDO = 122;
  SDL_SCANCODE_CUT = 123;
  SDL_SCANCODE_COPY = 124;
  SDL_SCANCODE_PASTE = 125;
  SDL_SCANCODE_FIND = 126;
  SDL_SCANCODE_MUTE = 127;
  SDL_SCANCODE_VOLUMEUP = 128;
  SDL_SCANCODE_VOLUMEDOWN = 129;
  SDL_SCANCODE_KP_COMMA = 133;
  SDL_SCANCODE_KP_EQUALSAS400 = 134;
  /// <summary>used on Asian keyboards, see
  /// footnotes in USB doc</summary>
  SDL_SCANCODE_INTERNATIONAL1 = 135;
  SDL_SCANCODE_INTERNATIONAL2 = 136;
  /// <summary>Yen</summary>
  SDL_SCANCODE_INTERNATIONAL3 = 137;
  SDL_SCANCODE_INTERNATIONAL4 = 138;
  SDL_SCANCODE_INTERNATIONAL5 = 139;
  SDL_SCANCODE_INTERNATIONAL6 = 140;
  SDL_SCANCODE_INTERNATIONAL7 = 141;
  SDL_SCANCODE_INTERNATIONAL8 = 142;
  SDL_SCANCODE_INTERNATIONAL9 = 143;
  /// <summary>Hangul/English toggle</summary>
  SDL_SCANCODE_LANG1 = 144;
  /// <summary>Hanja conversion</summary>
  SDL_SCANCODE_LANG2 = 145;
  /// <summary>Katakana</summary>
  SDL_SCANCODE_LANG3 = 146;
  /// <summary>Hiragana</summary>
  SDL_SCANCODE_LANG4 = 147;
  /// <summary>Zenkaku/Hankaku</summary>
  SDL_SCANCODE_LANG5 = 148;
  /// <summary>reserved</summary>
  SDL_SCANCODE_LANG6 = 149;
  /// <summary>reserved</summary>
  SDL_SCANCODE_LANG7 = 150;
  /// <summary>reserved</summary>
  SDL_SCANCODE_LANG8 = 151;
  /// <summary>reserved</summary>
  SDL_SCANCODE_LANG9 = 152;
  /// <summary>Erase-Eaze</summary>
  SDL_SCANCODE_ALTERASE = 153;
  SDL_SCANCODE_SYSREQ = 154;
  SDL_SCANCODE_CANCEL = 155;
  SDL_SCANCODE_CLEAR = 156;
  SDL_SCANCODE_PRIOR = 157;
  SDL_SCANCODE_RETURN2 = 158;
  SDL_SCANCODE_SEPARATOR = 159;
  SDL_SCANCODE_OUT = 160;
  SDL_SCANCODE_OPER = 161;
  SDL_SCANCODE_CLEARAGAIN = 162;
  SDL_SCANCODE_CRSEL = 163;
  SDL_SCANCODE_EXSEL = 164;
  SDL_SCANCODE_KP_00 = 176;
  SDL_SCANCODE_KP_000 = 177;
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
  SDL_SCANCODE_DECIMALSEPARATOR = 179;
  SDL_SCANCODE_CURRENCYUNIT = 180;
  SDL_SCANCODE_CURRENCYSUBUNIT = 181;
  SDL_SCANCODE_KP_LEFTPAREN = 182;
  SDL_SCANCODE_KP_RIGHTPAREN = 183;
  SDL_SCANCODE_KP_LEFTBRACE = 184;
  SDL_SCANCODE_KP_RIGHTBRACE = 185;
  SDL_SCANCODE_KP_TAB = 186;
  SDL_SCANCODE_KP_BACKSPACE = 187;
  SDL_SCANCODE_KP_A = 188;
  SDL_SCANCODE_KP_B = 189;
  SDL_SCANCODE_KP_C = 190;
  SDL_SCANCODE_KP_D = 191;
  SDL_SCANCODE_KP_E = 192;
  SDL_SCANCODE_KP_F = 193;
  SDL_SCANCODE_KP_XOR = 194;
  SDL_SCANCODE_KP_POWER = 195;
  SDL_SCANCODE_KP_PERCENT = 196;
  SDL_SCANCODE_KP_LESS = 197;
  SDL_SCANCODE_KP_GREATER = 198;
  SDL_SCANCODE_KP_AMPERSAND = 199;
  SDL_SCANCODE_KP_DBLAMPERSAND = 200;
  SDL_SCANCODE_KP_VERTICALBAR = 201;
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
  SDL_SCANCODE_KP_COLON = 203;
  SDL_SCANCODE_KP_HASH = 204;
  SDL_SCANCODE_KP_SPACE = 205;
  SDL_SCANCODE_KP_AT = 206;
  SDL_SCANCODE_KP_EXCLAM = 207;
  SDL_SCANCODE_KP_MEMSTORE = 208;
  SDL_SCANCODE_KP_MEMRECALL = 209;
  SDL_SCANCODE_KP_MEMCLEAR = 210;
  SDL_SCANCODE_KP_MEMADD = 211;
  SDL_SCANCODE_KP_MEMSUBTRACT = 212;
  SDL_SCANCODE_KP_MEMMULTIPLY = 213;
  SDL_SCANCODE_KP_MEMDIVIDE = 214;
  SDL_SCANCODE_KP_PLUSMINUS = 215;
  SDL_SCANCODE_KP_CLEAR = 216;
  SDL_SCANCODE_KP_CLEARENTRY = 217;
  SDL_SCANCODE_KP_BINARY = 218;
  SDL_SCANCODE_KP_OCTAL = 219;
  SDL_SCANCODE_KP_DECIMAL = 220;
  SDL_SCANCODE_KP_HEXADECIMAL = 221;
  SDL_SCANCODE_LCTRL = 224;
  SDL_SCANCODE_LSHIFT = 225;
  /// <summary>alt, option</summary>
  SDL_SCANCODE_LALT = 226;
  /// <summary>windows, command (apple), meta</summary>
  SDL_SCANCODE_LGUI = 227;
  SDL_SCANCODE_RCTRL = 228;
  SDL_SCANCODE_RSHIFT = 229;
  /// <summary>alt gr, option</summary>
  SDL_SCANCODE_RALT = 230;
  /// <summary>windows, command (apple), meta</summary>
  SDL_SCANCODE_RGUI = 231;
  /// <summary>I'm not sure if this is really not covered
  /// by any of the above, but since there's a
  /// special KMOD_MODE for it I'm adding it here</summary>
  SDL_SCANCODE_MODE = 257;
  SDL_SCANCODE_AUDIONEXT = 258;
  SDL_SCANCODE_AUDIOPREV = 259;
  SDL_SCANCODE_AUDIOSTOP = 260;
  SDL_SCANCODE_AUDIOPLAY = 261;
  SDL_SCANCODE_AUDIOMUTE = 262;
  SDL_SCANCODE_MEDIASELECT = 263;
  SDL_SCANCODE_WWW = 264;
  SDL_SCANCODE_MAIL = 265;
  SDL_SCANCODE_CALCULATOR = 266;
  SDL_SCANCODE_COMPUTER = 267;
  SDL_SCANCODE_AC_SEARCH = 268;
  SDL_SCANCODE_AC_HOME = 269;
  SDL_SCANCODE_AC_BACK = 270;
  SDL_SCANCODE_AC_FORWARD = 271;
  SDL_SCANCODE_AC_STOP = 272;
  SDL_SCANCODE_AC_REFRESH = 273;
  SDL_SCANCODE_AC_BOOKMARKS = 274;
  SDL_SCANCODE_BRIGHTNESSDOWN = 275;
  SDL_SCANCODE_BRIGHTNESSUP = 276;
  /// <summary>display mirroring/dual display
  /// switch, video mode switch</summary>
  SDL_SCANCODE_DISPLAYSWITCH = 277;
  SDL_SCANCODE_KBDILLUMTOGGLE = 278;
  SDL_SCANCODE_KBDILLUMDOWN = 279;
  SDL_SCANCODE_KBDILLUMUP = 280;
  SDL_SCANCODE_EJECT = 281;
  SDL_SCANCODE_SLEEP = 282;
  SDL_SCANCODE_APP1 = 283;
  SDL_SCANCODE_APP2 = 284;
  SDL_SCANCODE_AUDIOREWIND = 285;
  SDL_SCANCODE_AUDIOFASTFORWARD = 286;
  /// <summary>not a key, just marks the number of scancodes
  /// for array bounds</summary>
  SDL_NUM_SCANCODES = 512;

//type
//  SDL_KeyCode = Integer;
//  PSDL_KeyCode = ^SDL_KeyCode;

const
  SDLK_UNKNOWN = 0;
  SDLK_RETURN = 13;
  SDLK_ESCAPE = 27;
  SDLK_BACKSPACE = 8;
  SDLK_TAB = 9;
  SDLK_SPACE = 32;
  SDLK_EXCLAIM = 33;
  SDLK_QUOTEDBL = 34;
  SDLK_HASH = 35;
  SDLK_PERCENT = 37;
  SDLK_DOLLAR = 36;
  SDLK_AMPERSAND = 38;
  SDLK_QUOTE = 39;
  SDLK_LEFTPAREN = 40;
  SDLK_RIGHTPAREN = 41;
  SDLK_ASTERISK = 42;
  SDLK_PLUS = 43;
  SDLK_COMMA = 44;
  SDLK_MINUS = 45;
  SDLK_PERIOD = 46;
  SDLK_SLASH = 47;
  SDLK_0 = 48;
  SDLK_1 = 49;
  SDLK_2 = 50;
  SDLK_3 = 51;
  SDLK_4 = 52;
  SDLK_5 = 53;
  SDLK_6 = 54;
  SDLK_7 = 55;
  SDLK_8 = 56;
  SDLK_9 = 57;
  SDLK_COLON = 58;
  SDLK_SEMICOLON = 59;
  SDLK_LESS = 60;
  SDLK_EQUALS = 61;
  SDLK_GREATER = 62;
  SDLK_QUESTION = 63;
  SDLK_AT = 64;
  SDLK_LEFTBRACKET = 91;
  SDLK_BACKSLASH = 92;
  SDLK_RIGHTBRACKET = 93;
  SDLK_CARET = 94;
  SDLK_UNDERSCORE = 95;
  SDLK_BACKQUOTE = 96;
  SDLK_a = 97;
  SDLK_b = 98;
  SDLK_c = 99;
  SDLK_d = 100;
  SDLK_e = 101;
  SDLK_f = 102;
  SDLK_g = 103;
  SDLK_h = 104;
  SDLK_i = 105;
  SDLK_j = 106;
  SDLK_k = 107;
  SDLK_l = 108;
  SDLK_m = 109;
  SDLK_n = 110;
  SDLK_o = 111;
  SDLK_p = 112;
  SDLK_q = 113;
  SDLK_r = 114;
  SDLK_s = 115;
  SDLK_t = 116;
  SDLK_u = 117;
  SDLK_v = 118;
  SDLK_w = 119;
  SDLK_x = 120;
  SDLK_y = 121;
  SDLK_z = 122;
  SDLK_CAPSLOCK = 1073741881;
  SDLK_F1 = 1073741882;
  SDLK_F2 = 1073741883;
  SDLK_F3 = 1073741884;
  SDLK_F4 = 1073741885;
  SDLK_F5 = 1073741886;
  SDLK_F6 = 1073741887;
  SDLK_F7 = 1073741888;
  SDLK_F8 = 1073741889;
  SDLK_F9 = 1073741890;
  SDLK_F10 = 1073741891;
  SDLK_F11 = 1073741892;
  SDLK_F12 = 1073741893;
  SDLK_PRINTSCREEN = 1073741894;
  SDLK_SCROLLLOCK = 1073741895;
  SDLK_PAUSE = 1073741896;
  SDLK_INSERT = 1073741897;
  SDLK_HOME = 1073741898;
  SDLK_PAGEUP = 1073741899;
  SDLK_DELETE = 127;
  SDLK_END = 1073741901;
  SDLK_PAGEDOWN = 1073741902;
  SDLK_RIGHT = 1073741903;
  SDLK_LEFT = 1073741904;
  SDLK_DOWN = 1073741905;
  SDLK_UP = 1073741906;
  SDLK_NUMLOCKCLEAR = 1073741907;
  SDLK_KP_DIVIDE = 1073741908;
  SDLK_KP_MULTIPLY = 1073741909;
  SDLK_KP_MINUS = 1073741910;
  SDLK_KP_PLUS = 1073741911;
  SDLK_KP_ENTER = 1073741912;
  SDLK_KP_1 = 1073741913;
  SDLK_KP_2 = 1073741914;
  SDLK_KP_3 = 1073741915;
  SDLK_KP_4 = 1073741916;
  SDLK_KP_5 = 1073741917;
  SDLK_KP_6 = 1073741918;
  SDLK_KP_7 = 1073741919;
  SDLK_KP_8 = 1073741920;
  SDLK_KP_9 = 1073741921;
  SDLK_KP_0 = 1073741922;
  SDLK_KP_PERIOD = 1073741923;
  SDLK_APPLICATION = 1073741925;
  SDLK_POWER = 1073741926;
  SDLK_KP_EQUALS = 1073741927;
  SDLK_F13 = 1073741928;
  SDLK_F14 = 1073741929;
  SDLK_F15 = 1073741930;
  SDLK_F16 = 1073741931;
  SDLK_F17 = 1073741932;
  SDLK_F18 = 1073741933;
  SDLK_F19 = 1073741934;
  SDLK_F20 = 1073741935;
  SDLK_F21 = 1073741936;
  SDLK_F22 = 1073741937;
  SDLK_F23 = 1073741938;
  SDLK_F24 = 1073741939;
  SDLK_EXECUTE = 1073741940;
  SDLK_HELP = 1073741941;
  SDLK_MENU = 1073741942;
  SDLK_SELECT = 1073741943;
  SDLK_STOP = 1073741944;
  SDLK_AGAIN = 1073741945;
  SDLK_UNDO = 1073741946;
  SDLK_CUT = 1073741947;
  SDLK_COPY = 1073741948;
  SDLK_PASTE = 1073741949;
  SDLK_FIND = 1073741950;
  SDLK_MUTE = 1073741951;
  SDLK_VOLUMEUP = 1073741952;
  SDLK_VOLUMEDOWN = 1073741953;
  SDLK_KP_COMMA = 1073741957;
  SDLK_KP_EQUALSAS400 = 1073741958;
  SDLK_ALTERASE = 1073741977;
  SDLK_SYSREQ = 1073741978;
  SDLK_CANCEL = 1073741979;
  SDLK_CLEAR = 1073741980;
  SDLK_PRIOR = 1073741981;
  SDLK_RETURN2 = 1073741982;
  SDLK_SEPARATOR = 1073741983;
  SDLK_OUT = 1073741984;
  SDLK_OPER = 1073741985;
  SDLK_CLEARAGAIN = 1073741986;
  SDLK_CRSEL = 1073741987;
  SDLK_EXSEL = 1073741988;
  SDLK_KP_00 = 1073742000;
  SDLK_KP_000 = 1073742001;
  SDLK_THOUSANDSSEPARATOR = 1073742002;
  SDLK_DECIMALSEPARATOR = 1073742003;
  SDLK_CURRENCYUNIT = 1073742004;
  SDLK_CURRENCYSUBUNIT = 1073742005;
  SDLK_KP_LEFTPAREN = 1073742006;
  SDLK_KP_RIGHTPAREN = 1073742007;
  SDLK_KP_LEFTBRACE = 1073742008;
  SDLK_KP_RIGHTBRACE = 1073742009;
  SDLK_KP_TAB = 1073742010;
  SDLK_KP_BACKSPACE = 1073742011;
  SDLK_KP_A = 1073742012;
  SDLK_KP_B = 1073742013;
  SDLK_KP_C = 1073742014;
  SDLK_KP_D = 1073742015;
  SDLK_KP_E = 1073742016;
  SDLK_KP_F = 1073742017;
  SDLK_KP_XOR = 1073742018;
  SDLK_KP_POWER = 1073742019;
  SDLK_KP_PERCENT = 1073742020;
  SDLK_KP_LESS = 1073742021;
  SDLK_KP_GREATER = 1073742022;
  SDLK_KP_AMPERSAND = 1073742023;
  SDLK_KP_DBLAMPERSAND = 1073742024;
  SDLK_KP_VERTICALBAR = 1073742025;
  SDLK_KP_DBLVERTICALBAR = 1073742026;
  SDLK_KP_COLON = 1073742027;
  SDLK_KP_HASH = 1073742028;
  SDLK_KP_SPACE = 1073742029;
  SDLK_KP_AT = 1073742030;
  SDLK_KP_EXCLAM = 1073742031;
  SDLK_KP_MEMSTORE = 1073742032;
  SDLK_KP_MEMRECALL = 1073742033;
  SDLK_KP_MEMCLEAR = 1073742034;
  SDLK_KP_MEMADD = 1073742035;
  SDLK_KP_MEMSUBTRACT = 1073742036;
  SDLK_KP_MEMMULTIPLY = 1073742037;
  SDLK_KP_MEMDIVIDE = 1073742038;
  SDLK_KP_PLUSMINUS = 1073742039;
  SDLK_KP_CLEAR = 1073742040;
  SDLK_KP_CLEARENTRY = 1073742041;
  SDLK_KP_BINARY = 1073742042;
  SDLK_KP_OCTAL = 1073742043;
  SDLK_KP_DECIMAL = 1073742044;
  SDLK_KP_HEXADECIMAL = 1073742045;
  SDLK_LCTRL = 1073742048;
  SDLK_LSHIFT = 1073742049;
  SDLK_LALT = 1073742050;
  SDLK_LGUI = 1073742051;
  SDLK_RCTRL = 1073742052;
  SDLK_RSHIFT = 1073742053;
  SDLK_RALT = 1073742054;
  SDLK_RGUI = 1073742055;
  SDLK_MODE = 1073742081;
  SDLK_AUDIONEXT = 1073742082;
  SDLK_AUDIOPREV = 1073742083;
  SDLK_AUDIOSTOP = 1073742084;
  SDLK_AUDIOPLAY = 1073742085;
  SDLK_AUDIOMUTE = 1073742086;
  SDLK_MEDIASELECT = 1073742087;
  SDLK_WWW = 1073742088;
  SDLK_MAIL = 1073742089;
  SDLK_CALCULATOR = 1073742090;
  SDLK_COMPUTER = 1073742091;
  SDLK_AC_SEARCH = 1073742092;
  SDLK_AC_HOME = 1073742093;
  SDLK_AC_BACK = 1073742094;
  SDLK_AC_FORWARD = 1073742095;
  SDLK_AC_STOP = 1073742096;
  SDLK_AC_REFRESH = 1073742097;
  SDLK_AC_BOOKMARKS = 1073742098;
  SDLK_BRIGHTNESSDOWN = 1073742099;
  SDLK_BRIGHTNESSUP = 1073742100;
  SDLK_DISPLAYSWITCH = 1073742101;
  SDLK_KBDILLUMTOGGLE = 1073742102;
  SDLK_KBDILLUMDOWN = 1073742103;
  SDLK_KBDILLUMUP = 1073742104;
  SDLK_EJECT = 1073742105;
  SDLK_SLEEP = 1073742106;
  SDLK_APP1 = 1073742107;
  SDLK_APP2 = 1073742108;
  SDLK_AUDIOREWIND = 1073742109;
  SDLK_AUDIOFASTFORWARD = 1073742110;

/// <summary>Enumeration of valid key mods (possibly OR'd together).</summary>
type
  SDL_Keymod = Integer;
  PSDL_Keymod = ^SDL_Keymod;

const
  KMOD_NONE = 0;
  KMOD_LSHIFT = 1;
  KMOD_RSHIFT = 2;
  KMOD_LCTRL = 64;
  KMOD_RCTRL = 128;
  KMOD_LALT = 256;
  KMOD_RALT = 512;
  KMOD_LGUI = 1024;
  KMOD_RGUI = 2048;
  KMOD_NUM = 4096;
  KMOD_CAPS = 8192;
  KMOD_MODE = 16384;
  KMOD_SCROLL = 32768;
  KMOD_CTRL = 192;
  KMOD_SHIFT = 3;
  KMOD_ALT = 768;
  KMOD_GUI = 3072;
  KMOD_RESERVED = 32768;

/// <summary>Cursor types for SDL_CreateSystemCursor().</summary>
type
  SDL_SystemCursor = Integer;
  PSDL_SystemCursor = ^SDL_SystemCursor;

const
  /// <summary>Arrow</summary>
  SDL_SYSTEM_CURSOR_ARROW = 0;
  /// <summary>I-beam</summary>
  SDL_SYSTEM_CURSOR_IBEAM = 1;
  /// <summary>Wait</summary>
  SDL_SYSTEM_CURSOR_WAIT = 2;
  /// <summary>Crosshair</summary>
  SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
  /// <summary>Small wait cursor (or Wait if not available)</summary>
  SDL_SYSTEM_CURSOR_WAITARROW = 4;
  /// <summary>Double arrow pointing northwest and southeast</summary>
  SDL_SYSTEM_CURSOR_SIZENWSE = 5;
  /// <summary>Double arrow pointing northeast and southwest</summary>
  SDL_SYSTEM_CURSOR_SIZENESW = 6;
  /// <summary>Double arrow pointing west and east</summary>
  SDL_SYSTEM_CURSOR_SIZEWE = 7;
  /// <summary>Double arrow pointing north and south</summary>
  SDL_SYSTEM_CURSOR_SIZENS = 8;
  /// <summary>Four pointed arrow pointing north, south, east, and west</summary>
  SDL_SYSTEM_CURSOR_SIZEALL = 9;
  /// <summary>Slashed circle or crossbones</summary>
  SDL_SYSTEM_CURSOR_NO = 10;
  /// <summary>Hand</summary>
  SDL_SYSTEM_CURSOR_HAND = 11;
  SDL_NUM_SYSTEM_CURSORS = 12;

/// <summary>Scroll direction types for the Scroll event</summary>
type
  SDL_MouseWheelDirection = Integer;
  PSDL_MouseWheelDirection = ^SDL_MouseWheelDirection;

const
  /// <summary>The scroll direction is normal</summary>
  SDL_MOUSEWHEEL_NORMAL = 0;
  /// <summary>The scroll direction is flipped / natural</summary>
  SDL_MOUSEWHEEL_FLIPPED = 1;

type
  SDL_JoystickType = Integer;
  PSDL_JoystickType = ^SDL_JoystickType;

const
  SDL_JOYSTICK_TYPE_UNKNOWN = 0;
  SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
  SDL_JOYSTICK_TYPE_WHEEL = 2;
  SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
  SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
  SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
  SDL_JOYSTICK_TYPE_GUITAR = 6;
  SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
  SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
  SDL_JOYSTICK_TYPE_THROTTLE = 9;

type
  SDL_JoystickPowerLevel = Integer;
  PSDL_JoystickPowerLevel = ^SDL_JoystickPowerLevel;

const
  SDL_JOYSTICK_POWER_UNKNOWN = -1;
  SDL_JOYSTICK_POWER_EMPTY = 0;
  SDL_JOYSTICK_POWER_LOW = 1;
  SDL_JOYSTICK_POWER_MEDIUM = 2;
  SDL_JOYSTICK_POWER_FULL = 3;
  SDL_JOYSTICK_POWER_WIRED = 4;
  SDL_JOYSTICK_POWER_MAX = 5;

type
  SDL_SensorType = Integer;
  PSDL_SensorType = ^SDL_SensorType;

const
  /// <summary>Returned for an invalid sensor</summary>
  SDL_SENSOR_INVALID = -1;
  /// <summary>Unknown sensor type</summary>
  SDL_SENSOR_UNKNOWN = 0;
  /// <summary>Accelerometer</summary>
  SDL_SENSOR_ACCEL = 1;
  /// <summary>Gyroscope</summary>
  SDL_SENSOR_GYRO = 2;

type
  SDL_GameControllerType = Integer;
  PSDL_GameControllerType = ^SDL_GameControllerType;

const
  SDL_CONTROLLER_TYPE_UNKNOWN = 0;
  SDL_CONTROLLER_TYPE_XBOX360 = 1;
  SDL_CONTROLLER_TYPE_XBOXONE = 2;
  SDL_CONTROLLER_TYPE_PS3 = 3;
  SDL_CONTROLLER_TYPE_PS4 = 4;
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
  SDL_CONTROLLER_TYPE_VIRTUAL = 6;
  SDL_CONTROLLER_TYPE_PS5 = 7;
  SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
  SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;

type
  SDL_GameControllerBindType = Integer;
  PSDL_GameControllerBindType = ^SDL_GameControllerBindType;

const
  SDL_CONTROLLER_BINDTYPE_NONE = 0;
  SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
  SDL_CONTROLLER_BINDTYPE_AXIS = 2;
  SDL_CONTROLLER_BINDTYPE_HAT = 3;

/// <summary>The list of axes available from a controller</summary>
/// <remarks>Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to SDL_JOYSTICK_AXIS_MAX,
/// and are centered within ~8000 of zero, though advanced UI will allow users to set
/// or autodetect the dead zone, which varies between controllers.
/// 
/// Trigger axis values range from 0 to SDL_JOYSTICK_AXIS_MAX.</remarks>
type
  SDL_GameControllerAxis = Integer;
  PSDL_GameControllerAxis = ^SDL_GameControllerAxis;

const
  SDL_CONTROLLER_AXIS_INVALID = -1;
  SDL_CONTROLLER_AXIS_LEFTX = 0;
  SDL_CONTROLLER_AXIS_LEFTY = 1;
  SDL_CONTROLLER_AXIS_RIGHTX = 2;
  SDL_CONTROLLER_AXIS_RIGHTY = 3;
  SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
  SDL_CONTROLLER_AXIS_MAX = 6;

/// <summary>The list of buttons available from a controller</summary>
type
  SDL_GameControllerButton = Integer;
  PSDL_GameControllerButton = ^SDL_GameControllerButton;

const
  SDL_CONTROLLER_BUTTON_INVALID = -1;
  SDL_CONTROLLER_BUTTON_A = 0;
  SDL_CONTROLLER_BUTTON_B = 1;
  SDL_CONTROLLER_BUTTON_X = 2;
  SDL_CONTROLLER_BUTTON_Y = 3;
  SDL_CONTROLLER_BUTTON_BACK = 4;
  SDL_CONTROLLER_BUTTON_GUIDE = 5;
  SDL_CONTROLLER_BUTTON_START = 6;
  SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
  SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
  SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
  SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
  SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
  SDL_CONTROLLER_BUTTON_MISC1 = 15;
  SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
  SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
  SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
  SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
  SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
  SDL_CONTROLLER_BUTTON_MAX = 21;

type
  SDL_TouchDeviceType = Integer;
  PSDL_TouchDeviceType = ^SDL_TouchDeviceType;

const
  SDL_TOUCH_DEVICE_INVALID = -1;
  SDL_TOUCH_DEVICE_DIRECT = 0;
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;

/// <summary>The types of events that can be delivered.</summary>
type
  SDL_EventType = Integer;
  PSDL_EventType = ^SDL_EventType;

const
  /// <summary>Unused (do not remove)</summary>
  SDL_FIRSTEVENT = 0;
  /// <summary>User-requested quit</summary>
  SDL_QUIT_ = 256;
  /// <summary>The application is being terminated by the OS
  /// Called on iOS in applicationWillTerminate()
  /// Called on Android in onDestroy()</summary>
  SDL_APP_TERMINATING = 257;
  /// <summary>The application is low on memory, free memory if possible.
  /// Called on iOS in applicationDidReceiveMemoryWarning()
  /// Called on Android in onLowMemory()</summary>
  SDL_APP_LOWMEMORY = 258;
  /// <summary>The application is about to enter the background
  /// Called on iOS in applicationWillResignActive()
  /// Called on Android in onPause()</summary>
  SDL_APP_WILLENTERBACKGROUND = 259;
  /// <summary>The application did enter the background and may not get CPU for some time
  /// Called on iOS in applicationDidEnterBackground()
  /// Called on Android in onPause()</summary>
  SDL_APP_DIDENTERBACKGROUND = 260;
  /// <summary>The application is about to enter the foreground
  /// Called on iOS in applicationWillEnterForeground()
  /// Called on Android in onResume()</summary>
  SDL_APP_WILLENTERFOREGROUND = 261;
  /// <summary>The application is now interactive
  /// Called on iOS in applicationDidBecomeActive()
  /// Called on Android in onResume()</summary>
  SDL_APP_DIDENTERFOREGROUND = 262;
  /// <summary>The user's locale preferences have changed.</summary>
  SDL_LOCALECHANGED = 263;
  /// <summary>Display state change</summary>
  SDL_DISPLAYEVENT_ = 336;
  /// <summary>Window state change</summary>
  SDL_WINDOWEVENT_ = 512;
  /// <summary>System specific event</summary>
  SDL_SYSWMEVENT_ = 513;
  /// <summary>Key pressed</summary>
  SDL_KEYDOWN = 768;
  /// <summary>Key released</summary>
  SDL_KEYUP = 769;
  /// <summary>Keyboard text editing (composition)</summary>
  SDL_TEXTEDITING = 770;
  /// <summary>Keyboard text input</summary>
  SDL_TEXTINPUT = 771;
  /// <summary>Keymap changed due to a system event such as an
  /// input language or keyboard layout change.</summary>
  SDL_KEYMAPCHANGED = 772;
  /// <summary>Mouse moved</summary>
  SDL_MOUSEMOTION = 1024;
  /// <summary>Mouse button pressed</summary>
  SDL_MOUSEBUTTONDOWN = 1025;
  /// <summary>Mouse button released</summary>
  SDL_MOUSEBUTTONUP = 1026;
  /// <summary>Mouse wheel motion</summary>
  SDL_MOUSEWHEEL = 1027;
  /// <summary>Joystick axis motion</summary>
  SDL_JOYAXISMOTION = 1536;
  /// <summary>Joystick trackball motion</summary>
  SDL_JOYBALLMOTION = 1537;
  /// <summary>Joystick hat position change</summary>
  SDL_JOYHATMOTION = 1538;
  /// <summary>Joystick button pressed</summary>
  SDL_JOYBUTTONDOWN = 1539;
  /// <summary>Joystick button released</summary>
  SDL_JOYBUTTONUP = 1540;
  /// <summary>A new joystick has been inserted into the system</summary>
  SDL_JOYDEVICEADDED = 1541;
  /// <summary>An opened joystick has been removed</summary>
  SDL_JOYDEVICEREMOVED = 1542;
  /// <summary>Game controller axis motion</summary>
  SDL_CONTROLLERAXISMOTION = 1616;
  /// <summary>Game controller button pressed</summary>
  SDL_CONTROLLERBUTTONDOWN = 1617;
  /// <summary>Game controller button released</summary>
  SDL_CONTROLLERBUTTONUP = 1618;
  /// <summary>A new Game controller has been inserted into the system</summary>
  SDL_CONTROLLERDEVICEADDED = 1619;
  /// <summary>An opened Game controller has been removed</summary>
  SDL_CONTROLLERDEVICEREMOVED = 1620;
  /// <summary>The controller mapping was updated</summary>
  SDL_CONTROLLERDEVICEREMAPPED = 1621;
  /// <summary>Game controller touchpad was touched</summary>
  SDL_CONTROLLERTOUCHPADDOWN = 1622;
  /// <summary>Game controller touchpad finger was moved</summary>
  SDL_CONTROLLERTOUCHPADMOTION = 1623;
  /// <summary>Game controller touchpad finger was lifted</summary>
  SDL_CONTROLLERTOUCHPADUP = 1624;
  /// <summary>Game controller sensor was updated</summary>
  SDL_CONTROLLERSENSORUPDATE = 1625;
  SDL_FINGERDOWN = 1792;
  SDL_FINGERUP = 1793;
  SDL_FINGERMOTION = 1794;
  SDL_DOLLARGESTURE = 2048;
  SDL_DOLLARRECORD = 2049;
  SDL_MULTIGESTURE = 2050;
  /// <summary>The clipboard changed</summary>
  SDL_CLIPBOARDUPDATE = 2304;
  /// <summary>The system requests a file open</summary>
  SDL_DROPFILE = 4096;
  /// <summary>text/plain drag-and-drop event</summary>
  SDL_DROPTEXT = 4097;
  /// <summary>A new set of drops is beginning (NULL filename)</summary>
  SDL_DROPBEGIN = 4098;
  /// <summary>Current set of drops is now complete (NULL filename)</summary>
  SDL_DROPCOMPLETE = 4099;
  /// <summary>A new audio device is available</summary>
  SDL_AUDIODEVICEADDED = 4352;
  /// <summary>An audio device has been removed.</summary>
  SDL_AUDIODEVICEREMOVED = 4353;
  /// <summary>A sensor was updated</summary>
  SDL_SENSORUPDATE_ = 4608;
  /// <summary>The render targets have been reset and their contents need to be updated</summary>
  SDL_RENDER_TARGETS_RESET = 8192;
  /// <summary>The device has been reset and all textures need to be recreated</summary>
  SDL_RENDER_DEVICE_RESET = 8193;
  /// <summary>Signals the end of an event poll cycle</summary>
  SDL_POLLSENTINEL = 32512;
  /// <summary>Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
  /// and should be allocated with SDL_RegisterEvents()</summary>
  SDL_USEREVENT_ = 32768;
  /// <summary>This last event is only for bounding internal arrays</summary>
  SDL_LASTEVENT = 65535;

type
  SDL_eventaction = Integer;
  PSDL_eventaction = ^SDL_eventaction;

const
  SDL_ADDEVENT = 0;
  SDL_PEEKEVENT = 1;
  SDL_GETEVENT = 2;

/// <summary>An enumeration of hint priorities</summary>
type
  SDL_HintPriority = Integer;
  PSDL_HintPriority = ^SDL_HintPriority;

const
  SDL_HINT_DEFAULT = 0;
  SDL_HINT_NORMAL = 1;
  SDL_HINT_OVERRIDE = 2;

/// <summary>The predefined log categories</summary>
/// <remarks>By default the application category is enabled at the INFO level,
/// the assert category is enabled at the WARN level, test is enabled
/// at the VERBOSE level and all other categories are enabled at the
/// CRITICAL level.</remarks>
type
  SDL_LogCategory = Integer;
  PSDL_LogCategory = ^SDL_LogCategory;

const
  SDL_LOG_CATEGORY_APPLICATION = 0;
  SDL_LOG_CATEGORY_ERROR = 1;
  SDL_LOG_CATEGORY_ASSERT = 2;
  SDL_LOG_CATEGORY_SYSTEM = 3;
  SDL_LOG_CATEGORY_AUDIO = 4;
  SDL_LOG_CATEGORY_VIDEO = 5;
  SDL_LOG_CATEGORY_RENDER = 6;
  SDL_LOG_CATEGORY_INPUT = 7;
  SDL_LOG_CATEGORY_TEST = 8;
  SDL_LOG_CATEGORY_RESERVED1 = 9;
  SDL_LOG_CATEGORY_RESERVED2 = 10;
  SDL_LOG_CATEGORY_RESERVED3 = 11;
  SDL_LOG_CATEGORY_RESERVED4 = 12;
  SDL_LOG_CATEGORY_RESERVED5 = 13;
  SDL_LOG_CATEGORY_RESERVED6 = 14;
  SDL_LOG_CATEGORY_RESERVED7 = 15;
  SDL_LOG_CATEGORY_RESERVED8 = 16;
  SDL_LOG_CATEGORY_RESERVED9 = 17;
  SDL_LOG_CATEGORY_RESERVED10 = 18;
  SDL_LOG_CATEGORY_CUSTOM = 19;

/// <summary>The predefined log priorities</summary>
type
  SDL_LogPriority = Integer;
  PSDL_LogPriority = ^SDL_LogPriority;

const
  SDL_LOG_PRIORITY_VERBOSE = 1;
  SDL_LOG_PRIORITY_DEBUG = 2;
  SDL_LOG_PRIORITY_INFO = 3;
  SDL_LOG_PRIORITY_WARN = 4;
  SDL_LOG_PRIORITY_ERROR = 5;
  SDL_LOG_PRIORITY_CRITICAL = 6;
  SDL_NUM_LOG_PRIORITIES = 7;

/// <summary>SDL_MessageBox flags. If supported will display warning icon, etc.</summary>
type
  SDL_MessageBoxFlags = Integer;
  PSDL_MessageBoxFlags = ^SDL_MessageBoxFlags;

const
  /// <summary>error dialog</summary>
  SDL_MESSAGEBOX_ERROR = 16;
  /// <summary>warning dialog</summary>
  SDL_MESSAGEBOX_WARNING = 32;
  /// <summary>informational dialog</summary>
  SDL_MESSAGEBOX_INFORMATION = 64;
  /// <summary>buttons placed left to right</summary>
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;
  /// <summary>buttons placed right to left</summary>
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;

/// <summary>Flags for SDL_MessageBoxButtonData.</summary>
type
  SDL_MessageBoxButtonFlags = Integer;
  PSDL_MessageBoxButtonFlags = ^SDL_MessageBoxButtonFlags;

const
  /// <summary>Marks the default button when return is hit</summary>
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;
  /// <summary>Marks the default button when escape is hit</summary>
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;

type
  SDL_MessageBoxColorType = Integer;
  PSDL_MessageBoxColorType = ^SDL_MessageBoxColorType;

const
  SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
  SDL_MESSAGEBOX_COLOR_TEXT = 1;
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
  SDL_MESSAGEBOX_COLOR_MAX = 5;

/// <summary>The basic state for the system's power supply.</summary>
type
  SDL_PowerState = Integer;
  PSDL_PowerState = ^SDL_PowerState;

const
  /// <summary>cannot determine power status</summary>
  SDL_POWERSTATE_UNKNOWN = 0;
  /// <summary>Not plugged in, running on the battery</summary>
  SDL_POWERSTATE_ON_BATTERY = 1;
  /// <summary>Plugged in, no battery available</summary>
  SDL_POWERSTATE_NO_BATTERY = 2;
  /// <summary>Plugged in, charging battery</summary>
  SDL_POWERSTATE_CHARGING = 3;
  /// <summary>Plugged in, battery charged</summary>
  SDL_POWERSTATE_CHARGED = 4;

/// <summary>Flags used when creating a rendering context</summary>
type
  SDL_RendererFlags = Integer;
  PSDL_RendererFlags = ^SDL_RendererFlags;

const
  /// <summary>The renderer is a software fallback</summary>
  SDL_RENDERER_SOFTWARE = 1;
  /// <summary>The renderer uses hardware
  /// acceleration</summary>
  SDL_RENDERER_ACCELERATED = 2;
  /// <summary>Present is synchronized
  /// with the refresh rate</summary>
  SDL_RENDERER_PRESENTVSYNC = 4;
  /// <summary>The renderer supports
  /// rendering to texture</summary>
  SDL_RENDERER_TARGETTEXTURE = 8;

/// <summary>The scaling mode for a texture.</summary>
type
  SDL_ScaleMode = Integer;
  PSDL_ScaleMode = ^SDL_ScaleMode;

const
  /// <summary>nearest pixel sampling</summary>
  SDL_ScaleModeNearest = 0;
  /// <summary>linear filtering</summary>
  SDL_ScaleModeLinear = 1;
  /// <summary>anisotropic filtering</summary>
  SDL_ScaleModeBest = 2;

/// <summary>The access pattern allowed for a texture.</summary>
type
  SDL_TextureAccess = Integer;
  PSDL_TextureAccess = ^SDL_TextureAccess;

const
  /// <summary>Changes rarely, not lockable</summary>
  SDL_TEXTUREACCESS_STATIC = 0;
  /// <summary>Changes frequently, lockable</summary>
  SDL_TEXTUREACCESS_STREAMING = 1;
  /// <summary>Texture can be used as a render target</summary>
  SDL_TEXTUREACCESS_TARGET = 2;

/// <summary>The texture channel modulation used in SDL_RenderCopy().</summary>
type
  SDL_TextureModulate = Integer;
  PSDL_TextureModulate = ^SDL_TextureModulate;

const
  /// <summary>No modulation</summary>
  SDL_TEXTUREMODULATE_NONE = 0;
  /// <summary>srcC = srcC * color</summary>
  SDL_TEXTUREMODULATE_COLOR = 1;
  /// <summary>srcA = srcA * alpha</summary>
  SDL_TEXTUREMODULATE_ALPHA = 2;

/// <summary>Flip constants for SDL_RenderCopyEx</summary>
type
  SDL_RendererFlip = Integer;
  PSDL_RendererFlip = ^SDL_RendererFlip;

const
  /// <summary>Do not flip</summary>
  SDL_FLIP_NONE = 0;
  /// <summary>flip horizontally</summary>
  SDL_FLIP_HORIZONTAL = 1;
  /// <summary>flip vertically</summary>
  SDL_FLIP_VERTICAL = 2;

/// <summary>An enum denoting the specific type of contents present in an SDL_WindowShapeParams union.</summary>
type
  WindowShapeMode = Integer;
  PWindowShapeMode = ^WindowShapeMode;

const
  /// <summary>The default mode, a binarized alpha cutoff of 1.</summary>
  ShapeModeDefault = 0;
  /// <summary>A binarized alpha cutoff with a given integer value.</summary>
  ShapeModeBinarizeAlpha = 1;
  /// <summary>A binarized alpha cutoff with a given integer value, but with the opposite comparison.</summary>
  ShapeModeReverseBinarizeAlpha = 2;
  /// <summary>A color key is applied.</summary>
  ShapeModeColorKey = 3;

type
  IMG_InitFlags = Integer;
  PIMG_InitFlags = ^IMG_InitFlags;

const
  IMG_INIT_JPG = 1;
  IMG_INIT_PNG = 2;
  IMG_INIT_TIF = 4;
  IMG_INIT_WEBP = 8;

type
  MIX_InitFlags = Integer;
  PMIX_InitFlags = ^MIX_InitFlags;

const
  MIX_INIT_FLAC = 1;
  MIX_INIT_MOD = 2;
  MIX_INIT_MP3 = 8;
  MIX_INIT_OGG = 16;
  MIX_INIT_MID = 32;
  MIX_INIT_OPUS = 64;

/// <summary>The different fading types supported</summary>
type
  Mix_Fading = Integer;
  PMix_Fading = ^Mix_Fading;

const
  MIX_NO_FADING = 0;
  MIX_FADING_OUT = 1;
  MIX_FADING_IN = 2;

/// <summary>These are types of music files (not libraries used to load them)</summary>
type
  Mix_MusicType = Integer;
  PMix_MusicType = ^Mix_MusicType;

const
  MUS_NONE = 0;
  MUS_CMD = 1;
  MUS_WAV = 2;
  MUS_MOD = 3;
  MUS_MID = 4;
  MUS_OGG = 5;
  MUS_MP3 = 6;
  MUS_MP3_MAD_UNUSED = 7;
  MUS_FLAC = 8;
  MUS_MODPLUG_UNUSED = 9;
  MUS_OPUS = 10;

type
  _anonymous_type_1 = Integer;
  P_anonymous_type_1 = ^_anonymous_type_1;

const
  nk_false = 0;
  nk_true = 1;

type
  nk_heading = Integer;
  Pnk_heading = ^nk_heading;

const
  NK_UP = 0;
  NK_RIGHT = 1;
  NK_DOWN = 2;
  NK_LEFT = 3;

type
  nk_button_behavior = Integer;
  Pnk_button_behavior = ^nk_button_behavior;

const
  NK_BUTTON_DEFAULT = 0;
  NK_BUTTON_REPEATER = 1;

type
  nk_modify = Integer;
  Pnk_modify = ^nk_modify;

const
  NK_FIXED = 0;
  NK_MODIFIABLE = 1;

type
  nk_orientation = Integer;
  Pnk_orientation = ^nk_orientation;

const
  NK_VERTICAL = 0;
  NK_HORIZONTAL = 1;

type
  nk_collapse_states = Integer;
  Pnk_collapse_states = ^nk_collapse_states;

const
  NK_MINIMIZED = 0;
  NK_MAXIMIZED = 1;

type
  nk_show_states = Integer;
  Pnk_show_states = ^nk_show_states;

const
  NK_HIDDEN = 0;
  NK_SHOWN = 1;

type
  nk_chart_type = Integer;
  Pnk_chart_type = ^nk_chart_type;

const
  NK_CHART_LINES = 0;
  NK_CHART_COLUMN = 1;
  NK_CHART_MAX = 2;

type
  nk_chart_event = Integer;
  Pnk_chart_event = ^nk_chart_event;

const
  NK_CHART_HOVERING = 1;
  NK_CHART_CLICKED = 2;

type
  nk_color_format = Integer;
  Pnk_color_format = ^nk_color_format;

const
  NK_RGB = 0;
  NK_RGBA = 1;

type
  nk_popup_type = Integer;
  Pnk_popup_type = ^nk_popup_type;

const
  NK_POPUP_STATIC = 0;
  NK_POPUP_DYNAMIC = 1;

type
  nk_layout_format = Integer;
  Pnk_layout_format = ^nk_layout_format;

const
  NK_DYNAMIC = 0;
  NK_STATIC = 1;

type
  nk_tree_type = Integer;
  Pnk_tree_type = ^nk_tree_type;

const
  NK_TREE_NODE = 0;
  NK_TREE_TAB = 1;

type
  nk_symbol_type = Integer;
  Pnk_symbol_type = ^nk_symbol_type;

const
  NK_SYMBOL_NONE = 0;
  NK_SYMBOL_X = 1;
  NK_SYMBOL_UNDERSCORE = 2;
  NK_SYMBOL_CIRCLE_SOLID = 3;
  NK_SYMBOL_CIRCLE_OUTLINE = 4;
  NK_SYMBOL_RECT_SOLID = 5;
  NK_SYMBOL_RECT_OUTLINE = 6;
  NK_SYMBOL_TRIANGLE_UP = 7;
  NK_SYMBOL_TRIANGLE_DOWN = 8;
  NK_SYMBOL_TRIANGLE_LEFT = 9;
  NK_SYMBOL_TRIANGLE_RIGHT = 10;
  NK_SYMBOL_PLUS = 11;
  NK_SYMBOL_MINUS = 12;
  NK_SYMBOL_MAX = 13;

/// <summary>### Input
/// /// The input API is responsible for holding the current input state composed of
/// /// mouse, key and text input states.
/// /// It is worth noting that no direct OS or window handling is done in nuklear.
/// /// Instead all input state has to be provided by platform specific code. This on one hand
/// /// expects more work from the user and complicates usage but on the other hand
/// /// provides simple abstraction over a big number of platforms, libraries and other
/// /// already provided functionality.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_input_begin(&ctx);
/// /// while (GetEvent(&evt)) {
/// ///     if (evt.type == MOUSE_MOVE)
/// ///         nk_input_motion(&ctx, evt.motion.x, evt.motion.y);
/// ///     else if (evt.type == [...]) {
/// ///         // [...]
/// ///     }
/// /// } nk_input_end(&ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// #### Usage
/// /// Input state needs to be provided to nuklear by first calling `nk_input_begin`
/// /// which resets internal state like delta mouse position and button transitions.
/// /// After `nk_input_begin` all current input state needs to be provided. This includes
/// /// mouse motion, button and key pressed and released, text input and scrolling.
/// /// Both event- or state-based input handling are supported by this API
/// /// and should work without problems. Finally after all input state has been
/// /// mirrored `nk_input_end` needs to be called to finish input process.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_context ctx;
/// /// nk_init_xxx(&ctx, ...);
/// /// while (1) {
/// ///     Event evt;
/// ///     nk_input_begin(&ctx);
/// ///     while (GetEvent(&evt)) {
/// ///         if (evt.type == MOUSE_MOVE)
/// ///             nk_input_motion(&ctx, evt.motion.x, evt.motion.y);
/// ///         else if (evt.type == [...]) {
/// ///             // [...]
/// ///         }
/// ///     }
/// ///     nk_input_end(&ctx);
/// ///     // [...]
/// ///     nk_clear(&ctx);
/// /// } nk_free(&ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// #### Reference
/// /// Function            | Description
/// /// --------------------|-------------------------------------------------------
/// /// __nk_input_begin__  | Begins the input mirroring process. Needs to be called before all other `nk_input_xxx` calls
/// /// __nk_input_motion__ | Mirrors mouse cursor position
/// /// __nk_input_key__    | Mirrors key state with either pressed or released
/// /// __nk_input_button__ | Mirrors mouse button state with either pressed or released
/// /// __nk_input_scroll__ | Mirrors mouse scroll values
/// /// __nk_input_char__   | Adds a single ASCII text character into an internal text buffer
/// /// __nk_input_glyph__  | Adds a single multi-byte UTF-8 character into an internal text buffer
/// /// __nk_input_unicode__| Adds a single unicode rune into an internal text buffer
/// /// __nk_input_end__    | Ends the input mirroring process by calculating state changes. Don't call any `nk_input_xxx` function referenced above after this call</summary>
type
  nk_keys = Integer;
  Pnk_keys = ^nk_keys;

const
  NK_KEY_NONE = 0;
  NK_KEY_SHIFT = 1;
  NK_KEY_CTRL = 2;
  NK_KEY_DEL = 3;
  NK_KEY_ENTER = 4;
  NK_KEY_TAB = 5;
  NK_KEY_BACKSPACE = 6;
  NK_KEY_COPY = 7;
  NK_KEY_CUT = 8;
  NK_KEY_PASTE = 9;
  NK_KEY_UP = 10;
  NK_KEY_DOWN = 11;
  NK_KEY_LEFT = 12;
  NK_KEY_RIGHT = 13;
  NK_KEY_TEXT_INSERT_MODE = 14;
  NK_KEY_TEXT_REPLACE_MODE = 15;
  NK_KEY_TEXT_RESET_MODE = 16;
  NK_KEY_TEXT_LINE_START = 17;
  NK_KEY_TEXT_LINE_END = 18;
  NK_KEY_TEXT_START = 19;
  NK_KEY_TEXT_END = 20;
  NK_KEY_TEXT_UNDO = 21;
  NK_KEY_TEXT_REDO = 22;
  NK_KEY_TEXT_SELECT_ALL = 23;
  NK_KEY_TEXT_WORD_LEFT = 24;
  NK_KEY_TEXT_WORD_RIGHT = 25;
  NK_KEY_SCROLL_START = 26;
  NK_KEY_SCROLL_END = 27;
  NK_KEY_SCROLL_DOWN = 28;
  NK_KEY_SCROLL_UP = 29;
  NK_KEY_MAX = 30;

type
  nk_buttons = Integer;
  Pnk_buttons = ^nk_buttons;

const
  NK_BUTTON_LEFT = 0;
  NK_BUTTON_MIDDLE = 1;
  NK_BUTTON_RIGHT = 2;
  NK_BUTTON_DOUBLE = 3;
  NK_BUTTON_MAX = 4;

/// <summary>### Drawing
/// /// This library was designed to be render backend agnostic so it does
/// /// not draw anything to screen directly. Instead all drawn shapes, widgets
/// /// are made of, are buffered into memory and make up a command queue.
/// /// Each frame therefore fills the command buffer with draw commands
/// /// that then need to be executed by the user and his own render backend.
/// /// After that the command buffer needs to be cleared and a new frame can be
/// /// started. It is probably important to note that the command buffer is the main
/// /// drawing API and the optional vertex buffer API only takes this format and
/// /// converts it into a hardware accessible format.
/// ///
/// /// #### Usage
/// /// To draw all draw commands accumulated over a frame you need your own render
/// /// backend able to draw a number of 2D primitives. This includes at least
/// /// filled and stroked rectangles, circles, text, lines, triangles and scissors.
/// /// As soon as this criterion is met you can iterate over each draw command
/// /// and execute each draw command in a interpreter like fashion:
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// const struct nk_command *cmd = 0;
/// /// nk_foreach(cmd, &ctx) {
/// ///     switch (cmd->type) {
/// ///     case NK_COMMAND_LINE:
/// ///         your_draw_line_function(...)
/// ///         break;
/// ///     case NK_COMMAND_RECT
/// ///         your_draw_rect_function(...)
/// ///         break;
/// ///     case //...:
/// ///         //[...]
/// ///     }
/// /// }
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// In program flow context draw commands need to be executed after input has been
/// /// gathered and the complete UI with windows and their contained widgets have
/// /// been executed and before calling `nk_clear` which frees all previously
/// /// allocated draw commands.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_context ctx;
/// /// nk_init_xxx(&ctx, ...);
/// /// while (1) {
/// ///     Event evt;
/// ///     nk_input_begin(&ctx);
/// ///     while (GetEvent(&evt)) {
/// ///         if (evt.type == MOUSE_MOVE)
/// ///             nk_input_motion(&ctx, evt.motion.x, evt.motion.y);
/// ///         else if (evt.type == [...]) {
/// ///             [...]
/// ///         }
/// ///     }
/// ///     nk_input_end(&ctx);
/// ///     //
/// ///     // [...]
/// ///     //
/// ///     const struct nk_command *cmd = 0;
/// ///     nk_foreach(cmd, &ctx) {
/// ///     switch (cmd->type) {
/// ///     case NK_COMMAND_LINE:
/// ///         your_draw_line_function(...)
/// ///         break;
/// ///     case NK_COMMAND_RECT
/// ///         your_draw_rect_function(...)
/// ///         break;
/// ///     case ...:
/// ///         // [...]
/// ///     }
/// ///     nk_clear(&ctx);
/// /// }
/// /// nk_free(&ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// You probably noticed that you have to draw all of the UI each frame which is
/// /// quite wasteful. While the actual UI updating loop is quite fast rendering
/// /// without actually needing it is not. So there are multiple things you could do.
/// ///
/// /// First is only update on input. This of course is only an option if your
/// /// application only depends on the UI and does not require any outside calculations.
/// /// If you actually only update on input make sure to update the UI two times each
/// /// frame and call `nk_clear` directly after the first pass and only draw in
/// /// the second pass. In addition it is recommended to also add additional timers
/// /// to make sure the UI is not drawn more than a fixed number of frames per second.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_context ctx;
/// /// nk_init_xxx(&ctx, ...);
/// /// while (1) {
/// ///     // [...wait for input ]
/// ///     // [...do two UI passes ...]
/// ///     do_ui(...)
/// ///     nk_clear(&ctx);
/// ///     do_ui(...)
/// ///     //
/// ///     // draw
/// ///     const struct nk_command *cmd = 0;
/// ///     nk_foreach(cmd, &ctx) {
/// ///     switch (cmd->type) {
/// ///     case NK_COMMAND_LINE:
/// ///         your_draw_line_function(...)
/// ///         break;
/// ///     case NK_COMMAND_RECT
/// ///         your_draw_rect_function(...)
/// ///         break;
/// ///     case ...:
/// ///         //[...]
/// ///     }
/// ///     nk_clear(&ctx);
/// /// }
/// /// nk_free(&ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// The second probably more applicable trick is to only draw if anything changed.
/// /// It is not really useful for applications with continuous draw loop but
/// /// quite useful for desktop applications. To actually get nuklear to only
/// /// draw on changes you first have to define `NK_ZERO_COMMAND_MEMORY` and
/// /// allocate a memory buffer that will store each unique drawing output.
/// /// After each frame you compare the draw command memory inside the library
/// /// with your allocated buffer by memcmp. If memcmp detects differences
/// /// you have to copy the command buffer into the allocated buffer
/// /// and then draw like usual (this example uses fixed memory but you could
/// /// use dynamically allocated memory).
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// //[... other defines ...]
/// /// #define NK_ZERO_COMMAND_MEMORY
/// /// #include "nuklear.h"
/// /// //
/// /// // setup context
/// /// struct nk_context ctx;
/// /// void *last = calloc(1,64*1024);
/// /// void *buf = calloc(1,64*1024);
/// /// nk_init_fixed(&ctx, buf, 64*1024);
/// /// //
/// /// // loop
/// /// while (1) {
/// ///     // [...input...]
/// ///     // [...ui...]
/// ///     void *cmds = nk_buffer_memory(&ctx.memory);
/// ///     if (memcmp(cmds, last, ctx.memory.allocated)) {
/// ///         memcpy(last,cmds,ctx.memory.allocated);
/// ///         const struct nk_command *cmd = 0;
/// ///         nk_foreach(cmd, &ctx) {
/// ///             switch (cmd->type) {
/// ///             case NK_COMMAND_LINE:
/// ///                 your_draw_line_function(...)
/// ///                 break;
/// ///             case NK_COMMAND_RECT
/// ///                 your_draw_rect_function(...)
/// ///                 break;
/// ///             case ...:
/// ///                 // [...]
/// ///             }
/// ///         }
/// ///     }
/// ///     nk_clear(&ctx);
/// /// }
/// /// nk_free(&ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Finally while using draw commands makes sense for higher abstracted platforms like
/// /// X11 and Win32 or drawing libraries it is often desirable to use graphics
/// /// hardware directly. Therefore it is possible to just define
/// /// `NK_INCLUDE_VERTEX_BUFFER_OUTPUT` which includes optional vertex output.
/// /// To access the vertex output you first have to convert all draw commands into
/// /// vertexes by calling `nk_convert` which takes in your preferred vertex format.
/// /// After successfully converting all draw commands just iterate over and execute all
/// /// vertex draw commands:
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// // fill configuration
/// /// struct your_vertex
/// /// {
/// ///     float pos[2]; // important to keep it to 2 floats
/// ///     float uv[2];
/// ///     unsigned char col[4];
/// /// };
/// /// struct nk_convert_config cfg = {};
/// /// static const struct nk_draw_vertex_layout_element vertex_layout[] = {
/// ///     {NK_VERTEX_POSITION, NK_FORMAT_FLOAT, NK_OFFSETOF(struct your_vertex, pos)},
/// ///     {NK_VERTEX_TEXCOORD, NK_FORMAT_FLOAT, NK_OFFSETOF(struct your_vertex, uv)},
/// ///     {NK_VERTEX_COLOR, NK_FORMAT_R8G8B8A8, NK_OFFSETOF(struct your_vertex, col)},
/// ///     {NK_VERTEX_LAYOUT_END}
/// /// };
/// /// cfg.shape_AA = NK_ANTI_ALIASING_ON;
/// /// cfg.line_AA = NK_ANTI_ALIASING_ON;
/// /// cfg.vertex_layout = vertex_layout;
/// /// cfg.vertex_size = sizeof(struct your_vertex);
/// /// cfg.vertex_alignment = NK_ALIGNOF(struct your_vertex);
/// /// cfg.circle_segment_count = 22;
/// /// cfg.curve_segment_count = 22;
/// /// cfg.arc_segment_count = 22;
/// /// cfg.global_alpha = 1.0f;
/// /// cfg.null = dev->null;
/// /// //
/// /// // setup buffers and convert
/// /// struct nk_buffer cmds, verts, idx;
/// /// nk_buffer_init_default(&cmds);
/// /// nk_buffer_init_default(&verts);
/// /// nk_buffer_init_default(&idx);
/// /// nk_convert(&ctx, &cmds, &verts, &idx, &cfg);
/// /// //
/// /// // draw
/// /// nk_draw_foreach(cmd, &ctx, &cmds) {
/// /// if (!cmd->elem_count) continue;
/// ///     //[...]
/// /// }
/// /// nk_buffer_free(&cms);
/// /// nk_buffer_free(&verts);
/// /// nk_buffer_free(&idx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// #### Reference
/// /// Function            | Description
/// /// --------------------|-------------------------------------------------------
/// /// __nk__begin__       | Returns the first draw command in the context draw command list to be drawn
/// /// __nk__next__        | Increments the draw command iterator to the next command inside the context draw command list
/// /// __nk_foreach__      | Iterates over each draw command inside the context draw command list
/// /// __nk_convert__      | Converts from the abstract draw commands list into a hardware accessible vertex format
/// /// __nk_draw_begin__   | Returns the first vertex command in the context vertex draw list to be executed
/// /// __nk__draw_next__   | Increments the vertex command iterator to the next command inside the context vertex command list
/// /// __nk__draw_end__    | Returns the end of the vertex draw list
/// /// __nk_draw_foreach__ | Iterates over each vertex draw command inside the vertex draw list</summary>
type
  nk_anti_aliasing = Integer;
  Pnk_anti_aliasing = ^nk_anti_aliasing;

const
  NK_ANTI_ALIASING_OFF = 0;
  NK_ANTI_ALIASING_ON = 1;

type
  nk_convert_result = Integer;
  Pnk_convert_result = ^nk_convert_result;

const
  NK_CONVERT_SUCCESS = 0;
  NK_CONVERT_INVALID_PARAM = 1;
  NK_CONVERT_COMMAND_BUFFER_FULL = 2;
  NK_CONVERT_VERTEX_BUFFER_FULL = 4;
  NK_CONVERT_ELEMENT_BUFFER_FULL = 8;

type
  nk_panel_flags = Integer;
  Pnk_panel_flags = ^nk_panel_flags;

const
  NK_WINDOW_BORDER = 1;
  NK_WINDOW_MOVABLE = 2;
  NK_WINDOW_SCALABLE = 4;
  NK_WINDOW_CLOSABLE = 8;
  NK_WINDOW_MINIMIZABLE = 16;
  NK_WINDOW_NO_SCROLLBAR = 32;
  NK_WINDOW_TITLE = 64;
  NK_WINDOW_SCROLL_AUTO_HIDE = 128;
  NK_WINDOW_BACKGROUND = 256;
  NK_WINDOW_SCALE_LEFT = 512;
  NK_WINDOW_NO_INPUT = 1024;

type
  nk_widget_layout_states = Integer;
  Pnk_widget_layout_states = ^nk_widget_layout_states;

const
  NK_WIDGET_INVALID = 0;
  NK_WIDGET_VALID = 1;
  NK_WIDGET_ROM = 2;

type
  nk_widget_states = Integer;
  Pnk_widget_states = ^nk_widget_states;

const
  NK_WIDGET_STATE_MODIFIED = 2;
  NK_WIDGET_STATE_INACTIVE = 4;
  NK_WIDGET_STATE_ENTERED = 8;
  NK_WIDGET_STATE_HOVER = 16;
  NK_WIDGET_STATE_ACTIVED = 32;
  NK_WIDGET_STATE_LEFT = 64;
  NK_WIDGET_STATE_HOVERED = 18;
  NK_WIDGET_STATE_ACTIVE = 34;

type
  nk_text_align = Integer;
  Pnk_text_align = ^nk_text_align;

const
  NK_TEXT_ALIGN_LEFT = 1;
  NK_TEXT_ALIGN_CENTERED = 2;
  NK_TEXT_ALIGN_RIGHT = 4;
  NK_TEXT_ALIGN_TOP = 8;
  NK_TEXT_ALIGN_MIDDLE = 16;
  NK_TEXT_ALIGN_BOTTOM = 32;

type
  nk_text_alignment = Integer;
  Pnk_text_alignment = ^nk_text_alignment;

const
  NK_TEXT_LEFT = 17;
  NK_TEXT_CENTERED = 18;
  NK_TEXT_RIGHT = 20;

type
  nk_edit_flags = Integer;
  Pnk_edit_flags = ^nk_edit_flags;

const
  NK_EDIT_DEFAULT = 0;
  NK_EDIT_READ_ONLY = 1;
  NK_EDIT_AUTO_SELECT = 2;
  NK_EDIT_SIG_ENTER = 4;
  NK_EDIT_ALLOW_TAB = 8;
  NK_EDIT_NO_CURSOR = 16;
  NK_EDIT_SELECTABLE = 32;
  NK_EDIT_CLIPBOARD = 64;
  NK_EDIT_CTRL_ENTER_NEWLINE = 128;
  NK_EDIT_NO_HORIZONTAL_SCROLL = 256;
  NK_EDIT_ALWAYS_INSERT_MODE = 512;
  NK_EDIT_MULTILINE = 1024;
  NK_EDIT_GOTO_END_ON_ACTIVATE = 2048;

type
  nk_edit_types = Integer;
  Pnk_edit_types = ^nk_edit_types;

const
  NK_EDIT_SIMPLE = 512;
  NK_EDIT_FIELD = 608;
  NK_EDIT_BOX = 1640;
  NK_EDIT_EDITOR = 1128;

type
  nk_edit_events = Integer;
  Pnk_edit_events = ^nk_edit_events;

const
  NK_EDIT_ACTIVE = 1;
  NK_EDIT_INACTIVE = 2;
  NK_EDIT_ACTIVATED = 4;
  NK_EDIT_DEACTIVATED = 8;
  NK_EDIT_COMMITED = 16;

type
  nk_style_colors = Integer;
  Pnk_style_colors = ^nk_style_colors;

const
  NK_COLOR_TEXT = 0;
  NK_COLOR_WINDOW = 1;
  NK_COLOR_HEADER = 2;
  NK_COLOR_BORDER = 3;
  NK_COLOR_BUTTON = 4;
  NK_COLOR_BUTTON_HOVER = 5;
  NK_COLOR_BUTTON_ACTIVE = 6;
  NK_COLOR_TOGGLE = 7;
  NK_COLOR_TOGGLE_HOVER = 8;
  NK_COLOR_TOGGLE_CURSOR = 9;
  NK_COLOR_SELECT = 10;
  NK_COLOR_SELECT_ACTIVE = 11;
  NK_COLOR_SLIDER = 12;
  NK_COLOR_SLIDER_CURSOR = 13;
  NK_COLOR_SLIDER_CURSOR_HOVER = 14;
  NK_COLOR_SLIDER_CURSOR_ACTIVE = 15;
  NK_COLOR_PROPERTY = 16;
  NK_COLOR_EDIT = 17;
  NK_COLOR_EDIT_CURSOR = 18;
  NK_COLOR_COMBO = 19;
  NK_COLOR_CHART = 20;
  NK_COLOR_CHART_COLOR = 21;
  NK_COLOR_CHART_COLOR_HIGHLIGHT = 22;
  NK_COLOR_SCROLLBAR = 23;
  NK_COLOR_SCROLLBAR_CURSOR = 24;
  NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25;
  NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26;
  NK_COLOR_TAB_HEADER = 27;
  NK_COLOR_COUNT = 28;

type
  nk_style_cursor = Integer;
  Pnk_style_cursor = ^nk_style_cursor;

const
  NK_CURSOR_ARROW = 0;
  NK_CURSOR_TEXT = 1;
  NK_CURSOR_MOVE = 2;
  NK_CURSOR_RESIZE_VERTICAL = 3;
  NK_CURSOR_RESIZE_HORIZONTAL = 4;
  NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT = 5;
  NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT = 6;
  NK_CURSOR_COUNT = 7;

type
  nk_allocation_type = Integer;
  Pnk_allocation_type = ^nk_allocation_type;

const
  NK_BUFFER_FIXED = 0;
  NK_BUFFER_DYNAMIC = 1;

type
  nk_buffer_allocation_type = Integer;
  Pnk_buffer_allocation_type = ^nk_buffer_allocation_type;

const
  NK_BUFFER_FRONT = 0;
  NK_BUFFER_BACK = 1;
  NK_BUFFER_MAX = 2;

type
  nk_text_edit_type = Integer;
  Pnk_text_edit_type = ^nk_text_edit_type;

const
  NK_TEXT_EDIT_SINGLE_LINE = 0;
  NK_TEXT_EDIT_MULTI_LINE = 1;

type
  nk_text_edit_mode = Integer;
  Pnk_text_edit_mode = ^nk_text_edit_mode;

const
  NK_TEXT_EDIT_MODE_VIEW = 0;
  NK_TEXT_EDIT_MODE_INSERT = 1;
  NK_TEXT_EDIT_MODE_REPLACE = 2;

type
  nk_command_type = Integer;
  Pnk_command_type = ^nk_command_type;

const
  NK_COMMAND_NOP_ = 0;
  NK_COMMAND_SCISSOR_ = 1;
  NK_COMMAND_LINE_ = 2;
  NK_COMMAND_CURVE_ = 3;
  NK_COMMAND_RECT_ = 4;
  NK_COMMAND_RECT_FILLED_ = 5;
  NK_COMMAND_RECT_MULTI_COLOR_ = 6;
  NK_COMMAND_CIRCLE_ = 7;
  NK_COMMAND_CIRCLE_FILLED_ = 8;
  NK_COMMAND_ARC_ = 9;
  NK_COMMAND_ARC_FILLED_ = 10;
  NK_COMMAND_TRIANGLE_ = 11;
  NK_COMMAND_TRIANGLE_FILLED_ = 12;
  NK_COMMAND_POLYGON_ = 13;
  NK_COMMAND_POLYGON_FILLED_ = 14;
  NK_COMMAND_POLYLINE_ = 15;
  NK_COMMAND_TEXT_ = 16;
  NK_COMMAND_IMAGE_ = 17;
  NK_COMMAND_CUSTOM_ = 18;

type
  nk_command_clipping = Integer;
  Pnk_command_clipping = ^nk_command_clipping;

const
  NK_CLIPPING_OFF = 0;
  NK_CLIPPING_ON = 1;

type
  nk_style_item_type = Integer;
  Pnk_style_item_type = ^nk_style_item_type;

const
  NK_STYLE_ITEM_COLOR = 0;
  NK_STYLE_ITEM_IMAGE = 1;
  NK_STYLE_ITEM_NINE_SLICE = 2;

type
  nk_style_header_align = Integer;
  Pnk_style_header_align = ^nk_style_header_align;

const
  NK_HEADER_LEFT = 0;
  NK_HEADER_RIGHT = 1;

type
  nk_panel_type = Integer;
  Pnk_panel_type = ^nk_panel_type;

const
  NK_PANEL_NONE = 0;
  NK_PANEL_WINDOW = 1;
  NK_PANEL_GROUP = 2;
  NK_PANEL_POPUP = 4;
  NK_PANEL_CONTEXTUAL = 16;
  NK_PANEL_COMBO = 32;
  NK_PANEL_MENU = 64;
  NK_PANEL_TOOLTIP = 128;

type
  nk_panel_set = Integer;
  Pnk_panel_set = ^nk_panel_set;

const
  NK_PANEL_SET_NONBLOCK = 240;
  NK_PANEL_SET_POPUP = 244;
  NK_PANEL_SET_SUB = 246;

type
  nk_panel_row_layout_type = Integer;
  Pnk_panel_row_layout_type = ^nk_panel_row_layout_type;

const
  NK_LAYOUT_DYNAMIC_FIXED = 0;
  NK_LAYOUT_DYNAMIC_ROW = 1;
  NK_LAYOUT_DYNAMIC_FREE = 2;
  NK_LAYOUT_DYNAMIC = 3;
  NK_LAYOUT_STATIC_FIXED = 4;
  NK_LAYOUT_STATIC_ROW = 5;
  NK_LAYOUT_STATIC_FREE = 6;
  NK_LAYOUT_STATIC = 7;
  NK_LAYOUT_TEMPLATE = 8;
  NK_LAYOUT_COUNT = 9;

type
  nk_window_flags = Integer;
  Pnk_window_flags = ^nk_window_flags;

const
  NK_WINDOW_PRIVATE = 2048;
  NK_WINDOW_DYNAMIC = 2048;
  NK_WINDOW_ROM = 4096;
  NK_WINDOW_NOT_INTERACTIVE = 5120;
  NK_WINDOW_HIDDEN = 8192;
  NK_WINDOW_CLOSED = 16384;
  NK_WINDOW_MINIMIZED = 32768;
  NK_WINDOW_REMOVE_ROM = 65536;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PNativeUInt = ^NativeUInt;
  PWideChar = ^WideChar;
  PPointer = ^Pointer;
  PUInt8 = ^UInt8;
  P_SDL_iconv_t = Pointer;
  PP_SDL_iconv_t = ^P_SDL_iconv_t;
  PSDL_semaphore = Pointer;
  PPSDL_semaphore = ^PSDL_semaphore;
  P_SDL_AudioStream = Pointer;
  PP_SDL_AudioStream = ^P_SDL_AudioStream;
  PSDL_BlitMap = Pointer;
  PPSDL_BlitMap = ^PSDL_BlitMap;
  P_SDL_Joystick = Pointer;
  PP_SDL_Joystick = ^P_SDL_Joystick;
  P_SDL_Sensor = Pointer;
  PP_SDL_Sensor = ^P_SDL_Sensor;
  P_SDL_GameController = Pointer;
  PP_SDL_GameController = ^P_SDL_GameController;
  P_SDL_Haptic = Pointer;
  PP_SDL_Haptic = ^P_SDL_Haptic;
  PSDL_hid_device_ = Pointer;
  PPSDL_hid_device_ = ^PSDL_hid_device_;
  P_Mix_Music = Pointer;
  PP_Mix_Music = ^P_Mix_Music;
  P_TCPsocket = Pointer;
  PP_TCPsocket = ^P_TCPsocket;
  P_UDPsocket = Pointer;
  PP_UDPsocket = ^P_UDPsocket;
  P_SDLNet_SocketSet = Pointer;
  PP_SDLNet_SocketSet = ^P_SDLNet_SocketSet;
  P_TTF_Font = Pointer;
  PP_TTF_Font = ^P_TTF_Font;
  Pnk_draw_command = Pointer;
  PPnk_draw_command = ^Pnk_draw_command;
  Pnk_draw_list = Pointer;
  PPnk_draw_list = ^Pnk_draw_list;
  Pnk_draw_vertex_layout_element = Pointer;
  PPnk_draw_vertex_layout_element = ^Pnk_draw_vertex_layout_element;
  Pnk_style_slide = Pointer;
  PPnk_style_slide = ^Pnk_style_slide;
  Pnk_user_font_glyph = Pointer;
  PPnk_user_font_glyph = ^Pnk_user_font_glyph;
  Psdlsurface_context = Pointer;
  PPsdlsurface_context = ^Psdlsurface_context;
  PSDL_AssertData = ^SDL_AssertData;
  PSDL_atomic_t = ^SDL_atomic_t;
  PSDL_RWops = ^SDL_RWops;
  PSDL_AudioSpec = ^SDL_AudioSpec;
  PSDL_AudioCVT = ^SDL_AudioCVT;
  PSDL_Color = ^SDL_Color;
  PSDL_Palette = ^SDL_Palette;
  PSDL_PixelFormat = ^SDL_PixelFormat;
  PSDL_Point = ^SDL_Point;
  PSDL_FPoint = ^SDL_FPoint;
  PSDL_Rect = ^SDL_Rect;
  PSDL_FRect = ^SDL_FRect;
  PSDL_Surface = ^SDL_Surface;
  PPSDL_Surface = ^PSDL_Surface;
  PSDL_DisplayMode = ^SDL_DisplayMode;
  PSDL_Keysym = ^SDL_Keysym;
  PSDL_JoystickGUID = ^SDL_JoystickGUID;
  PSDL_GameControllerButtonBind = ^SDL_GameControllerButtonBind;
  PSDL_Finger = ^SDL_Finger;
  PSDL_CommonEvent = ^SDL_CommonEvent;
  PSDL_DisplayEvent = ^SDL_DisplayEvent;
  PSDL_WindowEvent = ^SDL_WindowEvent;
  PSDL_KeyboardEvent = ^SDL_KeyboardEvent;
  PSDL_TextEditingEvent = ^SDL_TextEditingEvent;
  PSDL_TextInputEvent = ^SDL_TextInputEvent;
  PSDL_MouseMotionEvent = ^SDL_MouseMotionEvent;
  PSDL_MouseButtonEvent = ^SDL_MouseButtonEvent;
  PSDL_MouseWheelEvent = ^SDL_MouseWheelEvent;
  PSDL_JoyAxisEvent = ^SDL_JoyAxisEvent;
  PSDL_JoyBallEvent = ^SDL_JoyBallEvent;
  PSDL_JoyHatEvent = ^SDL_JoyHatEvent;
  PSDL_JoyButtonEvent = ^SDL_JoyButtonEvent;
  PSDL_JoyDeviceEvent = ^SDL_JoyDeviceEvent;
  PSDL_ControllerAxisEvent = ^SDL_ControllerAxisEvent;
  PSDL_ControllerButtonEvent = ^SDL_ControllerButtonEvent;
  PSDL_ControllerDeviceEvent = ^SDL_ControllerDeviceEvent;
  PSDL_ControllerTouchpadEvent = ^SDL_ControllerTouchpadEvent;
  PSDL_ControllerSensorEvent = ^SDL_ControllerSensorEvent;
  PSDL_AudioDeviceEvent = ^SDL_AudioDeviceEvent;
  PSDL_TouchFingerEvent = ^SDL_TouchFingerEvent;
  PSDL_MultiGestureEvent = ^SDL_MultiGestureEvent;
  PSDL_DollarGestureEvent = ^SDL_DollarGestureEvent;
  PSDL_DropEvent = ^SDL_DropEvent;
  PSDL_SensorEvent = ^SDL_SensorEvent;
  PSDL_QuitEvent = ^SDL_QuitEvent;
  PSDL_OSEvent = ^SDL_OSEvent;
  PSDL_UserEvent = ^SDL_UserEvent;
  PSDL_SysWMEvent = ^SDL_SysWMEvent;
  PSDL_HapticDirection = ^SDL_HapticDirection;
  PSDL_HapticConstant = ^SDL_HapticConstant;
  PSDL_HapticPeriodic = ^SDL_HapticPeriodic;
  PSDL_HapticCondition = ^SDL_HapticCondition;
  PSDL_HapticRamp = ^SDL_HapticRamp;
  PSDL_HapticLeftRight = ^SDL_HapticLeftRight;
  PSDL_HapticCustom = ^SDL_HapticCustom;
  PSDL_hid_device_info = ^SDL_hid_device_info;
  PSDL_MessageBoxButtonData = ^SDL_MessageBoxButtonData;
  PSDL_MessageBoxColor = ^SDL_MessageBoxColor;
  PSDL_MessageBoxColorScheme = ^SDL_MessageBoxColorScheme;
  PSDL_MessageBoxData = ^SDL_MessageBoxData;
  PSDL_RendererInfo = ^SDL_RendererInfo;
  PSDL_Vertex = ^SDL_Vertex;
  PSDL_WindowShapeMode = ^SDL_WindowShapeMode;
  PSDL_version = ^SDL_version;
  PSDL_Locale = ^SDL_Locale;
  PMix_Chunk = ^Mix_Chunk;
  PIPaddress = ^IPaddress;
  PUDPpacket = ^UDPpacket;
  PPUDPpacket = ^PUDPpacket;
  P_SDLNet_GenericSocket = ^_SDLNet_GenericSocket;
  Pplm_packet_t = ^plm_packet_t;
  Pplm_plane_t = ^plm_plane_t;
  Pplm_frame_t = ^plm_frame_t;
  Pplm_samples_t = ^plm_samples_t;
  Pnk_color = ^nk_color;
  Pnk_colorf = ^nk_colorf;
  Pnk_vec2 = ^nk_vec2;
  Pnk_vec2i = ^nk_vec2i;
  Pnk_rect = ^nk_rect;
  Pnk_recti = ^nk_recti;
  Pnk_image = ^nk_image;
  Pnk_nine_slice = ^nk_nine_slice;
  Pnk_cursor = ^nk_cursor;
  Pnk_scroll = ^nk_scroll;
  Pnk_allocator = ^nk_allocator;
  Pnk_draw_null_texture = ^nk_draw_null_texture;
  Pnk_convert_config = ^nk_convert_config;
  Pnk_list_view = ^nk_list_view;
  Pnk_user_font = ^nk_user_font;
  PPnk_user_font = ^Pnk_user_font;
  Pnk_memory_status = ^nk_memory_status;
  Pnk_buffer_marker = ^nk_buffer_marker;
  Pnk_memory = ^nk_memory;
  Pnk_buffer = ^nk_buffer;
  Pnk_str = ^nk_str;
  Pnk_clipboard = ^nk_clipboard;
  Pnk_text_undo_record = ^nk_text_undo_record;
  Pnk_text_undo_state = ^nk_text_undo_state;
  Pnk_text_edit = ^nk_text_edit;
  Pnk_command = ^nk_command;
  Pnk_command_scissor = ^nk_command_scissor;
  Pnk_command_line = ^nk_command_line;
  Pnk_command_curve = ^nk_command_curve;
  Pnk_command_rect = ^nk_command_rect;
  Pnk_command_rect_filled = ^nk_command_rect_filled;
  Pnk_command_rect_multi_color = ^nk_command_rect_multi_color;
  Pnk_command_triangle = ^nk_command_triangle;
  Pnk_command_triangle_filled = ^nk_command_triangle_filled;
  Pnk_command_circle = ^nk_command_circle;
  Pnk_command_circle_filled = ^nk_command_circle_filled;
  Pnk_command_arc = ^nk_command_arc;
  Pnk_command_arc_filled = ^nk_command_arc_filled;
  Pnk_command_polygon = ^nk_command_polygon;
  Pnk_command_polygon_filled = ^nk_command_polygon_filled;
  Pnk_command_polyline = ^nk_command_polyline;
  Pnk_command_image = ^nk_command_image;
  Pnk_command_custom = ^nk_command_custom;
  Pnk_command_text = ^nk_command_text;
  Pnk_command_buffer = ^nk_command_buffer;
  Pnk_mouse_button = ^nk_mouse_button;
  Pnk_mouse = ^nk_mouse;
  Pnk_key = ^nk_key;
  Pnk_keyboard = ^nk_keyboard;
  Pnk_input = ^nk_input;
  Pnk_style_item = ^nk_style_item;
  Pnk_style_text = ^nk_style_text;
  Pnk_style_button = ^nk_style_button;
  Pnk_style_toggle = ^nk_style_toggle;
  Pnk_style_selectable = ^nk_style_selectable;
  Pnk_style_slider = ^nk_style_slider;
  Pnk_style_progress = ^nk_style_progress;
  Pnk_style_scrollbar = ^nk_style_scrollbar;
  Pnk_style_edit = ^nk_style_edit;
  Pnk_style_property = ^nk_style_property;
  Pnk_style_chart = ^nk_style_chart;
  Pnk_style_combo = ^nk_style_combo;
  Pnk_style_tab = ^nk_style_tab;
  Pnk_style_window_header = ^nk_style_window_header;
  Pnk_style_window = ^nk_style_window;
  Pnk_style = ^nk_style;
  Pnk_chart_slot = ^nk_chart_slot;
  Pnk_chart = ^nk_chart;
  Pnk_row_layout = ^nk_row_layout;
  Pnk_popup_buffer = ^nk_popup_buffer;
  Pnk_menu_state = ^nk_menu_state;
  Pnk_panel = ^nk_panel;
  Pnk_popup_state = ^nk_popup_state;
  Pnk_edit_state = ^nk_edit_state;
  Pnk_property_state = ^nk_property_state;
  Pnk_window = ^nk_window;
  Pnk_config_stack_style_item_element = ^nk_config_stack_style_item_element;
  Pnk_config_stack_float_element = ^nk_config_stack_float_element;
  Pnk_config_stack_vec2_element = ^nk_config_stack_vec2_element;
  Pnk_config_stack_flags_element = ^nk_config_stack_flags_element;
  Pnk_config_stack_color_element = ^nk_config_stack_color_element;
  Pnk_config_stack_user_font_element = ^nk_config_stack_user_font_element;
  Pnk_config_stack_button_behavior_element = ^nk_config_stack_button_behavior_element;
  Pnk_config_stack_style_item = ^nk_config_stack_style_item;
  Pnk_config_stack_float = ^nk_config_stack_float;
  Pnk_config_stack_vec2 = ^nk_config_stack_vec2;
  Pnk_config_stack_flags = ^nk_config_stack_flags;
  Pnk_config_stack_color = ^nk_config_stack_color;
  Pnk_config_stack_user_font = ^nk_config_stack_user_font;
  Pnk_config_stack_button_behavior = ^nk_config_stack_button_behavior;
  Pnk_configuration_stacks = ^nk_configuration_stacks;
  Pnk_table = ^nk_table;
  Pnk_page_element = ^nk_page_element;
  Pnk_page = ^nk_page;
  Pnk_pool = ^nk_pool;
  Pnk_context = ^nk_context;

  Sint8 = Int8;
  //Uint8 = UInt8;
  //PUint8 = ^Uint8;
  PPUint8 = ^PUint8;
  Sint16 = Int16;
  PSint16 = ^Sint16;
  //Uint16 = UInt16;
  PUint16 = ^Uint16;
  Sint32 = Int32;
  //Uint32 = UInt32;
  PUint32 = ^Uint32;
  Sint64 = Int64;
  //Uint64 = UInt64;
  SDL_compile_time_assert_uint8 = array [0..0] of Integer;
  SDL_compile_time_assert_sint8 = array [0..0] of Integer;
  SDL_compile_time_assert_uint16 = array [0..0] of Integer;
  SDL_compile_time_assert_sint16 = array [0..0] of Integer;
  SDL_compile_time_assert_uint32 = array [0..0] of Integer;
  SDL_compile_time_assert_sint32 = array [0..0] of Integer;
  SDL_compile_time_assert_uint64 = array [0..0] of Integer;
  SDL_compile_time_assert_sint64 = array [0..0] of Integer;
  SDL_compile_time_assert_enum = array [0..0] of Integer;

  SDL_malloc_func = function(size: NativeUInt): Pointer; cdecl;
  PSDL_malloc_func = ^SDL_malloc_func;

  SDL_calloc_func = function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  PSDL_calloc_func = ^SDL_calloc_func;

  SDL_realloc_func = function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  PSDL_realloc_func = ^SDL_realloc_func;

  SDL_free_func = procedure(mem: Pointer); cdecl;
  PSDL_free_func = ^SDL_free_func;
  SDL_iconv_t = Pointer;
  PSDL_iconv_t = ^SDL_iconv_t;

  /// <summary>The prototype for the application's main() function</summary>
  SDL_main_func = function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;

  SDL_AssertData = record
    always_ignore: Integer;
    trigger_count: Cardinal;
    condition: PUTF8Char;
    filename: PUTF8Char;
    linenum: Integer;
    &function: PUTF8Char;
    next: PSDL_AssertData;
  end;

  /// <summary>A callback that fires when an SDL assertion fails.</summary>
  /// <param name="data">a pointer to the SDL_AssertData structure corresponding to the
  ///   current assertion</param>
  /// <param name="userdata">what was passed as `userdata` to SDL_SetAssertionHandler()</param>
  /// <returns>an SDL_AssertState value indicating how to handle the failure.</returns>
  SDL_AssertionHandler = function(const data: PSDL_AssertData; userdata: Pointer): SDL_AssertState; cdecl;
  SDL_SpinLock = Integer;
  PSDL_SpinLock = ^SDL_SpinLock;

  /// <summary>A type representing an atomic integer value.  It is a struct
  /// so people don't accidentally use numeric operations on it.</summary>
  SDL_atomic_t = record
    value: Integer;
  end;

  PSDL_mutex = Pointer;
  PPSDL_mutex = ^PSDL_mutex;
  PSDL_sem = Pointer;
  PPSDL_sem = ^PSDL_sem;
  PSDL_cond = Pointer;
  PPSDL_cond = ^PSDL_cond;
  PSDL_Thread = Pointer;
  PPSDL_Thread = ^PSDL_Thread;
  SDL_threadID_ = Cardinal;
  SDL_TLSID = Cardinal;

  /// <summary>The function passed to SDL_CreateThread().</summary>
  /// <param name="data">what was passed as `data` to SDL_CreateThread()</param>
  /// <returns>a value that can be reported through SDL_WaitThread().</returns>
  SDL_ThreadFunction = function(data: Pointer): Integer; cdecl;
  pfnSDL_CurrentBeginThread_func = function: UInt64; cdecl;
  pfnSDL_CurrentBeginThread = function(p1: Pointer; p2: Cardinal; func: pfnSDL_CurrentBeginThread_func; p4: Pointer; p5: Cardinal; p6: PCardinal): UIntPtr; cdecl;

  pfnSDL_CurrentEndThread = procedure(code: Cardinal); cdecl;

  _anonymous_type_2 = record
    data: Pointer;
    size: NativeUInt;
    left: NativeUInt;
  end;
  P_anonymous_type_2 = ^_anonymous_type_2;

  _anonymous_type_3 = record
    append: SDL_bool;
    h: Pointer;
    buffer: _anonymous_type_2;
  end;
  P_anonymous_type_3 = ^_anonymous_type_3;

  _anonymous_type_4 = record
    base: PUint8;
    here: PUint8;
    stop: PUint8;
  end;
  P_anonymous_type_4 = ^_anonymous_type_4;

  _anonymous_type_5 = record
    data1: Pointer;
    data2: Pointer;
  end;
  P_anonymous_type_5 = ^_anonymous_type_5;

  _anonymous_type_6 = record
    case Integer of
      0: (windowsio: _anonymous_type_3);
      1: (mem: _anonymous_type_4);
      2: (unknown: _anonymous_type_5);
  end;
  P_anonymous_type_6 = ^_anonymous_type_6;

  /// <summary>This is the read/write operation structure -- very basic.</summary>
  SDL_RWops = record
    /// <summary>Return the size of the file in this rwops, or -1 if unknown</summary>
    size: function(context: PSDL_RWops): Sint64; cdecl;
    /// <summary>Seek to <c>offset</c> relative to <c>whence,</c> one of stdio's whence values:
    /// RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END</summary>
    /// <returns>the final offset in the data stream, or -1 on error.</returns>
    seek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;
    /// <summary>Read up to <c>maxnum</c> objects each of size <c>size</c> from the data
    /// stream to the area pointed at by <c>ptr.</c></summary>
    /// <returns>the number of objects read, or 0 at error or end of file.</returns>
    read: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;
    /// <summary>Write exactly <c>num</c> objects each of size <c>size</c> from the area
    /// pointed at by <c>ptr</c> to data stream.</summary>
    /// <returns>the number of objects written, or 0 at error or end of file.</returns>
    write: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;
    /// <summary>Close and free an allocated SDL_RWops structure.</summary>
    /// <returns>0 if successful or -1 on write error when flushing data.</returns>
    close: function(context: PSDL_RWops): Integer; cdecl;
    &type: Uint32;
    hidden: _anonymous_type_6;
  end;

  /// <summary>Audio format flags.</summary>
  /// <remarks>These are what the 16 bits in SDL_AudioFormat currently mean...
  /// (Unspecified bits are always zero).
  /// <code>
  ///     ++-----------------------sample is signed if set
  ///     ||
  ///     ||       ++-----------sample is bigendian if set
  ///     ||       ||
  ///     ||       ||          ++---sample is float if set
  ///     ||       ||          ||
  ///     ||       ||          || +---sample bit size---+
  ///     ||       ||          || |                     |
  ///     15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
  /// </code>
  /// 
  /// There are macros in SDL 2.0 and later to query these bits.</remarks>
  SDL_AudioFormat = Uint16;

  /// <summary>This function is called when the audio device needs more data.</summary>
  /// <param name="userdata">An application-specific parameter saved in
  ///   the SDL_AudioSpec structure</param>
  /// <param name="stream">A pointer to the audio data buffer.</param>
  /// <param name="len">The length of that buffer in bytes.</param></summary>
  /// <remarks>Once the callback returns, the buffer will no longer be valid.
  /// Stereo samples are stored in a LRLRLR ordering.
  /// 
  /// You can choose to avoid callbacks and use SDL_QueueAudio() instead, if
  /// you like. Just open your audio device with a NULL callback.</remarks>
  SDL_AudioCallback = procedure(userdata: Pointer; stream: PUint8; len: Integer); cdecl;

  /// <summary>The calculated values in this structure are calculated by SDL_OpenAudio().</summary>
  /// <remarks>For multi-channel audio, the default SDL channel mapping is:
  /// 2:  FL FR                       (stereo)
  /// 3:  FL FR LFE                   (2.1 surround)
  /// 4:  FL FR BL BR                 (quad)
  /// 5:  FL FR FC BL BR              (quad + center)
  /// 6:  FL FR FC LFE SL SR          (5.1 surround - last two can also be BL BR)
  /// 7:  FL FR FC LFE BC SL SR       (6.1 surround)
  /// 8:  FL FR FC LFE BL BR SL SR    (7.1 surround)</remarks>
  SDL_AudioSpec = record
    /// <summary>DSP frequency -- samples per second</summary>
    freq: Integer;
    /// <summary>Audio data format</summary>
    format: SDL_AudioFormat;
    /// <summary>Number of channels: 1 mono, 2 stereo</summary>
    channels: Uint8;
    /// <summary>Audio buffer silence value (calculated)</summary>
    silence: Uint8;
    /// <summary>Audio buffer size in sample FRAMES (total samples divided by channel count)</summary>
    samples: Uint16;
    /// <summary>Necessary for some compile environments</summary>
    padding: Uint16;
    /// <summary>Audio buffer size in bytes (calculated)</summary>
    size: Uint32;
    /// <summary>Callback that feeds the audio device (NULL to use SDL_QueueAudio()).</summary>
    callback: SDL_AudioCallback;
    /// <summary>Userdata passed to callback (ignored for NULL callbacks).</summary>
    userdata: Pointer;
  end;

  SDL_AudioFilter = procedure(cvt: PSDL_AudioCVT; format: SDL_AudioFormat); cdecl;

  SDL_AudioCVT = record
    /// <summary>Set to 1 if conversion possible</summary>
    needed: Integer;
    /// <summary>Source audio format</summary>
    src_format: SDL_AudioFormat;
    /// <summary>Target audio format</summary>
    dst_format: SDL_AudioFormat;
    /// <summary>Rate conversion increment</summary>
    rate_incr: Double;
    /// <summary>Buffer to hold entire audio data</summary>
    buf: PUint8;
    /// <summary>Length of original audio buffer</summary>
    len: Integer;
    /// <summary>Length of converted audio buffer</summary>
    len_cvt: Integer;
    /// <summary>buffer must be len*len_mult big</summary>
    len_mult: Integer;
    /// <summary>Given len, final size is len*len_ratio</summary>
    len_ratio: Double;
    /// <summary>NULL-terminated list of filter functions</summary>
    filters: array [0..9] of SDL_AudioFilter;
    /// <summary>Current audio conversion function</summary>
    filter_index: Integer;
  end;

  /// <summary>SDL Audio Device IDs.</summary>
  /// <remarks>A successful call to SDL_OpenAudio() is always device id 1, and legacy
  /// SDL audio APIs assume you want this device ID. SDL_OpenAudioDevice() calls
  /// always returns devices >= 2 on success. The legacy calls are good both
  /// for backwards compatibility and when you don't care about multiple,
  /// specific, or capture devices.</remarks>
  SDL_AudioDeviceID = Uint32;
  PSDL_AudioStream = Pointer;
  PPSDL_AudioStream = ^PSDL_AudioStream;

  SDL_Color = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
    a: Uint8;
  end;

  SDL_Palette = record
    ncolors: Integer;
    colors: PSDL_Color;
    version: Uint32;
    refcount: Integer;
  end;

  /// <summary>Everything in the pixel format structure is read-only.</summary>
  SDL_PixelFormat = record
    format: Uint32;
    palette: PSDL_Palette;
    BitsPerPixel: Uint8;
    BytesPerPixel: Uint8;
    padding: array [0..1] of Uint8;
    Rmask: Uint32;
    Gmask: Uint32;
    Bmask: Uint32;
    Amask: Uint32;
    Rloss: Uint8;
    Gloss: Uint8;
    Bloss: Uint8;
    Aloss: Uint8;
    Rshift: Uint8;
    Gshift: Uint8;
    Bshift: Uint8;
    Ashift: Uint8;
    refcount: Integer;
    next: PSDL_PixelFormat;
  end;

  /// <summary>The structure that defines a point (integer)</summary>
  /// <remarks>SDL_EnclosePoints
  /// 
  /// SDL_PointInRect</remarks>
  SDL_Point = record
    x: Integer;
    y: Integer;
  end;

  /// <summary>The structure that defines a point (floating point)</summary>
  /// <remarks>SDL_EnclosePoints
  /// 
  /// SDL_PointInRect</remarks>
  SDL_FPoint = record
    x: Single;
    y: Single;
  end;

  /// <summary>A rectangle, with the origin at the upper left (integer).</summary>
  /// <remarks>SDL_RectEmpty
  /// 
  /// SDL_RectEquals
  /// 
  /// SDL_HasIntersection
  /// 
  /// SDL_IntersectRect
  /// 
  /// SDL_UnionRect
  /// 
  /// SDL_EnclosePoints</remarks>
  SDL_Rect = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end;

  /// <summary>A rectangle, with the origin at the upper left (floating point).</summary>
  SDL_FRect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  /// <summary>A collection of pixels used in software blitting.</summary>
  /// <remarks>This structure should be treated as read-only, except for <c>pixels,</c>        which, if not NULL, contains the raw pixel data for the surface.</remarks>
  SDL_Surface = record
    /// <summary>Read-only</summary>
    flags: Uint32;
    /// <summary>Read-only</summary>
    format: PSDL_PixelFormat;
    /// <summary>Read-only</summary>
    w: Integer;
    /// <summary>Read-only</summary>
    h: Integer;
    /// <summary>Read-only</summary>
    pitch: Integer;
    /// <summary>Read-write</summary>
    pixels: Pointer;
    /// <summary>Read-write</summary>
    userdata: Pointer;
    /// <summary>Read-only</summary>
    locked: Integer;
    /// <summary>Private</summary>
    list_blitmap: Pointer;
    /// <summary>Read-only</summary>
    clip_rect: SDL_Rect;
    /// <summary>Private</summary>
    map: PSDL_BlitMap;
    /// <summary>Read-mostly</summary>
    refcount: Integer;
  end;

  /// <summary>The type of function used for surface blitting functions.</summary>
  SDL_blit = function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

  /// <summary>The structure that defines a display mode</summary>
  /// <remarks>SDL_GetNumDisplayModes()
  /// 
  /// SDL_GetDisplayMode()
  /// 
  /// SDL_GetDesktopDisplayMode()
  /// 
  /// SDL_GetCurrentDisplayMode()
  /// 
  /// SDL_GetClosestDisplayMode()
  /// 
  /// SDL_SetWindowDisplayMode()
  /// 
  /// SDL_GetWindowDisplayMode()</remarks>
  SDL_DisplayMode = record
    /// <summary>pixel format</summary>
    format: Uint32;
    /// <summary>width, in screen coordinates</summary>
    w: Integer;
    /// <summary>height, in screen coordinates</summary>
    h: Integer;
    /// <summary>refresh rate (or zero for unspecified)</summary>
    refresh_rate: Integer;
    /// <summary>driver-specific data, initialize to 0</summary>
    driverdata: Pointer;
  end;

  PSDL_Window = Pointer;
  PPSDL_Window = ^PSDL_Window;
  /// <summary>An opaque handle to an OpenGL context.</summary>
  SDL_GLContext = Pointer;

  /// <summary>Callback used for hit-testing.</summary>
  /// <param name="win">the SDL_Window where hit-testing was set on</param>
  /// <param name="area">an SDL_Point which should be hit-tested</param>
  /// <param name="data">what was passed as `callback_data` to SDL_SetWindowHitTest()</param>
  /// <returns>an SDL_HitTestResult value.</returns></summary>
  /// <remarks>SDL_SetWindowHitTest</remarks>
  SDL_HitTest = function(win: PSDL_Window; const area: PSDL_Point; data: Pointer): SDL_HitTestResult; cdecl;
  /// <summary>The SDL virtual key representation.</summary>
  /// <remarks>Values of this type are used to represent keyboard keys using the current
  /// layout of the keyboard.  These values include Unicode values representing
  /// the unmodified character that would be generated by pressing the key, or
  /// an SDLK_* constant for those keys that do not generate characters.
  /// 
  /// A special exception is the number keys at the top of the keyboard which
  /// always map to SDLK_0...SDLK_9, regardless of layout.</remarks>
  SDL_Keycode = Sint32;

  /// <summary>The SDL keysym structure, used in key events.</summary>
  /// <remarks>If you are looking for translated character input, see the ::SDL_TEXTINPUT event.</remarks>
  SDL_Keysym = record
    /// <summary>SDL physical key code - see ::SDL_Scancode for details</summary>
    scancode: SDL_Scancode;
    /// <summary>SDL virtual key code - see ::SDL_Keycode for details</summary>
    sym: SDL_Keycode;
    /// <summary>current key modifiers</summary>
    &mod: Uint16;
    unused: Uint32;
  end;

  PSDL_Cursor = Pointer;
  PPSDL_Cursor = ^PSDL_Cursor;
  PSDL_Joystick = Pointer;
  PPSDL_Joystick = ^PSDL_Joystick;

  SDL_JoystickGUID = record
    data: array [0..15] of Uint8;
  end;

  /// <summary>This is a unique ID for a joystick for the time it is connected to the system,
  /// and is never reused for the lifetime of the application. If the joystick is
  /// disconnected and reconnected, it will get a new ID.</summary>
  /// <remarks>The ID value starts at 0 and increments from there. The value -1 is an invalid ID.</remarks>
  SDL_JoystickID = Sint32;
  PSDL_Sensor = Pointer;
  PPSDL_Sensor = ^PSDL_Sensor;
  /// <summary>This is a unique ID for a sensor for the time it is connected to the system,
  /// and is never reused for the lifetime of the application.</summary>
  /// <remarks>The ID value starts at 0 and increments from there. The value -1 is an invalid ID.</remarks>
  SDL_SensorID = Sint32;
  PSDL_GameController = Pointer;
  PPSDL_GameController = ^PSDL_GameController;

  _anonymous_type_7 = record
    hat: Integer;
    hat_mask: Integer;
  end;
  P_anonymous_type_7 = ^_anonymous_type_7;

  _anonymous_type_8 = record
    case Integer of
      0: (button: Integer);
      1: (axis: Integer);
      2: (hat: _anonymous_type_7);
  end;
  P_anonymous_type_8 = ^_anonymous_type_8;

  /// <summary>Get the SDL joystick layer binding for this controller button/axis mapping</summary>
  SDL_GameControllerButtonBind = record
    bindType: SDL_GameControllerBindType;
    value: _anonymous_type_8;
  end;

  SDL_TouchID = Sint64;
  SDL_FingerID = Sint64;

  SDL_Finger = record
    id: SDL_FingerID;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  SDL_GestureID = Sint64;

  /// <summary>Fields shared by every event</summary>
  SDL_CommonEvent = record
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
  end;

  /// <summary>Display state change event data (event.display.* )</summary>
  SDL_DisplayEvent = record
    /// <summary>::SDL_DISPLAYEVENT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The associated display index</summary>
    display: Uint32;
    /// <summary>::SDL_DisplayEventID</summary>
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>event dependent data</summary>
    data1: Sint32;
  end;

  /// <summary>Window state change event data (event.window.* )</summary>
  SDL_WindowEvent = record
    /// <summary>::SDL_WINDOWEVENT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The associated window</summary>
    windowID: Uint32;
    /// <summary>::SDL_WindowEventID</summary>
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>event dependent data</summary>
    data1: Sint32;
    /// <summary>event dependent data</summary>
    data2: Sint32;
  end;

  /// <summary>Keyboard button event structure (event.key.* )</summary>
  SDL_KeyboardEvent = record
    /// <summary>::SDL_KEYDOWN or ::SDL_KEYUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with keyboard focus, if any</summary>
    windowID: Uint32;
    /// <summary>::SDL_PRESSED or ::SDL_RELEASED</summary>
    state: Uint8;
    /// <summary>Non-zero if this is a key repeat</summary>
    &repeat: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>The key that was pressed or released</summary>
    keysym: SDL_Keysym;
  end;

  /// <summary>Keyboard text editing event structure (event.edit.* )</summary>
  SDL_TextEditingEvent = record
    /// <summary>::SDL_TEXTEDITING</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with keyboard focus, if any</summary>
    windowID: Uint32;
    /// <summary>The editing text</summary>
    text: array [0..31] of UTF8Char;
    /// <summary>The start cursor of selected editing text</summary>
    start: Sint32;
    /// <summary>The length of selected editing text</summary>
    length: Sint32;
  end;

  /// <summary>Keyboard text input event structure (event.text.* )</summary>
  SDL_TextInputEvent = record
    /// <summary>::SDL_TEXTINPUT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with keyboard focus, if any</summary>
    windowID: Uint32;
    /// <summary>The input text</summary>
    text: array [0..31] of UTF8Char;
  end;

  /// <summary>Mouse motion event structure (event.motion.* )</summary>
  SDL_MouseMotionEvent = record
    /// <summary>::SDL_MOUSEMOTION</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with mouse focus, if any</summary>
    windowID: Uint32;
    /// <summary>The mouse instance id, or SDL_TOUCH_MOUSEID</summary>
    which: Uint32;
    /// <summary>The current button state</summary>
    state: Uint32;
    /// <summary>X coordinate, relative to window</summary>
    x: Sint32;
    /// <summary>Y coordinate, relative to window</summary>
    y: Sint32;
    /// <summary>The relative motion in the X direction</summary>
    xrel: Sint32;
    /// <summary>The relative motion in the Y direction</summary>
    yrel: Sint32;
  end;

  /// <summary>Mouse button event structure (event.button.* )</summary>
  SDL_MouseButtonEvent = record
    /// <summary>::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with mouse focus, if any</summary>
    windowID: Uint32;
    /// <summary>The mouse instance id, or SDL_TOUCH_MOUSEID</summary>
    which: Uint32;
    /// <summary>The mouse button index</summary>
    button: Uint8;
    /// <summary>::SDL_PRESSED or ::SDL_RELEASED</summary>
    state: Uint8;
    /// <summary>1 for single-click, 2 for double-click, etc.</summary>
    clicks: Uint8;
    padding1: Uint8;
    /// <summary>X coordinate, relative to window</summary>
    x: Sint32;
    /// <summary>Y coordinate, relative to window</summary>
    y: Sint32;
  end;

  /// <summary>Mouse wheel event structure (event.wheel.* )</summary>
  SDL_MouseWheelEvent = record
    /// <summary>::SDL_MOUSEWHEEL</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The window with mouse focus, if any</summary>
    windowID: Uint32;
    /// <summary>The mouse instance id, or SDL_TOUCH_MOUSEID</summary>
    which: Uint32;
    /// <summary>The amount scrolled horizontally, positive to the right and negative to the left</summary>
    x: Sint32;
    /// <summary>The amount scrolled vertically, positive away from the user and negative toward the user</summary>
    y: Sint32;
    /// <summary>Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back</summary>
    direction: Uint32;
    /// <summary>The amount scrolled horizontally, positive to the right and negative to the left, with float precision (added in 2.0.18)</summary>
    preciseX: Single;
    /// <summary>The amount scrolled vertically, positive away from the user and negative toward the user, with float precision (added in 2.0.18)</summary>
    preciseY: Single;
  end;

  /// <summary>Joystick axis motion event structure (event.jaxis.* )</summary>
  SDL_JoyAxisEvent = record
    /// <summary>::SDL_JOYAXISMOTION</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The joystick axis index</summary>
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>The axis value (range: -32768 to 32767)</summary>
    value: Sint16;
    padding4: Uint16;
  end;

  /// <summary>Joystick trackball motion event structure (event.jball.* )</summary>
  SDL_JoyBallEvent = record
    /// <summary>::SDL_JOYBALLMOTION</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The joystick trackball index</summary>
    ball: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>The relative motion in the X direction</summary>
    xrel: Sint16;
    /// <summary>The relative motion in the Y direction</summary>
    yrel: Sint16;
  end;

  /// <summary>Joystick hat position change event structure (event.jhat.* )</summary>
  SDL_JoyHatEvent = record
    /// <summary>::SDL_JOYHATMOTION</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The joystick hat index</summary>
    hat: Uint8;
    /// <summary>The hat position value.</summary>
    /// <remarks>::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP
    /// 
    /// ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT
    /// 
    /// ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN
    /// 
    /// Note that zero means the POV is centered.</remarks>
    value: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  /// <summary>Joystick button event structure (event.jbutton.* )</summary>
  SDL_JoyButtonEvent = record
    /// <summary>::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The joystick button index</summary>
    button: Uint8;
    /// <summary>::SDL_PRESSED or ::SDL_RELEASED</summary>
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  /// <summary>Joystick device event structure (event.jdevice.* )</summary>
  SDL_JoyDeviceEvent = record
    /// <summary>::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick device index for the ADDED event, instance id for the REMOVED event</summary>
    which: Sint32;
  end;

  /// <summary>Game controller axis motion event structure (event.caxis.* )</summary>
  SDL_ControllerAxisEvent = record
    /// <summary>::SDL_CONTROLLERAXISMOTION</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The controller axis (SDL_GameControllerAxis)</summary>
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    /// <summary>The axis value (range: -32768 to 32767)</summary>
    value: Sint16;
    padding4: Uint16;
  end;

  /// <summary>Game controller button event structure (event.cbutton.* )</summary>
  SDL_ControllerButtonEvent = record
    /// <summary>::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The controller button (SDL_GameControllerButton)</summary>
    button: Uint8;
    /// <summary>::SDL_PRESSED or ::SDL_RELEASED</summary>
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  /// <summary>Controller device event structure (event.cdevice.* )</summary>
  SDL_ControllerDeviceEvent = record
    /// <summary>::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, or ::SDL_CONTROLLERDEVICEREMAPPED</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event</summary>
    which: Sint32;
  end;

  /// <summary>Game controller touchpad event structure (event.ctouchpad.* )</summary>
  SDL_ControllerTouchpadEvent = record
    /// <summary>::SDL_CONTROLLERTOUCHPADDOWN or ::SDL_CONTROLLERTOUCHPADMOTION or ::SDL_CONTROLLERTOUCHPADUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The index of the touchpad</summary>
    touchpad: Sint32;
    /// <summary>The index of the finger on the touchpad</summary>
    finger: Sint32;
    /// <summary>Normalized in the range 0...1 with 0 being on the left</summary>
    x: Single;
    /// <summary>Normalized in the range 0...1 with 0 being at the top</summary>
    y: Single;
    /// <summary>Normalized in the range 0...1</summary>
    pressure: Single;
  end;

  /// <summary>Game controller sensor event structure (event.csensor.* )</summary>
  SDL_ControllerSensorEvent = record
    /// <summary>::SDL_CONTROLLERSENSORUPDATE</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The joystick instance id</summary>
    which: SDL_JoystickID;
    /// <summary>The type of the sensor, one of the values of ::SDL_SensorType</summary>
    sensor: Sint32;
    /// <summary>Up to 3 values from the sensor, as defined in SDL_sensor.h</summary>
    data: array [0..2] of Single;
  end;

  /// <summary>Audio device event structure (event.adevice.* )</summary>
  SDL_AudioDeviceEvent = record
    /// <summary>::SDL_AUDIODEVICEADDED, or ::SDL_AUDIODEVICEREMOVED</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The audio device index for the ADDED event (valid until next SDL_GetNumAudioDevices() call), SDL_AudioDeviceID for the REMOVED event</summary>
    which: Uint32;
    /// <summary>zero if an output device, non-zero if a capture device.</summary>
    iscapture: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  /// <summary>Touch finger event structure (event.tfinger.* )</summary>
  SDL_TouchFingerEvent = record
    /// <summary>::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The touch device id</summary>
    touchId: SDL_TouchID;
    fingerId: SDL_FingerID;
    /// <summary>Normalized in the range 0...1</summary>
    x: Single;
    /// <summary>Normalized in the range 0...1</summary>
    y: Single;
    /// <summary>Normalized in the range -1...1</summary>
    dx: Single;
    /// <summary>Normalized in the range -1...1</summary>
    dy: Single;
    /// <summary>Normalized in the range 0...1</summary>
    pressure: Single;
    /// <summary>The window underneath the finger, if any</summary>
    windowID: Uint32;
  end;

  /// <summary>Multiple Finger Gesture Event (event.mgesture.* )</summary>
  SDL_MultiGestureEvent = record
    /// <summary>::SDL_MULTIGESTURE</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The touch device id</summary>
    touchId: SDL_TouchID;
    dTheta: Single;
    dDist: Single;
    x: Single;
    y: Single;
    numFingers: Uint16;
    padding: Uint16;
  end;

  /// <summary>Dollar Gesture Event (event.dgesture.* )</summary>
  SDL_DollarGestureEvent = record
    /// <summary>::SDL_DOLLARGESTURE or ::SDL_DOLLARRECORD</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The touch device id</summary>
    touchId: SDL_TouchID;
    gestureId: SDL_GestureID;
    numFingers: Uint32;
    error: Single;
    /// <summary>Normalized center of gesture</summary>
    x: Single;
    /// <summary>Normalized center of gesture</summary>
    y: Single;
  end;

  /// <summary>An event used to request a file open by the system (event.drop.* )
  /// This event is enabled by default, you can disable it with SDL_EventState().</summary>
  /// <remarks>If this event is enabled, you must free the filename in the event.</remarks>
  SDL_DropEvent = record
    /// <summary>::SDL_DROPBEGIN or ::SDL_DROPFILE or ::SDL_DROPTEXT or ::SDL_DROPCOMPLETE</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The file name, which should be freed with SDL_free(), is NULL on begin/complete</summary>
    &file: PUTF8Char;
    /// <summary>The window that was dropped on, if any</summary>
    windowID: Uint32;
  end;

  /// <summary>Sensor event structure (event.sensor.* )</summary>
  SDL_SensorEvent = record
    /// <summary>::SDL_SENSORUPDATE</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The instance ID of the sensor</summary>
    which: Sint32;
    /// <summary>Up to 6 values from the sensor - additional values can be queried using SDL_SensorGetData()</summary>
    data: array [0..5] of Single;
  end;

  /// <summary>The "quit requested" event</summary>
  SDL_QuitEvent = record
    /// <summary>::SDL_QUIT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
  end;

  /// <summary>OS Specific event</summary>
  SDL_OSEvent = record
    /// <summary>::SDL_QUIT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
  end;

  /// <summary>A user-defined event type (event.user.* )</summary>
  SDL_UserEvent = record
    /// <summary>::SDL_USEREVENT through ::SDL_LASTEVENT-1</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>The associated window if any</summary>
    windowID: Uint32;
    /// <summary>User defined event code</summary>
    code: Sint32;
    /// <summary>User defined data pointer</summary>
    data1: Pointer;
    /// <summary>User defined data pointer</summary>
    data2: Pointer;
  end;

  PSDL_SysWMmsg = Pointer;
  PPSDL_SysWMmsg = ^PSDL_SysWMmsg;

  /// <summary>A video driver dependent system event (event.syswm.* )
  /// This event is disabled by default, you can enable it with SDL_EventState()</summary>
  /// <remarks>If you want to use this event, you should include SDL_syswm.h.</remarks>
  SDL_SysWMEvent = record
    /// <summary>::SDL_SYSWMEVENT</summary>
    &type: Uint32;
    /// <summary>In milliseconds, populated using SDL_GetTicks()</summary>
    timestamp: Uint32;
    /// <summary>driver dependent data, defined in SDL_syswm.h</summary>
    msg: PSDL_SysWMmsg;
  end;

  PSDL_Event = ^SDL_Event;

  /// <summary>General event structure</summary>
  SDL_Event = record
    case Integer of
    /// <summary>Event type, shared with all events</summary>
      0: (&type: Uint32);
    /// <summary>Common event data</summary>
      1: (common: SDL_CommonEvent);
    /// <summary>Display event data</summary>
      2: (display: SDL_DisplayEvent);
    /// <summary>Window event data</summary>
      3: (window: SDL_WindowEvent);
    /// <summary>Keyboard event data</summary>
      4: (key: SDL_KeyboardEvent);
    /// <summary>Text editing event data</summary>
      5: (edit: SDL_TextEditingEvent);
    /// <summary>Text input event data</summary>
      6: (text: SDL_TextInputEvent);
    /// <summary>Mouse motion event data</summary>
      7: (motion: SDL_MouseMotionEvent);
    /// <summary>Mouse button event data</summary>
      8: (button: SDL_MouseButtonEvent);
    /// <summary>Mouse wheel event data</summary>
      9: (wheel: SDL_MouseWheelEvent);
    /// <summary>Joystick axis event data</summary>
      10: (jaxis: SDL_JoyAxisEvent);
    /// <summary>Joystick ball event data</summary>
      11: (jball: SDL_JoyBallEvent);
    /// <summary>Joystick hat event data</summary>
      12: (jhat: SDL_JoyHatEvent);
    /// <summary>Joystick button event data</summary>
      13: (jbutton: SDL_JoyButtonEvent);
    /// <summary>Joystick device change event data</summary>
      14: (jdevice: SDL_JoyDeviceEvent);
    /// <summary>Game Controller axis event data</summary>
      15: (caxis: SDL_ControllerAxisEvent);
    /// <summary>Game Controller button event data</summary>
      16: (cbutton: SDL_ControllerButtonEvent);
    /// <summary>Game Controller device event data</summary>
      17: (cdevice: SDL_ControllerDeviceEvent);
    /// <summary>Game Controller touchpad event data</summary>
      18: (ctouchpad: SDL_ControllerTouchpadEvent);
    /// <summary>Game Controller sensor event data</summary>
      19: (csensor: SDL_ControllerSensorEvent);
    /// <summary>Audio device event data</summary>
      20: (adevice: SDL_AudioDeviceEvent);
    /// <summary>Sensor event data</summary>
      21: (sensor: SDL_SensorEvent);
    /// <summary>Quit request event data</summary>
      22: (quit: SDL_QuitEvent);
    /// <summary>Custom event data</summary>
      23: (user: SDL_UserEvent);
    /// <summary>System dependent window event data</summary>
      24: (syswm: SDL_SysWMEvent);
    /// <summary>Touch finger event data</summary>
      25: (tfinger: SDL_TouchFingerEvent);
    /// <summary>Gesture event data</summary>
      26: (mgesture: SDL_MultiGestureEvent);
    /// <summary>Gesture event data</summary>
      27: (dgesture: SDL_DollarGestureEvent);
    /// <summary>Drag and drop event data</summary>
      28: (drop: SDL_DropEvent);
      29: (padding: array [0..55] of Uint8);
  end;

  SDL_compile_time_assert_SDL_Event = array [0..0] of Integer;

  /// <summary>A function pointer used for callbacks that watch the event queue.</summary>
  /// <param name="userdata">what was passed as `userdata` to SDL_SetEventFilter()
  ///   or SDL_AddEventWatch, etc</param>
  /// <param name="event">the event that triggered the callback</param>
  /// <returns>1 to permit event to be added to the queue, and 0 to disallow
  ///   it. When used with SDL_AddEventWatch, the return value is ignored.</returns></summary>
  /// <remarks>SDL_SetEventFilter
  /// 
  /// SDL_AddEventWatch</remarks>
  SDL_EventFilter = function(userdata: Pointer; event: PSDL_Event): Integer; cdecl;
  PSDL_EventFilter = ^SDL_EventFilter;
  PSDL_Haptic = Pointer;
  PPSDL_Haptic = ^PSDL_Haptic;

  /// <summary>Structure that represents a haptic direction.</summary>
  /// <remarks>This is the direction where the force comes from,
  /// instead of the direction in which the force is exerted.
  /// 
  /// Directions can be specified by:
  /// - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.
  /// - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.
  /// - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.
  /// 
  /// Cardinal directions of the haptic device are relative to the positioning
  /// of the device.  North is considered to be away from the user.
  /// 
  /// The following diagram represents the cardinal directions:
  /// 
  /// <code>
  ///                  .--.
  ///                  |__| .-------.
  ///                  |=.| |.-----.|
  ///                  |--| ||     ||
  ///                  |  | |'-----'|
  ///                  |__|~')_____('
  ///                    [ COMPUTER ]
  /// 
  /// 
  ///                      North (0,-1)
  ///                          ^
  ///                          |
  ///                          |
  ///    (-1,0)  West <----[ HAPTIC ]----> East (1,0)
  ///                          |
  ///                          |
  ///                          v
  ///                       South (0,1)
  /// 
  /// 
  ///                       [ USER ]
  ///                         \|||/
  ///                         (o o)
  ///                   ---ooO-(_)-Ooo---
  /// </code>
  /// 
  /// If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a
  /// degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses
  /// the first <c>dir</c> parameter.  The cardinal directions would be:
  /// - North: 0 (0 degrees)
  /// - East: 9000 (90 degrees)
  /// - South: 18000 (180 degrees)
  /// - West: 27000 (270 degrees)
  /// 
  /// If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions
  /// (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses
  /// the first three <c>dir</c> parameters.  The cardinal directions would be:
  /// - North:  0,-1, 0
  /// - East:   1, 0, 0
  /// - South:  0, 1, 0
  /// - West:  -1, 0, 0
  /// 
  /// The Z axis represents the height of the effect if supported, otherwise
  /// it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you
  /// can use any multiple you want, only the direction matters.
  /// 
  /// If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.
  /// The first two <c>dir</c> parameters are used.  The <c>dir</c> parameters are as
  /// follows (all values are in hundredths of degrees):
  /// - Degrees from (1, 0) rotated towards (0, 1).
  /// - Degrees towards (0, 0, 1) (device needs at least 3 axes).
  /// 
  /// Example of force coming from the south with all encodings (force coming
  /// from the south means the user will have to pull the stick to counteract):
  /// 
  /// <code>
  ///   SDL_HapticDirection direction;
  /// 
  ///   // Cartesian directions
  ///   direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
  ///   direction.dir[0] = 0; // X position
  ///   direction.dir[1] = 1; // Y position
  ///   // Assuming the device has 2 axes, we don't need to specify third parameter.
  /// 
  ///   // Polar directions
  ///   direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
  ///   direction.dir[0] = 18000; // Polar only uses first parameter
  /// 
  ///   // Spherical coordinates
  ///   direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
  ///   direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
  /// </code>
  /// SDL_HAPTIC_POLAR
  /// 
  /// SDL_HAPTIC_CARTESIAN
  /// 
  /// SDL_HAPTIC_SPHERICAL
  /// 
  /// SDL_HAPTIC_STEERING_AXIS
  /// 
  /// SDL_HapticEffect
  /// 
  /// SDL_HapticNumAxes</remarks>
  SDL_HapticDirection = record
    /// <summary>The type of encoding.</summary>
    &type: Uint8;
    /// <summary>The encoded direction.</summary>
    dir: array [0..2] of Sint32;
  end;

  /// <summary>A structure containing a template for a Constant effect.</summary>
  /// <remarks>This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.
  /// 
  /// A constant effect applies a constant force in the specified direction
  /// to the joystick.
  /// SDL_HAPTIC_CONSTANT
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticConstant = record
    /// <summary>::SDL_HAPTIC_CONSTANT</summary>
    &type: Uint16;
    /// <summary>Direction of the effect.</summary>
    direction: SDL_HapticDirection;
    /// <summary>Duration of the effect.</summary>
    length: Uint32;
    /// <summary>Delay before starting the effect.</summary>
    delay: Uint16;
    /// <summary>Button that triggers the effect.</summary>
    button: Uint16;
    /// <summary>How soon it can be triggered again after button.</summary>
    interval: Uint16;
    /// <summary>Strength of the constant effect.</summary>
    level: Sint16;
    /// <summary>Duration of the attack.</summary>
    attack_length: Uint16;
    /// <summary>Level at the start of the attack.</summary>
    attack_level: Uint16;
    /// <summary>Duration of the fade.</summary>
    fade_length: Uint16;
    /// <summary>Level at the end of the fade.</summary>
    fade_level: Uint16;
  end;

  /// <summary>A structure containing a template for a Periodic effect.</summary>
  /// <remarks>The struct handles the following effects:
  /// - ::SDL_HAPTIC_SINE
  /// - ::SDL_HAPTIC_LEFTRIGHT
  /// - ::SDL_HAPTIC_TRIANGLE
  /// - ::SDL_HAPTIC_SAWTOOTHUP
  /// - ::SDL_HAPTIC_SAWTOOTHDOWN
  /// 
  /// A periodic effect consists in a wave-shaped effect that repeats itself
  /// over time.  The type determines the shape of the wave and the parameters
  /// determine the dimensions of the wave.
  /// 
  /// Phase is given by hundredth of a degree meaning that giving the phase a value
  /// of 9000 will displace it 25% of its period.  Here are sample values:
  /// -     0: No phase displacement.
  /// -  9000: Displaced 25% of its period.
  /// - 18000: Displaced 50% of its period.
  /// - 27000: Displaced 75% of its period.
  /// - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.
  /// 
  /// Examples:
  /// 
  /// <code>
  ///     SDL_HAPTIC_SINE
  ///       __      __      __      __
  ///      /  \    /  \    /  \    /
  ///     /    \__/    \__/    \__/
  /// 
  ///     SDL_HAPTIC_SQUARE
  ///      __    __    __    __    __
  ///     |  |  |  |  |  |  |  |  |  |
  ///     |  |__|  |__|  |__|  |__|  |
  /// 
  ///     SDL_HAPTIC_TRIANGLE
  ///       /\    /\    /\    /\    /\
  ///      /  \  /  \  /  \  /  \  /
  ///     /    \/    \/    \/    \/
  /// 
  ///     SDL_HAPTIC_SAWTOOTHUP
  ///       /|  /|  /|  /|  /|  /|  /|
  ///      / | / | / | / | / | / | / |
  ///     /  |/  |/  |/  |/  |/  |/  |
  /// 
  ///     SDL_HAPTIC_SAWTOOTHDOWN
  ///     \  |\  |\  |\  |\  |\  |\  |
  ///      \ | \ | \ | \ | \ | \ | \ |
  ///       \|  \|  \|  \|  \|  \|  \|
  /// </code>
  /// SDL_HAPTIC_SINE
  /// 
  /// SDL_HAPTIC_LEFTRIGHT
  /// 
  /// SDL_HAPTIC_TRIANGLE
  /// 
  /// SDL_HAPTIC_SAWTOOTHUP
  /// 
  /// SDL_HAPTIC_SAWTOOTHDOWN
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticPeriodic = record
    /// <summary>::SDL_HAPTIC_SINE, ::SDL_HAPTIC_LEFTRIGHT,
    /// ::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or
    /// ::SDL_HAPTIC_SAWTOOTHDOWN</summary>
    &type: Uint16;
    /// <summary>Direction of the effect.</summary>
    direction: SDL_HapticDirection;
    /// <summary>Duration of the effect.</summary>
    length: Uint32;
    /// <summary>Delay before starting the effect.</summary>
    delay: Uint16;
    /// <summary>Button that triggers the effect.</summary>
    button: Uint16;
    /// <summary>How soon it can be triggered again after button.</summary>
    interval: Uint16;
    /// <summary>Period of the wave.</summary>
    period: Uint16;
    /// <summary>Peak value; if negative, equivalent to 180 degrees extra phase shift.</summary>
    magnitude: Sint16;
    /// <summary>Mean value of the wave.</summary>
    offset: Sint16;
    /// <summary>Positive phase shift given by hundredth of a degree.</summary>
    phase: Uint16;
    /// <summary>Duration of the attack.</summary>
    attack_length: Uint16;
    /// <summary>Level at the start of the attack.</summary>
    attack_level: Uint16;
    /// <summary>Duration of the fade.</summary>
    fade_length: Uint16;
    /// <summary>Level at the end of the fade.</summary>
    fade_level: Uint16;
  end;

  /// <summary>A structure containing a template for a Condition effect.</summary>
  /// <remarks>The struct handles the following effects:
  /// - ::SDL_HAPTIC_SPRING: Effect based on axes position.
  /// - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.
  /// - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
  /// - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.
  /// 
  /// Direction is handled by condition internals instead of a direction member.
  /// The condition effect specific members have three parameters.  The first
  /// refers to the X axis, the second refers to the Y axis and the third
  /// refers to the Z axis.  The right terms refer to the positive side of the
  /// axis and the left terms refer to the negative side of the axis.  Please
  /// refer to the ::SDL_HapticDirection diagram for which side is positive and
  /// which is negative.
  /// SDL_HapticDirection
  /// 
  /// SDL_HAPTIC_SPRING
  /// 
  /// SDL_HAPTIC_DAMPER
  /// 
  /// SDL_HAPTIC_INERTIA
  /// 
  /// SDL_HAPTIC_FRICTION
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticCondition = record
    /// <summary>::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,
    /// ::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION</summary>
    &type: Uint16;
    /// <summary>Direction of the effect - Not used ATM.</summary>
    direction: SDL_HapticDirection;
    /// <summary>Duration of the effect.</summary>
    length: Uint32;
    /// <summary>Delay before starting the effect.</summary>
    delay: Uint16;
    /// <summary>Button that triggers the effect.</summary>
    button: Uint16;
    /// <summary>How soon it can be triggered again after button.</summary>
    interval: Uint16;
    /// <summary>Level when joystick is to the positive side; max 0xFFFF.</summary>
    right_sat: array [0..2] of Uint16;
    /// <summary>Level when joystick is to the negative side; max 0xFFFF.</summary>
    left_sat: array [0..2] of Uint16;
    /// <summary>How fast to increase the force towards the positive side.</summary>
    right_coeff: array [0..2] of Sint16;
    /// <summary>How fast to increase the force towards the negative side.</summary>
    left_coeff: array [0..2] of Sint16;
    /// <summary>Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered.</summary>
    deadband: array [0..2] of Uint16;
    /// <summary>Position of the dead zone.</summary>
    center: array [0..2] of Sint16;
  end;

  /// <summary>A structure containing a template for a Ramp effect.</summary>
  /// <remarks>This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.
  /// 
  /// The ramp effect starts at start strength and ends at end strength.
  /// It augments in linear fashion.  If you use attack and fade with a ramp
  /// the effects get added to the ramp effect making the effect become
  /// quadratic instead of linear.
  /// SDL_HAPTIC_RAMP
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticRamp = record
    /// <summary>::SDL_HAPTIC_RAMP</summary>
    &type: Uint16;
    /// <summary>Direction of the effect.</summary>
    direction: SDL_HapticDirection;
    /// <summary>Duration of the effect.</summary>
    length: Uint32;
    /// <summary>Delay before starting the effect.</summary>
    delay: Uint16;
    /// <summary>Button that triggers the effect.</summary>
    button: Uint16;
    /// <summary>How soon it can be triggered again after button.</summary>
    interval: Uint16;
    /// <summary>Beginning strength level.</summary>
    start: Sint16;
    /// <summary>Ending strength level.</summary>
    &end: Sint16;
    /// <summary>Duration of the attack.</summary>
    attack_length: Uint16;
    /// <summary>Level at the start of the attack.</summary>
    attack_level: Uint16;
    /// <summary>Duration of the fade.</summary>
    fade_length: Uint16;
    /// <summary>Level at the end of the fade.</summary>
    fade_level: Uint16;
  end;

  /// <summary>A structure containing a template for a Left/Right effect.</summary>
  /// <remarks>This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.
  /// 
  /// The Left/Right effect is used to explicitly control the large and small
  /// motors, commonly found in modern game controllers. The small (right) motor
  /// is high frequency, and the large (left) motor is low frequency.
  /// SDL_HAPTIC_LEFTRIGHT
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticLeftRight = record
    /// <summary>::SDL_HAPTIC_LEFTRIGHT</summary>
    &type: Uint16;
    /// <summary>Duration of the effect in milliseconds.</summary>
    length: Uint32;
    /// <summary>Control of the large controller motor.</summary>
    large_magnitude: Uint16;
    /// <summary>Control of the small controller motor.</summary>
    small_magnitude: Uint16;
  end;

  /// <summary>A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.</summary>
  /// <remarks>This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.
  /// 
  /// A custom force feedback effect is much like a periodic effect, where the
  /// application can define its exact shape.  You will have to allocate the
  /// data yourself.  Data should consist of channels * samples Uint16 samples.
  /// 
  /// If channels is one, the effect is rotated using the defined direction.
  /// Otherwise it uses the samples in data for the different axes.
  /// SDL_HAPTIC_CUSTOM
  /// 
  /// SDL_HapticEffect</remarks>
  SDL_HapticCustom = record
    /// <summary>::SDL_HAPTIC_CUSTOM</summary>
    &type: Uint16;
    /// <summary>Direction of the effect.</summary>
    direction: SDL_HapticDirection;
    /// <summary>Duration of the effect.</summary>
    length: Uint32;
    /// <summary>Delay before starting the effect.</summary>
    delay: Uint16;
    /// <summary>Button that triggers the effect.</summary>
    button: Uint16;
    /// <summary>How soon it can be triggered again after button.</summary>
    interval: Uint16;
    /// <summary>Axes to use, minimum of one.</summary>
    channels: Uint8;
    /// <summary>Sample periods.</summary>
    period: Uint16;
    /// <summary>Amount of samples.</summary>
    samples: Uint16;
    /// <summary>Should contain channels*samples items.</summary>
    data: PUint16;
    /// <summary>Duration of the attack.</summary>
    attack_length: Uint16;
    /// <summary>Level at the start of the attack.</summary>
    attack_level: Uint16;
    /// <summary>Duration of the fade.</summary>
    fade_length: Uint16;
    /// <summary>Level at the end of the fade.</summary>
    fade_level: Uint16;
  end;

  /// <summary>The generic template for any haptic effect.</summary>
  /// <remarks>All values max at 32767 (0x7FFF).  Signed values also can be negative.
  /// Time values unless specified otherwise are in milliseconds.
  /// 
  /// You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767
  /// value.  Neither delay, interval, attack_length nor fade_length support
  /// ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.
  /// 
  /// Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of
  /// ::SDL_HAPTIC_INFINITY.
  /// 
  /// Button triggers may not be supported on all devices, it is advised to not
  /// use them if possible.  Buttons start at index 1 instead of index 0 like
  /// the joystick.
  /// 
  /// If both attack_length and fade_level are 0, the envelope is not used,
  /// otherwise both values are used.
  /// 
  /// Common parts:
  /// 
  /// <code>
  ///   // Replay - All effects have this
  ///   Uint32 length;        // Duration of effect (ms).
  ///   Uint16 delay;         // Delay before starting effect.
  /// 
  ///   // Trigger - All effects have this
  ///   Uint16 button;        // Button that triggers effect.
  ///   Uint16 interval;      // How soon before effect can be triggered again.
  /// 
  ///   // Envelope - All effects except condition effects have this
  ///   Uint16 attack_length; // Duration of the attack (ms).
  ///   Uint16 attack_level;  // Level at the start of the attack.
  ///   Uint16 fade_length;   // Duration of the fade out (ms).
  ///   Uint16 fade_level;    // Level at the end of the fade.
  /// </code>
  /// 
  /// Here we have an example of a constant effect evolution in time:
  /// 
  /// <code>
  ///     Strength
  ///     ^
  ///     |
  ///     |    effect level -->  _________________
  ///     |                     /                 \
  ///     |                    /                   \
  ///     |                   /                     \
  ///     |                  /                       \
  ///     | attack_level --> |                        \
  ///     |                  |                        |  <---  fade_level
  ///     |
  ///     +--------------------------------------------------> Time
  ///                        [--]                 [---]
  ///                        attack_length        fade_length
  /// 
  ///     [------------------][-----------------------]
  ///     delay               length
  /// </code>
  /// 
  /// Note either the attack_level or the fade_level may be above the actual
  /// effect level.
  /// SDL_HapticConstant
  /// 
  /// SDL_HapticPeriodic
  /// 
  /// SDL_HapticCondition
  /// 
  /// SDL_HapticRamp
  /// 
  /// SDL_HapticLeftRight
  /// 
  /// SDL_HapticCustom</remarks>
  SDL_HapticEffect = record
    case Integer of
    /// <summary>Effect type.</summary>
      0: (&type: Uint16);
    /// <summary>Constant effect.</summary>
      1: (constant: SDL_HapticConstant);
    /// <summary>Periodic effect.</summary>
      2: (periodic: SDL_HapticPeriodic);
    /// <summary>Condition effect.</summary>
      3: (condition: SDL_HapticCondition);
    /// <summary>Ramp effect.</summary>
      4: (ramp: SDL_HapticRamp);
    /// <summary>Left/Right effect.</summary>
      5: (leftright: SDL_HapticLeftRight);
    /// <summary>Custom effect.</summary>
      6: (custom: SDL_HapticCustom);
  end;
  PSDL_HapticEffect = ^SDL_HapticEffect;

  PSDL_hid_device = Pointer;
  PPSDL_hid_device = ^PSDL_hid_device;

  /// <summary>hidapi info structure</summary>
  /// <remarks>Information about a connected HID device</remarks>
  SDL_hid_device_info = record
    /// <summary>Platform-specific device path</summary>
    path: PUTF8Char;
    /// <summary>Device Vendor ID</summary>
    vendor_id: Word;
    /// <summary>Device Product ID</summary>
    product_id: Word;
    /// <summary>Serial Number</summary>
    serial_number: PWideChar;
    /// <summary>Device Release Number in binary-coded decimal,
    /// also known as Device Version Number</summary>
    release_number: Word;
    /// <summary>Manufacturer String</summary>
    manufacturer_string: PWideChar;
    /// <summary>Product string</summary>
    product_string: PWideChar;
    /// <summary>Usage Page for this Device/Interface
    /// (Windows/Mac only).</summary>
    usage_page: Word;
    /// <summary>Usage for this Device/Interface
    /// (Windows/Mac only).</summary>
    usage: Word;
    /// <summary>The USB interface which this logical device
    /// represents.</summary>
    /// <remarks>Valid on both Linux implementations in all cases.
    /// Valid on the Windows implementation only if the device
    /// contains more than one interface.</remarks>
    interface_number: Integer;
    /// <summary>Additional information about the USB interface.
    /// Valid on libusb and Android implementations.</summary>
    interface_class: Integer;
    interface_subclass: Integer;
    interface_protocol: Integer;
    /// <summary>Pointer to the next device</summary>
    next: PSDL_hid_device_info;
  end;

  /// <summary>Type definition of the hint callback function.</summary>
  /// <param name="userdata">what was passed as `userdata` to SDL_AddHintCallback()</param>
  /// <param name="name">what was passed as `name` to SDL_AddHintCallback()</param>
  /// <param name="oldValue">the previous hint value</param>
  /// <param name="newValue">the new value hint is to be set to</param>
  SDL_HintCallback = procedure(userdata: Pointer; const name: PUTF8Char; const oldValue: PUTF8Char; const newValue: PUTF8Char); cdecl;

  /// <summary>The prototype for the log output callback function.</summary>
  /// <remarks>This function is called by SDL when there is new text to be logged.</remarks>
  /// <param name="userdata">what was passed as `userdata` to SDL_LogSetOutputFunction()</param>
  /// <param name="category">the category of the message</param>
  /// <param name="priority">the priority of the message</param>
  /// <param name="message">the message being output</param>
  SDL_LogOutputFunction = procedure(userdata: Pointer; category: Integer; priority: SDL_LogPriority; const &message: PUTF8Char); cdecl;
  PSDL_LogOutputFunction = ^SDL_LogOutputFunction;

  /// <summary>Individual button data.</summary>
  SDL_MessageBoxButtonData = record
    /// <summary>::SDL_MessageBoxButtonFlags</summary>
    flags: Uint32;
    /// <summary>User defined button id (value returned via SDL_ShowMessageBox)</summary>
    buttonid: Integer;
    /// <summary>The UTF-8 button text</summary>
    text: PUTF8Char;
  end;

  /// <summary>RGB value used in a message box color scheme</summary>
  SDL_MessageBoxColor = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
  end;

  /// <summary>A set of colors to use for message box dialogs</summary>
  SDL_MessageBoxColorScheme = record
    colors: array [0..4] of SDL_MessageBoxColor;
  end;

  /// <summary>MessageBox structure containing title, text, window, etc.</summary>
  SDL_MessageBoxData = record
    /// <summary>::SDL_MessageBoxFlags</summary>
    flags: Uint32;
    /// <summary>Parent window, can be NULL</summary>
    window: PSDL_Window;
    /// <summary>UTF-8 title</summary>
    title: PUTF8Char;
    /// <summary>UTF-8 message text</summary>
    &message: PUTF8Char;
    numbuttons: Integer;
    buttons: PSDL_MessageBoxButtonData;
    /// <summary>::SDL_MessageBoxColorScheme, can be NULL to use system settings</summary>
    colorScheme: PSDL_MessageBoxColorScheme;
  end;

  /// <summary>A handle to a CAMetalLayer-backed NSView (macOS) or UIView (iOS/tvOS).</summary>
  /// <remarks>This can be cast directly to an NSView or UIView.</remarks>
  SDL_MetalView = Pointer;

  /// <summary>Information on the capabilities of a render driver or context.</summary>
  SDL_RendererInfo = record
    /// <summary>The name of the renderer</summary>
    name: PUTF8Char;
    /// <summary>Supported ::SDL_RendererFlags</summary>
    flags: Uint32;
    /// <summary>The number of available texture formats</summary>
    num_texture_formats: Uint32;
    /// <summary>The available texture formats</summary>
    texture_formats: array [0..15] of Uint32;
    /// <summary>The maximum texture width</summary>
    max_texture_width: Integer;
    /// <summary>The maximum texture height</summary>
    max_texture_height: Integer;
  end;

  /// <summary>Vertex structure</summary>
  SDL_Vertex = record
    /// <summary>Vertex position, in SDL_Renderer coordinates</summary>
    position: SDL_FPoint;
    /// <summary>Vertex color</summary>
    color: SDL_Color;
    /// <summary>Normalized texture coordinates, if needed</summary>
    tex_coord: SDL_FPoint;
  end;

  PSDL_Renderer = Pointer;
  PPSDL_Renderer = ^PSDL_Renderer;
  PSDL_Texture = Pointer;
  PPSDL_Texture = ^PSDL_Texture;

  /// <summary>A union containing parameters for shaped windows.</summary>
  SDL_WindowShapeParams = record
    case Integer of
    /// <summary>A cutoff alpha value for binarization of the window shape's alpha channel.</summary>
      0: (binarizationCutoff: Uint8);
      1: (colorKey: SDL_Color);
  end;

  /// <summary>A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents.</summary>
  SDL_WindowShapeMode = record
    /// <summary>The mode of these window-shape parameters.</summary>
    mode: WindowShapeMode;
    /// <summary>Window-shape parameters.</summary>
    parameters: SDL_WindowShapeParams;
  end;

  SDL_WindowsMessageHook = procedure(userdata: Pointer; hWnd: Pointer; &message: Cardinal; wParam: Uint64; lParam: Sint64); cdecl;
  PIDirect3DDevice9 = Pointer;
  PPIDirect3DDevice9 = ^PIDirect3DDevice9;
  PID3D11Device = Pointer;
  PPID3D11Device = ^PID3D11Device;

  /// <summary>Function prototype for the timer callback function.</summary>
  /// <remarks>The callback function is passed the current timer interval and returns
  /// the next timer interval. If the returned value is the same as the one
  /// passed in, the periodic alarm continues, otherwise a new alarm is
  /// scheduled. If the callback returns 0, the periodic alarm is cancelled.</remarks>
  SDL_TimerCallback = function(interval: Uint32; param: Pointer): Uint32; cdecl;
  /// <summary>Definition of the timer ID type.</summary>
  SDL_TimerID = Integer;

  /// <summary>Information about the version of SDL in use.</summary>
  /// <remarks>Represents the library's version as three levels: major revision
  /// (increments with massive changes, additions, and enhancements),
  /// minor revision (increments with backwards-compatible changes to the
  /// major revision), and patchlevel (increments with fixes to the minor
  /// revision).
  /// SDL_VERSION
  /// 
  /// SDL_GetVersion</remarks>
  SDL_version = record
    /// <summary>major version</summary>
    major: Uint8;
    /// <summary>minor version</summary>
    minor: Uint8;
    /// <summary>update version</summary>
    patch: Uint8;
  end;

  SDL_Locale = record
    /// <summary>A language name, like "en" for English.</summary>
    language: PUTF8Char;
    /// <summary>A country, like "US" for America. Can be NULL.</summary>
    country: PUTF8Char;
  end;

  /// <summary>The internal format for an audio chunk</summary>
  Mix_Chunk = record
    allocated: Integer;
    abuf: PUint8;
    alen: Uint32;
    volume: Uint8;
  end;

  PMix_Music = Pointer;
  PPMix_Music = ^PMix_Music;

  /// <summary>This is the format of a special effect callback:</summary>
  /// <remarks>myeffect(int chan, void *stream, int len, void *udata);
  /// 
  /// (chan) is the channel number that your effect is affecting. (stream) is
  /// the buffer of data to work upon. (len) is the size of (stream), and
  /// (udata) is a user-defined bit of data, which you pass as the last arg of
  /// Mix_RegisterEffect(), and is passed back unmolested to your callback.
  /// Your effect changes the contents of (stream) based on whatever parameters
  /// are significant, or just leaves it be, if you prefer. You can do whatever
  /// you like to the buffer, though, and it will continue in its changed state
  /// down the mixing pipeline, through any other effect functions, then finally
  /// to be mixed with the rest of the channels and music for the final output
  /// stream.
  /// 
  /// DO NOT EVER call SDL_LockAudio() from your callback function!</remarks>
  Mix_EffectFunc_t = procedure(chan: Integer; stream: Pointer; len: Integer; udata: Pointer); cdecl;

  /// <summary>This is a callback that signifies that a channel has finished all its
  /// loops and has completed playback. This gets called if the buffer
  /// plays out normally, or if you call Mix_HaltChannel(), implicitly stop
  /// a channel via Mix_AllocateChannels(), or unregister a callback while
  /// it's still playing.</summary>
  /// <remarks>DO NOT EVER call SDL_LockAudio() from your callback function!</remarks>
  Mix_EffectDone_t = procedure(chan: Integer; udata: Pointer); cdecl;
  /// <summary>Information about the version of SDL in use.</summary>
  /// <remarks>Represents the library's version as three levels: major revision
  /// (increments with massive changes, additions, and enhancements),
  /// minor revision (increments with backwards-compatible changes to the
  /// major revision), and patchlevel (increments with fixes to the minor
  /// revision).
  /// SDL_VERSION
  /// 
  /// SDL_GetVersion</remarks>
  SDLNet_version = SDL_version;
  PSDLNet_version = ^SDLNet_version;

  /// <summary>********************************************************************</summary>
  /// <remarks>IPv4 hostname resolution API                                        
  /// 
  /// ********************************************************************</remarks>
  IPaddress = record
    host: Uint32;
    /// <summary>32-bit IPv4 host address</summary>
    port: Uint16;
  end;

  TCPsocket = Pointer;
  PTCPsocket = ^TCPsocket;
  UDPsocket = Pointer;
  PUDPsocket = ^UDPsocket;

  UDPpacket = record
    channel: Integer;
    /// <summary>The src/dst channel of the packet</summary>
    data: PUint8;
    /// <summary>The packet data</summary>
    len: Integer;
    /// <summary>The length of the packet data</summary>
    maxlen: Integer;
    /// <summary>The size of the data buffer</summary>
    status: Integer;
    /// <summary>packet status after sending</summary>
    address: IPaddress;
  end;

  SDLNet_SocketSet = Pointer;
  PSDLNet_SocketSet = ^SDLNet_SocketSet;

  /// <summary>Any network socket can be safely cast to this socket type</summary>
  _SDLNet_GenericSocket = record
    ready: Integer;
  end;

  SDLNet_GenericSocket = P_SDLNet_GenericSocket;
  PTTF_Font = Pointer;
  PPTTF_Font = ^PTTF_Font;
  Pplm_t = Pointer;
  PPplm_t = ^Pplm_t;
  Pplm_buffer_t = Pointer;
  PPplm_buffer_t = ^Pplm_buffer_t;
  Pplm_demux_t = Pointer;
  PPplm_demux_t = ^Pplm_demux_t;
  Pplm_video_t = Pointer;
  PPplm_video_t = ^Pplm_video_t;
  Pplm_audio_t = Pointer;
  PPplm_audio_t = ^Pplm_audio_t;

  plm_packet_t = record
    &type: Integer;
    pts: Double;
    length: NativeUInt;
    data: PUInt8;
  end;

  /// <summary>// Decoded Video Plane 
  /// // The byte length of the data is width * height. Note that different planes
  /// // have different sizes: the Luma plane (Y) is double the size of each of 
  /// // the two Chroma planes (Cr, Cb) - i.e. 4 times the byte length.
  /// // Also note that the size of the plane does *not* denote the size of the 
  /// // displayed frame. The sizes of planes are always rounded up to the nearest
  /// // macroblock (16px).</summary>
  plm_plane_t = record
    width: Cardinal;
    height: Cardinal;
    data: PUInt8;
  end;

  /// <summary>// Decoded Video Frame
  /// // width and height denote the desired display size of the frame. This may be
  /// // different from the internal size of the 3 planes.</summary>
  plm_frame_t = record
    time: Double;
    width: Cardinal;
    height: Cardinal;
    y: plm_plane_t;
    cr: plm_plane_t;
    cb: plm_plane_t;
  end;

  /// <summary>// Callback function type for decoded video frames used by the high-level
  /// // plm_* interface</summary>
  plm_video_decode_callback = procedure(self: Pplm_t; frame: Pplm_frame_t; user: Pointer); cdecl;

  plm_samples_t = record
    time: Double;
    count: Cardinal;
    interleaved: array [0..2303] of Single;
  end;

  /// <summary>// Callback function type for decoded audio samples used by the high-level
  /// // plm_* interface</summary>
  plm_audio_decode_callback = procedure(self: Pplm_t; samples: Pplm_samples_t; user: Pointer); cdecl;

  /// <summary>// Callback function for plm_buffer when it needs more data</summary>
  plm_buffer_load_callback = procedure(self: Pplm_buffer_t; user: Pointer); cdecl;
  nk_char = UTF8Char;
  nk_uchar = Byte;
  nk_byte = Byte;
  Pnk_byte = ^nk_byte;
  nk_short = Smallint;
  nk_ushort = Word;
  nk_int = Integer;
  nk_uint = Cardinal;
  Pnk_uint = ^nk_uint;
  nk_size = UInt64;
  Pnk_size = ^nk_size;
  nk_ptr = UInt64;
  nk_bool = Integer;
  Pnk_bool = ^nk_bool;
  nk_hash = nk_uint;
  nk_flags = nk_uint;
  Pnk_flags = ^nk_flags;
  nk_rune = nk_uint;
  Pnk_rune = ^nk_rune;
  _dummy_array0 = array [0..0] of UTF8Char;
  _dummy_array1 = array [0..0] of UTF8Char;
  _dummy_array2 = array [0..0] of UTF8Char;
  _dummy_array3 = array [0..0] of UTF8Char;
  _dummy_array4 = array [0..0] of UTF8Char;
  _dummy_array5 = array [0..0] of UTF8Char;
  _dummy_array6 = array [0..0] of UTF8Char;
  _dummy_array7 = array [0..0] of UTF8Char;
  _dummy_array8 = array [0..0] of UTF8Char;
  _dummy_array9 = array [0..0] of UTF8Char;

  nk_color = record
    r: nk_byte;
    g: nk_byte;
    b: nk_byte;
    a: nk_byte;
  end;

  nk_colorf = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  nk_vec2 = record
    x: Single;
    y: Single;
  end;

  nk_vec2i = record
    x: Smallint;
    y: Smallint;
  end;

  nk_rect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  nk_recti = record
    x: Smallint;
    y: Smallint;
    w: Smallint;
    h: Smallint;
  end;

  nk_glyph = array [0..3] of UTF8Char;

  nk_handle = record
    case Integer of
      0: (ptr: Pointer);
      1: (id: Integer);
  end;

  nk_image = record
    handle: nk_handle;
    w: nk_ushort;
    h: nk_ushort;
    region: array [0..3] of nk_ushort;
  end;

  nk_nine_slice = record
    img: nk_image;
    l: nk_ushort;
    t: nk_ushort;
    r: nk_ushort;
    b: nk_ushort;
  end;

  nk_cursor = record
    img: nk_image;
    size: nk_vec2;
    offset: nk_vec2;
  end;

  nk_scroll = record
    x: nk_uint;
    y: nk_uint;
  end;

  nk_plugin_alloc = function(p1: nk_handle; old: Pointer; p3: nk_size): Pointer; cdecl;

  nk_plugin_free = procedure(p1: nk_handle; old: Pointer); cdecl;

  nk_plugin_filter = function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

  nk_plugin_paste = procedure(p1: nk_handle; p2: Pnk_text_edit); cdecl;

  nk_plugin_copy = procedure(p1: nk_handle; const p2: PUTF8Char; len: Integer); cdecl;

  nk_allocator = record
    userdata: nk_handle;
    alloc: nk_plugin_alloc;
    free: nk_plugin_free;
  end;

  nk_draw_null_texture = record
    texture: nk_handle;
    uv: nk_vec2;
  end;

  nk_convert_config = record
    global_alpha: Single;
    line_AA: nk_anti_aliasing;
    shape_AA: nk_anti_aliasing;
    circle_segment_count: Cardinal;
    arc_segment_count: Cardinal;
    curve_segment_count: Cardinal;
    null: nk_draw_null_texture;
    vertex_layout: Pnk_draw_vertex_layout_element;
    vertex_size: nk_size;
    vertex_alignment: nk_size;
  end;

  nk_list_view = record
    &begin: Integer;
    &end: Integer;
    count: Integer;
    total_height: Integer;
    ctx: Pnk_context;
    scroll_pointer: Pnk_uint;
    scroll_value: nk_uint;
  end;

  nk_text_width_f = function(p1: nk_handle; h: Single; const p3: PUTF8Char; len: Integer): Single; cdecl;

  nk_query_font_glyph_f = procedure(handle: nk_handle; font_height: Single; glyph: Pnk_user_font_glyph; codepoint: nk_rune; next_codepoint: nk_rune); cdecl;

  nk_user_font = record
    userdata: nk_handle;
    height: Single;
    width: nk_text_width_f;
  end;

  nk_memory_status = record
    memory: Pointer;
    &type: Cardinal;
    size: nk_size;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
  end;

  nk_buffer_marker = record
    active: nk_bool;
    offset: nk_size;
  end;

  nk_memory = record
    ptr: Pointer;
    size: nk_size;
  end;

  nk_buffer = record
    marker: array [0..1] of nk_buffer_marker;
    pool: nk_allocator;
    &type: nk_allocation_type;
    memory: nk_memory;
    grow_factor: Single;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
    size: nk_size;
  end;

  nk_str = record
    buffer: nk_buffer;
    len: Integer;
  end;

  nk_clipboard = record
    userdata: nk_handle;
    paste: nk_plugin_paste;
    copy: nk_plugin_copy;
  end;

  nk_text_undo_record = record
    where: Integer;
    insert_length: Smallint;
    delete_length: Smallint;
    char_storage: Smallint;
  end;

  nk_text_undo_state = record
    undo_rec: array [0..98] of nk_text_undo_record;
    undo_char: array [0..998] of nk_rune;
    undo_point: Smallint;
    redo_point: Smallint;
    undo_char_point: Smallint;
    redo_char_point: Smallint;
  end;

  nk_text_edit = record
    clip: nk_clipboard;
    &string: nk_str;
    filter: nk_plugin_filter;
    scrollbar: nk_vec2;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    mode: Byte;
    cursor_at_end_of_line: Byte;
    initialized: Byte;
    has_preferred_x: Byte;
    single_line: Byte;
    active: Byte;
    padding1: Byte;
    preferred_x: Single;
    undo: nk_text_undo_state;
  end;

  nk_command = record
    &type: nk_command_type;
    next: nk_size;
  end;

  nk_command_scissor = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
  end;

  nk_command_line = record
    header: nk_command;
    line_thickness: Word;
    &begin: nk_vec2i;
    &end: nk_vec2i;
    color: nk_color;
  end;

  nk_command_curve = record
    header: nk_command;
    line_thickness: Word;
    &begin: nk_vec2i;
    &end: nk_vec2i;
    ctrl: array [0..1] of nk_vec2i;
    color: nk_color;
  end;

  nk_command_rect = record
    header: nk_command;
    rounding: Word;
    line_thickness: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  nk_command_rect_filled = record
    header: nk_command;
    rounding: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  nk_command_rect_multi_color = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    left: nk_color;
    top: nk_color;
    bottom: nk_color;
    right: nk_color;
  end;

  nk_command_triangle = record
    header: nk_command;
    line_thickness: Word;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  nk_command_triangle_filled = record
    header: nk_command;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  nk_command_circle = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    line_thickness: Word;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  nk_command_circle_filled = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  nk_command_arc = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    line_thickness: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  nk_command_arc_filled = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  nk_command_polygon = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  nk_command_polygon_filled = record
    header: nk_command;
    color: nk_color;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  nk_command_polyline = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  nk_command_image = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    img: nk_image;
    col: nk_color;
  end;

  nk_command_custom_callback = procedure(canvas: Pointer; x: Smallint; y: Smallint; w: Word; h: Word; callback_data: nk_handle); cdecl;

  nk_command_custom = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    callback_data: nk_handle;
    callback: nk_command_custom_callback;
  end;

  nk_command_text = record
    header: nk_command;
    font: Pnk_user_font;
    background: nk_color;
    foreground: nk_color;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    height: Single;
    length: Integer;
    &string: array [0..0] of UTF8Char;
  end;

  nk_command_buffer = record
    base: Pnk_buffer;
    clip: nk_rect;
    use_clipping: Integer;
    userdata: nk_handle;
    &begin: nk_size;
    &end: nk_size;
    last: nk_size;
  end;

  nk_mouse_button = record
    down: nk_bool;
    clicked: Cardinal;
    clicked_pos: nk_vec2;
  end;

  nk_mouse = record
    buttons: array [0..3] of nk_mouse_button;
    pos: nk_vec2;
    prev: nk_vec2;
    delta: nk_vec2;
    scroll_delta: nk_vec2;
    grab: Byte;
    grabbed: Byte;
    ungrab: Byte;
  end;

  nk_key = record
    down: nk_bool;
    clicked: Cardinal;
  end;

  nk_keyboard = record
    keys: array [0..29] of nk_key;
    text: array [0..15] of UTF8Char;
    text_len: Integer;
  end;

  nk_input = record
    keyboard: nk_keyboard;
    mouse: nk_mouse;
  end;

  nk_style_item_data = record
    case Integer of
      0: (color: nk_color);
      1: (image: nk_image);
      2: (slice: nk_nine_slice);
  end;

  nk_style_item = record
    &type: nk_style_item_type;
    data: nk_style_item_data;
  end;

  nk_style_text = record
    color: nk_color;
    padding: nk_vec2;
  end;

  nk_style_button = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    text_background: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_alignment: nk_flags;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    image_padding: nk_vec2;
    touch_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
  end;

  nk_style_toggle = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    spacing: Single;
    border: Single;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_selectable = record
    normal: nk_style_item;
    hover: nk_style_item;
    pressed: nk_style_item;
    normal_active: nk_style_item;
    hover_active: nk_style_item;
    pressed_active: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_pressed: nk_color;
    text_normal_active: nk_color;
    text_hover_active: nk_color;
    text_pressed_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    rounding: Single;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    image_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_slider = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    bar_normal: nk_color;
    bar_hover: nk_color;
    bar_active: nk_color;
    bar_filled: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    border: Single;
    rounding: Single;
    bar_height: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
    cursor_size: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_progress = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    rounding: Single;
    border: Single;
    cursor_border: Single;
    cursor_rounding: Single;
    padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_scrollbar = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    border: Single;
    rounding: Single;
    border_cursor: Single;
    rounding_cursor: Single;
    padding: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_edit = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    scrollbar: nk_style_scrollbar;
    cursor_normal: nk_color;
    cursor_hover: nk_color;
    cursor_text_normal: nk_color;
    cursor_text_hover: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    selected_normal: nk_color;
    selected_hover: nk_color;
    selected_text_normal: nk_color;
    selected_text_hover: nk_color;
    border: Single;
    rounding: Single;
    cursor_size: Single;
    scrollbar_size: nk_vec2;
    padding: nk_vec2;
    row_padding: Single;
  end;

  nk_style_property = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    sym_left: nk_symbol_type;
    sym_right: nk_symbol_type;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    edit: nk_style_edit;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  nk_style_chart = record
    background: nk_style_item;
    border_color: nk_color;
    selected_color: nk_color;
    color: nk_color;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
  end;

  nk_style_combo = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    symbol_normal: nk_color;
    symbol_hover: nk_color;
    symbol_active: nk_color;
    button: nk_style_button;
    sym_normal: nk_symbol_type;
    sym_hover: nk_symbol_type;
    sym_active: nk_symbol_type;
    border: Single;
    rounding: Single;
    content_padding: nk_vec2;
    button_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  nk_style_tab = record
    background: nk_style_item;
    border_color: nk_color;
    text: nk_color;
    tab_maximize_button: nk_style_button;
    tab_minimize_button: nk_style_button;
    node_maximize_button: nk_style_button;
    node_minimize_button: nk_style_button;
    sym_minimize: nk_symbol_type;
    sym_maximize: nk_symbol_type;
    border: Single;
    rounding: Single;
    indent: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
  end;

  nk_style_window_header = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    close_button: nk_style_button;
    minimize_button: nk_style_button;
    close_symbol: nk_symbol_type;
    minimize_symbol: nk_symbol_type;
    maximize_symbol: nk_symbol_type;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    align: nk_style_header_align;
    padding: nk_vec2;
    label_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  nk_style_window = record
    header: nk_style_window_header;
    fixed_background: nk_style_item;
    background: nk_color;
    border_color: nk_color;
    popup_border_color: nk_color;
    combo_border_color: nk_color;
    contextual_border_color: nk_color;
    menu_border_color: nk_color;
    group_border_color: nk_color;
    tooltip_border_color: nk_color;
    scaler: nk_style_item;
    border: Single;
    combo_border: Single;
    contextual_border: Single;
    menu_border: Single;
    group_border: Single;
    tooltip_border: Single;
    popup_border: Single;
    min_row_height_padding: Single;
    rounding: Single;
    spacing: nk_vec2;
    scrollbar_size: nk_vec2;
    min_size: nk_vec2;
    padding: nk_vec2;
    group_padding: nk_vec2;
    popup_padding: nk_vec2;
    combo_padding: nk_vec2;
    contextual_padding: nk_vec2;
    menu_padding: nk_vec2;
    tooltip_padding: nk_vec2;
  end;

  nk_style = record
    font: Pnk_user_font;
    cursors: array [0..6] of Pnk_cursor;
    cursor_active: Pnk_cursor;
    cursor_last: Pnk_cursor;
    cursor_visible: Integer;
    text: nk_style_text;
    button: nk_style_button;
    contextual_button: nk_style_button;
    menu_button: nk_style_button;
    option: nk_style_toggle;
    checkbox: nk_style_toggle;
    selectable: nk_style_selectable;
    slider: nk_style_slider;
    progress: nk_style_progress;
    &property: nk_style_property;
    edit: nk_style_edit;
    chart: nk_style_chart;
    scrollh: nk_style_scrollbar;
    scrollv: nk_style_scrollbar;
    tab: nk_style_tab;
    combo: nk_style_combo;
    window: nk_style_window;
  end;

  nk_chart_slot = record
    &type: nk_chart_type;
    color: nk_color;
    highlight: nk_color;
    min: Single;
    max: Single;
    range: Single;
    count: Integer;
    last: nk_vec2;
    index: Integer;
  end;

  nk_chart = record
    slot: Integer;
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    slots: array [0..3] of nk_chart_slot;
  end;

  nk_row_layout = record
    &type: nk_panel_row_layout_type;
    index: Integer;
    height: Single;
    min_height: Single;
    columns: Integer;
    ratio: PSingle;
    item_width: Single;
    item_height: Single;
    item_offset: Single;
    filled: Single;
    item: nk_rect;
    tree_depth: Integer;
    templates: array [0..15] of Single;
  end;

  nk_popup_buffer = record
    &begin: nk_size;
    parent: nk_size;
    last: nk_size;
    &end: nk_size;
    active: nk_bool;
  end;

  nk_menu_state = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    offset: nk_scroll;
  end;

  nk_panel = record
    &type: nk_panel_type;
    flags: nk_flags;
    bounds: nk_rect;
    offset_x: Pnk_uint;
    offset_y: Pnk_uint;
    at_x: Single;
    at_y: Single;
    max_x: Single;
    footer_height: Single;
    header_height: Single;
    border: Single;
    has_scrolling: Cardinal;
    clip: nk_rect;
    menu: nk_menu_state;
    row: nk_row_layout;
    chart: nk_chart;
    buffer: Pnk_command_buffer;
    parent: Pnk_panel;
  end;

  nk_popup_state = record
    win: Pnk_window;
    &type: nk_panel_type;
    buf: nk_popup_buffer;
    name: nk_hash;
    active: nk_bool;
    combo_count: Cardinal;
    con_count: Cardinal;
    con_old: Cardinal;
    active_con: Cardinal;
    header: nk_rect;
  end;

  nk_edit_state = record
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    active: Integer;
    prev: Integer;
    cursor: Integer;
    sel_start: Integer;
    sel_end: Integer;
    scrollbar: nk_scroll;
    mode: Byte;
    single_line: Byte;
  end;

  nk_property_state = record
    active: Integer;
    prev: Integer;
    buffer: array [0..63] of UTF8Char;
    length: Integer;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    state: Integer;
  end;

  nk_window = record
    seq: Cardinal;
    name: nk_hash;
    name_string: array [0..63] of UTF8Char;
    flags: nk_flags;
    bounds: nk_rect;
    scrollbar: nk_scroll;
    buffer: nk_command_buffer;
    layout: Pnk_panel;
    scrollbar_hiding_timer: Single;
    &property: nk_property_state;
    popup: nk_popup_state;
    edit: nk_edit_state;
    scrolled: Cardinal;
    tables: Pnk_table;
    table_count: Cardinal;
    next: Pnk_window;
    prev: Pnk_window;
    parent: Pnk_window;
  end;

  nk_config_stack_style_item_element = record
    address: Pnk_style_item;
    old_value: nk_style_item;
  end;

  nk_config_stack_float_element = record
    address: PSingle;
    old_value: Single;
  end;

  nk_config_stack_vec2_element = record
    address: Pnk_vec2;
    old_value: nk_vec2;
  end;

  nk_config_stack_flags_element = record
    address: Pnk_flags;
    old_value: nk_flags;
  end;

  nk_config_stack_color_element = record
    address: Pnk_color;
    old_value: nk_color;
  end;

  nk_config_stack_user_font_element = record
    address: PPnk_user_font;
    old_value: Pnk_user_font;
  end;

  nk_config_stack_button_behavior_element = record
    address: Pnk_button_behavior;
    old_value: nk_button_behavior;
  end;

  nk_config_stack_style_item = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_style_item_element;
  end;

  nk_config_stack_float = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_float_element;
  end;

  nk_config_stack_vec2 = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_vec2_element;
  end;

  nk_config_stack_flags = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_flags_element;
  end;

  nk_config_stack_color = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_color_element;
  end;

  nk_config_stack_user_font = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_user_font_element;
  end;

  nk_config_stack_button_behavior = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_button_behavior_element;
  end;

  nk_configuration_stacks = record
    style_items: nk_config_stack_style_item;
    floats: nk_config_stack_float;
    vectors: nk_config_stack_vec2;
    flags: nk_config_stack_flags;
    colors: nk_config_stack_color;
    fonts: nk_config_stack_user_font;
    button_behaviors: nk_config_stack_button_behavior;
  end;

  nk_table = record
    seq: Cardinal;
    size: Cardinal;
    keys: array [0..58] of nk_hash;
    values: array [0..58] of nk_uint;
    next: Pnk_table;
    prev: Pnk_table;
  end;

  nk_page_data = record
    case Integer of
      0: (tbl: nk_table);
      1: (pan: nk_panel);
      2: (win: nk_window);
  end;

  nk_page_element = record
    data: nk_page_data;
    next: Pnk_page_element;
    prev: Pnk_page_element;
  end;

  nk_page = record
    size: Cardinal;
    next: Pnk_page;
    win: array [0..0] of nk_page_element;
  end;

  nk_pool = record
    alloc: nk_allocator;
    &type: nk_allocation_type;
    page_count: Cardinal;
    pages: Pnk_page;
    freelist: Pnk_page_element;
    capacity: Cardinal;
    size: nk_size;
    cap: nk_size;
  end;

  nk_context = record
    input: nk_input;
    style: nk_style;
    memory: nk_buffer;
    clip: nk_clipboard;
    last_widget_state: nk_flags;
    button_behavior: nk_button_behavior;
    stacks: nk_configuration_stacks;
    delta_time_seconds: Single;
    text_edit: nk_text_edit;
    overlay: nk_command_buffer;
    build: Integer;
    use_pool: Integer;
    pool: nk_pool;
    &begin: Pnk_window;
    &end: Pnk_window;
    active: Pnk_window;
    current: Pnk_window;
    freelist: Pnk_page_element;
    count: Cardinal;
    seq: Cardinal;
  end;

type
  SDL_qsort_compare = function(const p1: Pointer; const p2: Pointer): Integer; cdecl;
  SDL_CreateThreadWithStackSize_fn = function(p1: Pointer): Integer; cdecl;
  SDL_TLSSet_destructor = procedure(p1: Pointer); cdecl;

  Mix_SetPostMix_mix_func = procedure(udata: Pointer; stream: PUint8; len: Integer); cdecl;
  Mix_HookMusic_mix_func = procedure(udata: Pointer; stream: PUint8; len: Integer); cdecl;
  Mix_HookMusicFinished_music_finished = procedure(); cdecl;
  Mix_ChannelFinished_channel_finished = procedure(channel: Integer); cdecl;
  Mix_EachSoundFont_function = function(const p1: PUTF8Char; p2: Pointer): Integer; cdecl;

  nk_plot_function_value_getter = function(user: Pointer; index: Integer): Single; cdecl;
  nk_combo_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;
  nk_combobox_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

/// <summary>Get the name of the platform.</summary>
/// <remarks>Here are the names returned for some (but not all) supported platforms:
/// 
/// - "Windows"
/// - "Mac OS X"
/// - "Linux"
/// - "iOS"
/// - "Android"</remarks>
/// <returns>the name of the platform. If the correct platform name is not
///   available, returns a string beginning with the text "Unknown".</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>

var
SDL_GetPlatform: function(): PUTF8Char; cdecl;

SDL_malloc: function(size: NativeUInt): Pointer; cdecl;

SDL_calloc: function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;

SDL_realloc: function(mem: Pointer; size: NativeUInt): Pointer; cdecl;

SDL_free: procedure(mem: Pointer); cdecl;

/// <summary>Get the current set of SDL memory functions</summary>
/// <remarks>This function is available since SDL 2.0.7.</remarks>
SDL_GetMemoryFunctions: procedure(malloc_func: PSDL_malloc_func; calloc_func: PSDL_calloc_func; realloc_func: PSDL_realloc_func; free_func: PSDL_free_func); cdecl;

/// <summary>Replace SDL's memory allocation functions with a custom set</summary>
/// <remarks>This function is available since SDL 2.0.7.</remarks>
SDL_SetMemoryFunctions: function(malloc_func: SDL_malloc_func; calloc_func: SDL_calloc_func; realloc_func: SDL_realloc_func; free_func: SDL_free_func): Integer; cdecl;

/// <summary>Get the number of outstanding (unfreed) allocations</summary>
/// <remarks>This function is available since SDL 2.0.7.</remarks>
SDL_GetNumAllocations: function(): Integer; cdecl;

SDL_getenv: function(const name: PUTF8Char): PUTF8Char; cdecl;

SDL_setenv: function(const name: PUTF8Char; const value: PUTF8Char; overwrite: Integer): Integer; cdecl;

SDL_qsort: procedure(base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_qsort_compare); cdecl;

SDL_abs: function(x: Integer): Integer; cdecl;

SDL_isalpha: function(x: Integer): Integer; cdecl;

SDL_isalnum: function(x: Integer): Integer; cdecl;

SDL_isblank: function(x: Integer): Integer; cdecl;

SDL_iscntrl: function(x: Integer): Integer; cdecl;

SDL_isdigit: function(x: Integer): Integer; cdecl;

SDL_isxdigit: function(x: Integer): Integer; cdecl;

SDL_ispunct: function(x: Integer): Integer; cdecl;

SDL_isspace: function(x: Integer): Integer; cdecl;

SDL_isupper: function(x: Integer): Integer; cdecl;

SDL_islower: function(x: Integer): Integer; cdecl;

SDL_isprint: function(x: Integer): Integer; cdecl;

SDL_isgraph: function(x: Integer): Integer; cdecl;

SDL_toupper: function(x: Integer): Integer; cdecl;

SDL_tolower: function(x: Integer): Integer; cdecl;

SDL_crc32: function(crc: Uint32; const data: Pointer; len: NativeUInt): Uint32; cdecl;

SDL_memset: function(dst: Pointer; c: Integer; len: NativeUInt): Pointer; cdecl;

SDL_memcpy: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;

SDL_memmove: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;

SDL_memcmp: function(const s1: Pointer; const s2: Pointer; len: NativeUInt): Integer; cdecl;

SDL_wcslen: function(const wstr: PWideChar): NativeUInt; cdecl;

SDL_wcslcpy: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;

SDL_wcslcat: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;

SDL_wcsdup: function(const wstr: PWideChar): PWideChar; cdecl;

SDL_wcsstr: function(const haystack: PWideChar; const needle: PWideChar): PWideChar; cdecl;

SDL_wcscmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;

SDL_wcsncmp: function(const str1: PWideChar; const str2: PWideChar; maxlen: NativeUInt): Integer; cdecl;

SDL_wcscasecmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;

SDL_wcsncasecmp: function(const str1: PWideChar; const str2: PWideChar; len: NativeUInt): Integer; cdecl;

SDL_strlen: function(const str: PUTF8Char): NativeUInt; cdecl;

SDL_strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;

SDL_utf8strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; dst_bytes: NativeUInt): NativeUInt; cdecl;

SDL_strlcat: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;

SDL_strdup: function(const str: PUTF8Char): PUTF8Char; cdecl;

SDL_strrev: function(str: PUTF8Char): PUTF8Char; cdecl;

SDL_strupr: function(str: PUTF8Char): PUTF8Char; cdecl;

SDL_strlwr: function(str: PUTF8Char): PUTF8Char; cdecl;

SDL_strchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;

SDL_strrchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;

SDL_strstr: function(const haystack: PUTF8Char; const needle: PUTF8Char): PUTF8Char; cdecl;

SDL_strtokr: function(s1: PUTF8Char; const s2: PUTF8Char; saveptr: PPUTF8Char): PUTF8Char; cdecl;

SDL_utf8strlen: function(const str: PUTF8Char): NativeUInt; cdecl;

SDL_itoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_uitoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_ltoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_ultoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_lltoa: function(value: Sint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_ulltoa: function(value: Uint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;

SDL_atoi: function(const str: PUTF8Char): Integer; cdecl;

SDL_atof: function(const str: PUTF8Char): Double; cdecl;

SDL_strtol: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Integer; cdecl;

SDL_strtoul: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Cardinal; cdecl;

SDL_strtoll: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Sint64; cdecl;

SDL_strtoull: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Uint64; cdecl;

SDL_strtod: function(const str: PUTF8Char; endp: PPUTF8Char): Double; cdecl;

SDL_strcmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;

SDL_strncmp: function(const str1: PUTF8Char; const str2: PUTF8Char; maxlen: NativeUInt): Integer; cdecl;

SDL_strcasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;

SDL_strncasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char; len: NativeUInt): Integer; cdecl;

SDL_sscanf: function(const text: PUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;

SDL_vsscanf: function(const text: PUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;

SDL_snprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char): Integer varargs; cdecl;

SDL_vsnprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;

SDL_asprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;

SDL_vasprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;

/// <summary>Use this function to compute arc cosine of `x`.</summary>
/// <remarks>The definition of `y = acos(x)` is `x = cos(y)`.
/// 
/// Domain: `-1 <= x <= 1`
/// 
/// Range: `0 <= y <= Pi`</remarks>
/// <param name="x">floating point value, in radians.</param>
/// <returns>arc cosine of `x`.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.</remarks>
SDL_acos: function(x: Double): Double; cdecl;

SDL_acosf: function(x: Single): Single; cdecl;

SDL_asin: function(x: Double): Double; cdecl;

SDL_asinf: function(x: Single): Single; cdecl;

SDL_atan: function(x: Double): Double; cdecl;

SDL_atanf: function(x: Single): Single; cdecl;

SDL_atan2: function(y: Double; x: Double): Double; cdecl;

SDL_atan2f: function(y: Single; x: Single): Single; cdecl;

SDL_ceil: function(x: Double): Double; cdecl;

SDL_ceilf: function(x: Single): Single; cdecl;

SDL_copysign: function(x: Double; y: Double): Double; cdecl;

SDL_copysignf: function(x: Single; y: Single): Single; cdecl;

SDL_cos: function(x: Double): Double; cdecl;

SDL_cosf: function(x: Single): Single; cdecl;

SDL_exp: function(x: Double): Double; cdecl;

SDL_expf: function(x: Single): Single; cdecl;

SDL_fabs: function(x: Double): Double; cdecl;

SDL_fabsf: function(x: Single): Single; cdecl;

SDL_floor: function(x: Double): Double; cdecl;

SDL_floorf: function(x: Single): Single; cdecl;

SDL_trunc: function(x: Double): Double; cdecl;

SDL_truncf: function(x: Single): Single; cdecl;

SDL_fmod: function(x: Double; y: Double): Double; cdecl;

SDL_fmodf: function(x: Single; y: Single): Single; cdecl;

SDL_log: function(x: Double): Double; cdecl;

SDL_logf: function(x: Single): Single; cdecl;

SDL_log10: function(x: Double): Double; cdecl;

SDL_log10f: function(x: Single): Single; cdecl;

SDL_pow: function(x: Double; y: Double): Double; cdecl;

SDL_powf: function(x: Single; y: Single): Single; cdecl;

SDL_round: function(x: Double): Double; cdecl;

SDL_roundf: function(x: Single): Single; cdecl;

SDL_lround: function(x: Double): Integer; cdecl;

SDL_lroundf: function(x: Single): Integer; cdecl;

SDL_scalbn: function(x: Double; n: Integer): Double; cdecl;

SDL_scalbnf: function(x: Single; n: Integer): Single; cdecl;

SDL_sin: function(x: Double): Double; cdecl;

SDL_sinf: function(x: Single): Single; cdecl;

SDL_sqrt: function(x: Double): Double; cdecl;

SDL_sqrtf: function(x: Single): Single; cdecl;

SDL_tan: function(x: Double): Double; cdecl;

SDL_tanf: function(x: Single): Single; cdecl;

SDL_iconv_open: function(const tocode: PUTF8Char; const fromcode: PUTF8Char): SDL_iconv_t; cdecl;

SDL_iconv_close: function(cd: SDL_iconv_t): Integer; cdecl;

SDL_iconv: function(cd: SDL_iconv_t; inbuf: PPUTF8Char; inbytesleft: PNativeUInt; outbuf: PPUTF8Char; outbytesleft: PNativeUInt): NativeUInt; cdecl;

/// <summary>This function converts a string between encodings in one pass, returning a
/// string that must be freed with SDL_free() or NULL on error.</summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_iconv_string: function(const tocode: PUTF8Char; const fromcode: PUTF8Char; const inbuf: PUTF8Char; inbytesleft: NativeUInt): PUTF8Char; cdecl;

SDL_main: function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;

/// <summary>Circumvent failure of SDL_Init() when not using SDL_main() as an entry
/// point.</summary>
/// <remarks>This function is defined in SDL_main.h, along with the preprocessor rule to
/// redefine main() as SDL_main(). Thus to ensure that your main() function
/// will not be changed it is necessary to define SDL_MAIN_HANDLED before
/// including SDL.h.
/// This function is available since SDL 2.0.0.
/// SDL_Init</remarks>
SDL_SetMainReady: procedure(); cdecl;

/// <summary>Register a win32 window class for SDL's use.</summary>
/// <remarks>This can be called to set the application window class at startup. It is
/// safe to call this multiple times, as long as every call is eventually
/// paired with a call to SDL_UnregisterApp, but a second registration attempt
/// while a previous registration is still active will be ignored, other than
/// to increment a counter.
/// 
/// Most applications do not need to, and should not, call this directly; SDL
/// will call it when initializing the video subsystem.</remarks>
/// <param name="name">the window class name, in UTF-8 encoding. If NULL, SDL
///   currently uses "SDL_app" but this isn't guaranteed.</param>
/// <param name="style">the value to use in WNDCLASSEX::style. If `name` is NULL, SDL
///   currently uses `(CS_BYTEALIGNCLIENT | CS_OWNDC)` regardless of
///   what is specified here.</param>
/// <param name="hInst">the HINSTANCE to use in WNDCLASSEX::hInstance. If zero, SDL
///   will use `GetModuleHandle(NULL)` instead.</param>
/// <returns>0 on success, -1 on error. SDL_GetError() may have details.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.</remarks>
SDL_RegisterApp: function(const name: PUTF8Char; style: Uint32; hInst: Pointer): Integer; cdecl;

/// <summary>Deregister the win32 window class from an SDL_RegisterApp call.</summary>
/// <remarks>This can be called to undo the effects of SDL_RegisterApp.
/// 
/// Most applications do not need to, and should not, call this directly; SDL
/// will call it when deinitializing the video subsystem.
/// 
/// It is safe to call this multiple times, as long as every call is eventually
/// paired with a prior call to SDL_RegisterApp. The window class will only be
/// deregistered when the registration counter in SDL_RegisterApp decrements to
/// zero through calls to this function.
/// This function is available since SDL 2.0.2.</remarks>
SDL_UnregisterApp: procedure(); cdecl;

__debugbreak: procedure(); cdecl;

SDL_ReportAssertion: function(p1: PSDL_AssertData; const p2: PUTF8Char; const p3: PUTF8Char; p4: Integer): SDL_AssertState; cdecl;

/// <summary>Set an application-defined assertion handler.</summary>
/// <remarks>This function allows an application to show its own assertion UI and/or
/// force the response to an assertion failure. If the application doesn't
/// provide this, SDL will try to do the right thing, popping up a
/// system-specific GUI dialog, and probably minimizing any fullscreen windows.
/// 
/// This callback may fire from any thread, but it runs wrapped in a mutex, so
/// it will only fire from one thread at a time.
/// 
/// This callback is NOT reset to SDL's internal handler upon SDL_Quit()!</remarks>
/// <param name="handler">the SDL_AssertionHandler function to call when an assertion
///   fails or NULL for the default handler</param>
/// <param name="userdata">a pointer that is passed to `handler`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetAssertionHandler</remarks>
SDL_SetAssertionHandler: procedure(handler: SDL_AssertionHandler; userdata: Pointer); cdecl;

/// <summary>Get the default assertion handler.</summary>
/// <remarks>This returns the function pointer that is called by default when an
/// assertion is triggered. This is an internal function provided by SDL, that
/// is used for assertions when SDL_SetAssertionHandler() hasn't been used to
/// provide a different function.</remarks>
/// <returns>the default SDL_AssertionHandler that is called when an assert
///   triggers.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_GetAssertionHandler</remarks>
SDL_GetDefaultAssertionHandler: function(): SDL_AssertionHandler; cdecl;

/// <summary>Get the current assertion handler.</summary>
/// <remarks>This returns the function pointer that is called when an assertion is
/// triggered. This is either the value last passed to
/// SDL_SetAssertionHandler(), or if no application-specified function is set,
/// is equivalent to calling SDL_GetDefaultAssertionHandler().
/// 
/// The parameter `puserdata` is a pointer to a void*, which will store the
/// "userdata" pointer that was passed to SDL_SetAssertionHandler(). This value
/// will always be NULL for the default handler. If you don't care about this
/// data, it is safe to pass a NULL pointer to this function to ignore it.</remarks>
/// <param name="puserdata">pointer which is filled with the "userdata" pointer that
///   was passed to SDL_SetAssertionHandler()</param>
/// <returns>the SDL_AssertionHandler that is called when an assert triggers.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_SetAssertionHandler</remarks>
SDL_GetAssertionHandler: function(puserdata: PPointer): SDL_AssertionHandler; cdecl;

/// <summary>Get a list of all assertion failures.</summary>
/// <remarks>This function gets all assertions triggered since the last call to
/// SDL_ResetAssertionReport(), or the start of the program.
/// 
/// The proper way to examine this data looks something like this:
/// 
/// ```c
/// const SDL_AssertData *item = SDL_GetAssertionReport();
/// while (item) {
/// printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\n",
/// item->condition, item->function, item->filename,
/// item->linenum, item->trigger_count,
/// item->always_ignore ? "yes" : "no");
/// item = item->next;
/// }
/// ```</remarks>
/// <returns>a list of all failed assertions or NULL if the list is empty. This
///   memory should not be modified or freed by the application.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ResetAssertionReport</remarks>
SDL_GetAssertionReport: function(): PSDL_AssertData; cdecl;

/// <summary>Clear the list of all assertion failures.</summary>
/// <remarks>This function will clear the list of all assertions triggered up to that
/// point. Immediately following this call, SDL_GetAssertionReport will return
/// no items. In addition, any previously-triggered assertions will be reset to
/// a trigger_count of zero, and their always_ignore state will be false.
/// This function is available since SDL 2.0.0.
/// SDL_GetAssertionReport</remarks>
SDL_ResetAssertionReport: procedure(); cdecl;

/// <summary>Try to lock a spin lock by setting it to a non-zero value.</summary>
/// <remarks>***Please note that spinlocks are dangerous if you don't know what you're
/// doing. Please be careful using any sort of spinlock!***</remarks>
/// <param name="lock">a pointer to a lock variable</param>
/// <returns>SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already
///   held.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AtomicLock
/// 
/// SDL_AtomicUnlock</remarks>
SDL_AtomicTryLock: function(lock: PSDL_SpinLock): SDL_bool; cdecl;

/// <summary>Lock a spin lock by setting it to a non-zero value.</summary>
/// <remarks>***Please note that spinlocks are dangerous if you don't know what you're
/// doing. Please be careful using any sort of spinlock!***</remarks>
/// <param name="lock">a pointer to a lock variable</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AtomicTryLock
/// 
/// SDL_AtomicUnlock</remarks>
SDL_AtomicLock: procedure(lock: PSDL_SpinLock); cdecl;

/// <summary>Unlock a spin lock by setting it to 0.</summary>
/// <remarks>Always returns immediately.
/// 
/// ***Please note that spinlocks are dangerous if you don't know what you're
/// doing. Please be careful using any sort of spinlock!***</remarks>
/// <param name="lock">a pointer to a lock variable</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AtomicLock
/// 
/// SDL_AtomicTryLock</remarks>
SDL_AtomicUnlock: procedure(lock: PSDL_SpinLock); cdecl;

/// <summary>Memory barriers are designed to prevent reads and writes from being
/// reordered by the compiler and being seen out of order on multi-core CPUs.</summary>
/// <remarks>A typical pattern would be for thread A to write some data and a flag, and
/// for thread B to read the flag and get the data. In this case you would
/// insert a release barrier between writing the data and the flag,
/// guaranteeing that the data write completes no later than the flag is
/// written, and you would insert an acquire barrier between reading the flag
/// and reading the data, to ensure that all the reads associated with the flag
/// have completed.
/// 
/// In this pattern you should always see a release barrier paired with an
/// acquire barrier and you should gate the data reads/writes with a single
/// flag variable.
/// 
/// For more information on these semantics, take a look at the blog post:
/// http://preshing.com/20120913/acquire-and-release-semantics
/// This function is available since SDL 2.0.6.</remarks>
SDL_MemoryBarrierReleaseFunction: procedure(); cdecl;

SDL_MemoryBarrierAcquireFunction: procedure(); cdecl;

/// <summary>Set an atomic variable to a new value if it is currently an old value.</summary>
/// <remarks>***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to an SDL_atomic_t variable to be modified</param>
/// <param name="oldval">the old value</param>
/// <param name="newval">the new value</param>
/// <returns>SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AtomicCASPtr
/// 
/// SDL_AtomicGet
/// 
/// SDL_AtomicSet</remarks>
SDL_AtomicCAS: function(a: PSDL_atomic_t; oldval: Integer; newval: Integer): SDL_bool; cdecl;

/// <summary>Set an atomic variable to a value.</summary>
/// <remarks>This function also acts as a full memory barrier.
/// 
/// ***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to an SDL_atomic_t variable to be modified</param>
/// <param name="v">the desired value</param>
/// <returns>the previous value of the atomic variable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_AtomicGet</remarks>
SDL_AtomicSet: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;

/// <summary>Get the value of an atomic variable.</summary>
/// <remarks>***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to an SDL_atomic_t variable</param>
/// <returns>the current value of an atomic variable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_AtomicSet</remarks>
SDL_AtomicGet: function(a: PSDL_atomic_t): Integer; cdecl;

/// <summary>Add to an atomic variable.</summary>
/// <remarks>This function also acts as a full memory barrier.
/// 
/// ***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to an SDL_atomic_t variable to be modified</param>
/// <param name="v">the desired value to add</param>
/// <returns>the previous value of the atomic variable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_AtomicDecRef
/// 
/// SDL_AtomicIncRef</remarks>
SDL_AtomicAdd: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;

/// <summary>Set a pointer to a new value if it is currently an old value.</summary>
/// <remarks>***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to a pointer</param>
/// <param name="oldval">the old pointer value</param>
/// <param name="newval">the new pointer value</param>
/// <returns>SDL_TRUE if the pointer was set, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AtomicCAS
/// 
/// SDL_AtomicGetPtr
/// 
/// SDL_AtomicSetPtr</remarks>
SDL_AtomicCASPtr: function(a: PPointer; oldval: Pointer; newval: Pointer): SDL_bool; cdecl;

/// <summary>Set a pointer to a value atomically.</summary>
/// <remarks>***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to a pointer</param>
/// <param name="v">the desired pointer value</param>
/// <returns>the previous value of the pointer.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_AtomicCASPtr
/// 
/// SDL_AtomicGetPtr</remarks>
SDL_AtomicSetPtr: function(a: PPointer; v: Pointer): Pointer; cdecl;

/// <summary>Get the value of a pointer atomically.</summary>
/// <remarks>***Note: If you don't know what this function is for, you shouldn't use
/// it!***</remarks>
/// <param name="a">a pointer to a pointer</param>
/// <returns>the current value of a pointer.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_AtomicCASPtr
/// 
/// SDL_AtomicSetPtr</remarks>
SDL_AtomicGetPtr: function(a: PPointer): Pointer; cdecl;

/// <summary>Set the SDL error message for the current thread.</summary>
/// <remarks>Calling this function will replace any previous error message that was set.
/// 
/// This function always returns -1, since SDL frequently uses -1 to signify an
/// failing result, leading to this idiom:
/// 
/// ```c
/// if (error_code) {
/// return SDL_SetError("This operation has failed: %d", error_code);
/// }
/// ```</remarks>
/// <param name="fmt">a printf()-style message format string</param>
/// <param name="...">additional parameters matching % tokens in the `fmt` string, if
///   any</param>
/// <returns>always -1.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ClearError
/// 
/// SDL_GetError</remarks>
SDL_SetError: function(const fmt: PUTF8Char): Integer varargs; cdecl;

/// <summary>Retrieve a message about the last error that occurred on the current
/// thread.</summary>
/// <remarks>It is possible for multiple errors to occur before calling SDL_GetError().
/// Only the last error is returned.
/// 
/// The message is only applicable when an SDL function has signaled an error.
/// You must check the return values of SDL function calls to determine when to
/// appropriately call SDL_GetError(). You should *not* use the results of
/// SDL_GetError() to decide if an error has occurred! Sometimes SDL will set
/// an error string even when reporting success.
/// 
/// SDL will *not* clear the error string for successful API calls. You *must*
/// check return values for failure cases before you can assume the error
/// string applies.
/// 
/// Error strings are set per-thread, so an error set in a different thread
/// will not interfere with the current thread's operation.
/// 
/// The returned string is internally allocated and must not be freed by the
/// application.</remarks>
/// <returns>a message with information about the specific error that occurred,
///   or an empty string if there hasn't been an error message set since
///   the last call to SDL_ClearError(). The message is only applicable
///   when an SDL function has signaled an error. You must check the
///   return values of SDL function calls to determine when to
///   appropriately call SDL_GetError().</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ClearError
/// 
/// SDL_SetError</remarks>
SDL_GetError: function(): PUTF8Char; cdecl;

/// <summary>Get the last error message that was set for the current thread.</summary>
/// <remarks>This allows the caller to copy the error string into a provided buffer, but
/// otherwise operates exactly the same as SDL_GetError().</remarks>
/// <param name="errstr">A buffer to fill with the last error message that was set for
///   the current thread</param>
/// <param name="maxlen">The size of the buffer pointed to by the errstr parameter</param>
/// <returns>the pointer passed in as the `errstr` parameter.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_GetError</remarks>
SDL_GetErrorMsg: function(errstr: PUTF8Char; maxlen: Integer): PUTF8Char; cdecl;

/// <summary>Clear any previous error message for this thread.</summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetError
/// 
/// SDL_SetError</remarks>
SDL_ClearError: procedure(); cdecl;

SDL_Error: function(code: SDL_errorcode): Integer; cdecl;

/// <summary>Create a new mutex.</summary>
/// <remarks>All newly-created mutexes begin in the _unlocked_ state.
/// 
/// Calls to SDL_LockMutex() will not return while the mutex is locked by
/// another thread. See SDL_TryLockMutex() to attempt to lock without blocking.
/// 
/// SDL mutexes are reentrant.</remarks>
/// <returns>the initialized and unlocked mutex or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DestroyMutex
/// 
/// SDL_LockMutex
/// 
/// SDL_TryLockMutex
/// 
/// SDL_UnlockMutex</remarks>
SDL_CreateMutex: function(): PSDL_mutex; cdecl;

/// <summary>Lock the mutex.</summary>
/// <remarks>This will block until the mutex is available, which is to say it is in the
/// unlocked state and the OS has chosen the caller as the next thread to lock
/// it. Of all threads waiting to lock the mutex, only one may do so at a time.
/// 
/// It is legal for the owning thread to lock an already-locked mutex. It must
/// unlock it the same number of times before it is actually made available for
/// other threads in the system (this is known as a "recursive mutex").</remarks>
/// <param name="mutex">the mutex to lock</param>
/// <returns>0, or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_LockMutex: function(mutex: PSDL_mutex): Integer; cdecl;

/// <summary>Try to lock a mutex without blocking.</summary>
/// <remarks>This works just like SDL_LockMutex(), but if the mutex is not available,
/// this function returns `SDL_MUTEX_TIMEOUT` immediately.
/// 
/// This technique is useful if you need exclusive access to a resource but
/// don't want to wait for it, and will return to it to try again later.</remarks>
/// <param name="mutex">the mutex to try to lock</param>
/// <returns>0, `SDL_MUTEX_TIMEDOUT`, or -1 on error; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateMutex
/// 
/// SDL_DestroyMutex
/// 
/// SDL_LockMutex
/// 
/// SDL_UnlockMutex</remarks>
SDL_TryLockMutex: function(mutex: PSDL_mutex): Integer; cdecl;

/// <summary>Unlock the mutex.</summary>
/// <remarks>It is legal for the owning thread to lock an already-locked mutex. It must
/// unlock it the same number of times before it is actually made available for
/// other threads in the system (this is known as a "recursive mutex").
/// 
/// It is an error to unlock a mutex that has not been locked by the current
/// thread, and doing so results in undefined behavior.
/// 
/// It is also an error to unlock a mutex that isn't locked at all.</remarks>
/// <param name="mutex">the mutex to unlock.</param>
/// <returns>0, or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_UnlockMutex: function(mutex: PSDL_mutex): Integer; cdecl;

/// <summary>Destroy a mutex created with SDL_CreateMutex().</summary>
/// <remarks>This function must be called on any mutex that is no longer needed. Failure
/// to destroy a mutex will result in a system memory or resource leak. While
/// it is safe to destroy a mutex that is _unlocked_, it is not safe to attempt
/// to destroy a locked mutex, and may result in undefined behavior depending
/// on the platform.</remarks>
/// <param name="mutex">the mutex to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateMutex
/// 
/// SDL_LockMutex
/// 
/// SDL_TryLockMutex
/// 
/// SDL_UnlockMutex</remarks>
SDL_DestroyMutex: procedure(mutex: PSDL_mutex); cdecl;

/// <summary>Create a semaphore.</summary>
/// <remarks>This function creates a new semaphore and initializes it with the value
/// `initial_value`. Each wait operation on the semaphore will atomically
/// decrement the semaphore value and potentially block if the semaphore value
/// is 0. Each post operation will atomically increment the semaphore value and
/// wake waiting threads and allow them to retry the wait operation.</remarks>
/// <param name="initial_value">the starting value of the semaphore</param>
/// <returns>a new semaphore or NULL on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DestroySemaphore
/// 
/// SDL_SemPost
/// 
/// SDL_SemTryWait
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait
/// 
/// SDL_SemWaitTimeout</remarks>
SDL_CreateSemaphore: function(initial_value: Uint32): PSDL_sem; cdecl;

/// <summary>Destroy a semaphore.</summary>
/// <remarks>It is not safe to destroy a semaphore if there are threads currently
/// waiting on it.</remarks>
/// <param name="sem">the semaphore to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore
/// 
/// SDL_SemPost
/// 
/// SDL_SemTryWait
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait
/// 
/// SDL_SemWaitTimeout</remarks>
SDL_DestroySemaphore: procedure(sem: PSDL_sem); cdecl;

/// <summary>Wait until a semaphore has a positive value and then decrements it.</summary>
/// <remarks>This function suspends the calling thread until either the semaphore
/// pointed to by `sem` has a positive value or the call is interrupted by a
/// signal or error. If the call is successful it will atomically decrement the
/// semaphore value.
/// 
/// This function is the equivalent of calling SDL_SemWaitTimeout() with a time
/// length of `SDL_MUTEX_MAXWAIT`.</remarks>
/// <param name="sem">the semaphore wait on</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore
/// 
/// SDL_DestroySemaphore
/// 
/// SDL_SemPost
/// 
/// SDL_SemTryWait
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait
/// 
/// SDL_SemWaitTimeout</remarks>
SDL_SemWait: function(sem: PSDL_sem): Integer; cdecl;

/// <summary>See if a semaphore has a positive value and decrement it if it does.</summary>
/// <remarks>This function checks to see if the semaphore pointed to by `sem` has a
/// positive value and atomically decrements the semaphore value if it does. If
/// the semaphore doesn't have a positive value, the function immediately
/// returns SDL_MUTEX_TIMEDOUT.</remarks>
/// <param name="sem">the semaphore to wait on</param>
/// <returns>0 if the wait succeeds, `SDL_MUTEX_TIMEDOUT` if the wait would
///   block, or a negative error code on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore
/// 
/// SDL_DestroySemaphore
/// 
/// SDL_SemPost
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait
/// 
/// SDL_SemWaitTimeout</remarks>
SDL_SemTryWait: function(sem: PSDL_sem): Integer; cdecl;

/// <summary>Wait until a semaphore has a positive value and then decrements it.</summary>
/// <remarks>This function suspends the calling thread until either the semaphore
/// pointed to by `sem` has a positive value, the call is interrupted by a
/// signal or error, or the specified time has elapsed. If the call is
/// successful it will atomically decrement the semaphore value.</remarks>
/// <param name="sem">the semaphore to wait on</param>
/// <param name="ms">the length of the timeout, in milliseconds</param>
/// <returns>0 if the wait succeeds, `SDL_MUTEX_TIMEDOUT` if the wait does not
///   succeed in the allotted time, or a negative error code on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore
/// 
/// SDL_DestroySemaphore
/// 
/// SDL_SemPost
/// 
/// SDL_SemTryWait
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait</remarks>
SDL_SemWaitTimeout: function(sem: PSDL_sem; ms: Uint32): Integer; cdecl;

/// <summary>Atomically increment a semaphore's value and wake waiting threads.</summary>
/// <param name="sem">the semaphore to increment</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore
/// 
/// SDL_DestroySemaphore
/// 
/// SDL_SemTryWait
/// 
/// SDL_SemValue
/// 
/// SDL_SemWait
/// 
/// SDL_SemWaitTimeout</remarks>
SDL_SemPost: function(sem: PSDL_sem): Integer; cdecl;

/// <summary>Get the current value of a semaphore.</summary>
/// <param name="sem">the semaphore to query</param>
/// <returns>the current value of the semaphore.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSemaphore</remarks>
SDL_SemValue: function(sem: PSDL_sem): Uint32; cdecl;

/// <summary>Create a condition variable.</summary>
/// <returns>a new condition variable or NULL on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondBroadcast
/// 
/// SDL_CondSignal
/// 
/// SDL_CondWait
/// 
/// SDL_CondWaitTimeout
/// 
/// SDL_DestroyCond</remarks>
SDL_CreateCond: function(): PSDL_cond; cdecl;

/// <summary>Destroy a condition variable.</summary>
/// <param name="cond">the condition variable to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondBroadcast
/// 
/// SDL_CondSignal
/// 
/// SDL_CondWait
/// 
/// SDL_CondWaitTimeout
/// 
/// SDL_CreateCond</remarks>
SDL_DestroyCond: procedure(cond: PSDL_cond); cdecl;

/// <summary>Restart one of the threads that are waiting on the condition variable.</summary>
/// <param name="cond">the condition variable to signal</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondBroadcast
/// 
/// SDL_CondWait
/// 
/// SDL_CondWaitTimeout
/// 
/// SDL_CreateCond
/// 
/// SDL_DestroyCond</remarks>
SDL_CondSignal: function(cond: PSDL_cond): Integer; cdecl;

/// <summary>Restart all threads that are waiting on the condition variable.</summary>
/// <param name="cond">the condition variable to signal</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondSignal
/// 
/// SDL_CondWait
/// 
/// SDL_CondWaitTimeout
/// 
/// SDL_CreateCond
/// 
/// SDL_DestroyCond</remarks>
SDL_CondBroadcast: function(cond: PSDL_cond): Integer; cdecl;

/// <summary>Wait until a condition variable is signaled.</summary>
/// <remarks>This function unlocks the specified `mutex` and waits for another thread to
/// call SDL_CondSignal() or SDL_CondBroadcast() on the condition variable
/// `cond`. Once the condition variable is signaled, the mutex is re-locked and
/// the function returns.
/// 
/// The mutex must be locked before calling this function.
/// 
/// This function is the equivalent of calling SDL_CondWaitTimeout() with a
/// time length of `SDL_MUTEX_MAXWAIT`.</remarks>
/// <param name="cond">the condition variable to wait on</param>
/// <param name="mutex">the mutex used to coordinate thread access</param>
/// <returns>0 when it is signaled or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondBroadcast
/// 
/// SDL_CondSignal
/// 
/// SDL_CondWaitTimeout
/// 
/// SDL_CreateCond
/// 
/// SDL_DestroyCond</remarks>
SDL_CondWait: function(cond: PSDL_cond; mutex: PSDL_mutex): Integer; cdecl;

/// <summary>Wait until a condition variable is signaled or a certain time has passed.</summary>
/// <remarks>This function unlocks the specified `mutex` and waits for another thread to
/// call SDL_CondSignal() or SDL_CondBroadcast() on the condition variable
/// `cond`, or for the specified time to elapse. Once the condition variable is
/// signaled or the time elapsed, the mutex is re-locked and the function
/// returns.
/// 
/// The mutex must be locked before calling this function.</remarks>
/// <param name="cond">the condition variable to wait on</param>
/// <param name="mutex">the mutex used to coordinate thread access</param>
/// <param name="ms">the maximum time to wait, in milliseconds, or `SDL_MUTEX_MAXWAIT`
///   to wait indefinitely</param>
/// <returns>0 if the condition variable is signaled, `SDL_MUTEX_TIMEDOUT` if
///   the condition is not signaled in the allotted time, or a negative
///   error code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CondBroadcast
/// 
/// SDL_CondSignal
/// 
/// SDL_CondWait
/// 
/// SDL_CreateCond
/// 
/// SDL_DestroyCond</remarks>
SDL_CondWaitTimeout: function(cond: PSDL_cond; mutex: PSDL_mutex; ms: Uint32): Integer; cdecl;

SDL_CreateThread: function(fn: SDL_ThreadFunction; const name: PUTF8Char; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;

SDL_CreateThreadWithStackSize: function(fn: SDL_CreateThreadWithStackSize_fn; const name: PUTF8Char; const stacksize: NativeUInt; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;

/// <summary>Get the thread name as it was specified in SDL_CreateThread().</summary>
/// <remarks>This is internal memory, not to be freed by the caller, and remains valid
/// until the specified thread is cleaned up by SDL_WaitThread().</remarks>
/// <param name="thread">the thread to query</param>
/// <returns>a pointer to a UTF-8 string that names the specified thread, or
///   NULL if it doesn't have a name.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateThread</remarks>
SDL_GetThreadName: function(thread: PSDL_Thread): PUTF8Char; cdecl;

/// <summary>Get the thread identifier for the current thread.</summary>
/// <remarks>This thread identifier is as reported by the underlying operating system.
/// If SDL is running on a platform that does not support threads the return
/// value will always be zero.
/// 
/// This function also returns a valid thread ID when called from the main
/// thread.</remarks>
/// <returns>the ID of the current thread.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetThreadID</remarks>
SDL_ThreadID: function(): SDL_threadID_; cdecl;

/// <summary>Get the thread identifier for the specified thread.</summary>
/// <remarks>This thread identifier is as reported by the underlying operating system.
/// If SDL is running on a platform that does not support threads the return
/// value will always be zero.</remarks>
/// <param name="thread">the thread to query</param>
/// <returns>the ID of the specified thread, or the ID of the current thread if
///   `thread` is NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ThreadID</remarks>
SDL_GetThreadID: function(thread: PSDL_Thread): SDL_threadID_; cdecl;

/// <summary>Set the priority for the current thread.</summary>
/// <remarks>Note that some platforms will not let you alter the priority (or at least,
/// promote the thread to a higher priority) at all, and some require you to be
/// an administrator account. Be prepared for this to fail.</remarks>
/// <param name="priority">the SDL_ThreadPriority to set</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_SetThreadPriority: function(priority: SDL_ThreadPriority): Integer; cdecl;

/// <summary>Wait for a thread to finish.</summary>
/// <remarks>Threads that haven't been detached will remain (as a "zombie") until this
/// function cleans them up. Not doing so is a resource leak.
/// 
/// Once a thread has been cleaned up through this function, the SDL_Thread
/// that references it becomes invalid and should not be referenced again. As
/// such, only one thread may call SDL_WaitThread() on another.
/// 
/// The return code for the thread function is placed in the area pointed to by
/// `status`, if `status` is not NULL.
/// 
/// You may not wait on a thread that has been used in a call to
/// SDL_DetachThread(). Use either that function or this one, but not both, or
/// behavior is undefined.
/// 
/// It is safe to pass a NULL thread to this function; it is a no-op.
/// 
/// Note that the thread pointer is freed by this function and is not valid
/// afterward.</remarks>
/// <param name="thread">the SDL_Thread pointer that was returned from the
///   SDL_CreateThread() call that started this thread</param>
/// <param name="status">pointer to an integer that will receive the value returned
///   from the thread function by its 'return', or NULL to not
///   receive such value back.</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateThread
/// 
/// SDL_DetachThread</remarks>
SDL_WaitThread: procedure(thread: PSDL_Thread; status: PInteger); cdecl;

/// <summary>Let a thread clean up on exit without intervention.</summary>
/// <remarks>A thread may be "detached" to signify that it should not remain until
/// another thread has called SDL_WaitThread() on it. Detaching a thread is
/// useful for long-running threads that nothing needs to synchronize with or
/// further manage. When a detached thread is done, it simply goes away.
/// 
/// There is no way to recover the return code of a detached thread. If you
/// need this, don't detach the thread and instead use SDL_WaitThread().
/// 
/// Once a thread is detached, you should usually assume the SDL_Thread isn't
/// safe to reference again, as it will become invalid immediately upon the
/// detached thread's exit, instead of remaining until someone has called
/// SDL_WaitThread() to finally clean it up. As such, don't detach the same
/// thread more than once.
/// 
/// If a thread has already exited when passed to SDL_DetachThread(), it will
/// stop waiting for a call to SDL_WaitThread() and clean up immediately. It is
/// not safe to detach a thread that might be used with SDL_WaitThread().
/// 
/// You may not call SDL_WaitThread() on a thread that has been detached. Use
/// either that function or this one, but not both, or behavior is undefined.
/// 
/// It is safe to pass NULL to this function; it is a no-op.</remarks>
/// <param name="thread">the SDL_Thread pointer that was returned from the
///   SDL_CreateThread() call that started this thread</param></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_CreateThread
/// 
/// SDL_WaitThread</remarks>
SDL_DetachThread: procedure(thread: PSDL_Thread); cdecl;

/// <summary>Create a piece of thread-local storage.</summary>
/// <remarks>This creates an identifier that is globally visible to all threads but
/// refers to data that is thread-specific.</remarks>
/// <returns>the newly created thread local storage identifier or 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_TLSGet
/// 
/// SDL_TLSSet</remarks>
SDL_TLSCreate: function(): SDL_TLSID; cdecl;

/// <summary>Get the current thread's value associated with a thread local storage ID.</summary>
/// <param name="id">the thread local storage ID</param>
/// <returns>the value associated with the ID for the current thread or NULL if
///   no value has been set; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_TLSCreate
/// 
/// SDL_TLSSet</remarks>
SDL_TLSGet: function(id: SDL_TLSID): Pointer; cdecl;

/// <summary>Set the current thread's value associated with a thread local storage ID.</summary>
/// <remarks>The function prototype for `destructor` is:
/// 
/// ```c
/// void destructor(void *value)
/// ```
/// 
/// where its parameter `value` is what was passed as `value` to SDL_TLSSet().</remarks>
/// <param name="id">the thread local storage ID</param>
/// <param name="value">the value to associate with the ID for the current thread</param>
/// <param name="destructor">a function called when the thread exits, to free the
///   value</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_TLSCreate
/// 
/// SDL_TLSGet</remarks>
SDL_TLSSet: function(id: SDL_TLSID; const value: Pointer; &destructor: SDL_TLSSet_destructor): Integer; cdecl;

/// <summary>Cleanup all TLS data for this thread.</summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_TLSCleanup: procedure(); cdecl;

/// <summary>Use this function to create a new SDL_RWops structure for reading from
/// and/or writing to a named file.</summary>
/// <remarks>The `mode` string is treated roughly the same as in a call to the C
/// library's fopen(), even if SDL doesn't happen to use fopen() behind the
/// scenes.
/// 
/// Available `mode` strings:
/// 
/// - "r": Open a file for reading. The file must exist.
/// - "w": Create an empty file for writing. If a file with the same name
/// already exists its content is erased and the file is treated as a new
/// empty file.
/// - "a": Append to a file. Writing operations append data at the end of the
/// file. The file is created if it does not exist.
/// - "r+": Open a file for update both reading and writing. The file must
/// exist.
/// - "w+": Create an empty file for both reading and writing. If a file with
/// the same name already exists its content is erased and the file is
/// treated as a new empty file.
/// - "a+": Open a file for reading and appending. All writing operations are
/// performed at the end of the file, protecting the previous content to be
/// overwritten. You can reposition (fseek, rewind) the internal pointer to
/// anywhere in the file for reading, but writing operations will move it
/// back to the end of file. The file is created if it does not exist.
/// 
/// **NOTE**: In order to open a file as a binary file, a "b" character has to
/// be included in the `mode` string. This additional "b" character can either
/// be appended at the end of the string (thus making the following compound
/// modes: "rb", "wb", "ab", "r+b", "w+b", "a+b") or be inserted between the
/// letter and the "+" sign for the mixed modes ("rb+", "wb+", "ab+").
/// Additional characters may follow the sequence, although they should have no
/// effect. For example, "t" is sometimes appended to make explicit the file is
/// a text file.
/// 
/// This function supports Unicode filenames, but they must be encoded in UTF-8
/// format, regardless of the underlying operating system.
/// 
/// As a fallback, SDL_RWFromFile() will transparently open a matching filename
/// in an Android app's `assets`.
/// 
/// Closing the SDL_RWops will close the file handle SDL is holding internally.</remarks>
/// <param name="file">a UTF-8 string representing the filename to open</param>
/// <param name="mode">an ASCII string representing the mode to be used for opening
///   the file.</param>
/// <returns>a pointer to the SDL_RWops structure that is created, or NULL on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWtell
/// 
/// SDL_RWwrite</remarks>
SDL_RWFromFile: function(const &file: PUTF8Char; const mode: PUTF8Char): PSDL_RWops; cdecl;

/// <summary>Use this function to create an SDL_RWops structure from a standard I/O file
/// pointer (stdio.h's `FILE*`).</summary>
/// <remarks>This function is not available on Windows, since files opened in an
/// application on that platform cannot be used by a dynamically linked
/// library.
/// 
/// On some platforms, the first parameter is a `void*`, on others, it's a
/// `FILE*`, depending on what system headers are available to SDL. It is
/// always intended to be the `FILE*` type from the C runtime's stdio.h.</remarks>
/// <param name="fp">the `FILE*` that feeds the SDL_RWops stream</param>
/// <param name="autoclose">SDL_TRUE to close the `FILE*` when closing the SDL_RWops,
///   SDL_FALSE to leave the `FILE*` open when the RWops is
///   closed</param>
/// <returns>a pointer to the SDL_RWops structure that is created, or NULL on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWtell
/// 
/// SDL_RWwrite</remarks>
SDL_RWFromFP: function(fp: Pointer; autoclose: SDL_bool): PSDL_RWops; cdecl;

/// <summary>Use this function to prepare a read-write memory buffer for use with
/// SDL_RWops.</summary>
/// <remarks>This function sets up an SDL_RWops struct based on a memory area of a
/// certain size, for both read and write access.
/// 
/// This memory buffer is not copied by the RWops; the pointer you provide must
/// remain valid until you close the stream. Closing the stream will not free
/// the original buffer.
/// 
/// If you need to make sure the RWops never writes to the memory buffer, you
/// should use SDL_RWFromConstMem() with a read-only buffer of memory instead.</remarks>
/// <param name="mem">a pointer to a buffer to feed an SDL_RWops stream</param>
/// <param name="size">the buffer size, in bytes</param>
/// <returns>a pointer to a new SDL_RWops structure, or NULL if it fails; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWtell
/// 
/// SDL_RWwrite</remarks>
SDL_RWFromMem: function(mem: Pointer; size: Integer): PSDL_RWops; cdecl;

/// <summary>Use this function to prepare a read-only memory buffer for use with RWops.</summary>
/// <remarks>This function sets up an SDL_RWops struct based on a memory area of a
/// certain size. It assumes the memory area is not writable.
/// 
/// Attempting to write to this RWops stream will report an error without
/// writing to the memory buffer.
/// 
/// This memory buffer is not copied by the RWops; the pointer you provide must
/// remain valid until you close the stream. Closing the stream will not free
/// the original buffer.
/// 
/// If you need to write to a memory buffer, you should use SDL_RWFromMem()
/// with a writable buffer of memory instead.</remarks>
/// <param name="mem">a pointer to a read-only buffer to feed an SDL_RWops stream</param>
/// <param name="size">the buffer size, in bytes</param>
/// <returns>a pointer to a new SDL_RWops structure, or NULL if it fails; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWtell</remarks>
SDL_RWFromConstMem: function(const mem: Pointer; size: Integer): PSDL_RWops; cdecl;

/// <summary>Use this function to allocate an empty, unpopulated SDL_RWops structure.</summary>
/// <remarks>Applications do not need to use this function unless they are providing
/// their own SDL_RWops implementation. If you just need a SDL_RWops to
/// read/write a common data source, you should use the built-in
/// implementations in SDL, like SDL_RWFromFile() or SDL_RWFromMem(), etc.
/// 
/// You must free the returned pointer with SDL_FreeRW(). Depending on your
/// operating system and compiler, there may be a difference between the
/// malloc() and free() your program uses and the versions SDL calls
/// internally. Trying to mix the two can cause crashing such as segmentation
/// faults. Since all SDL_RWops must free themselves when their **close**
/// method is called, all SDL_RWops must be allocated through this function, so
/// they can all be freed correctly with SDL_FreeRW().</remarks>
/// <returns>a pointer to the allocated memory on success, or NULL on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreeRW</remarks>
SDL_AllocRW: function(): PSDL_RWops; cdecl;

/// <summary>Use this function to free an SDL_RWops structure allocated by
/// SDL_AllocRW().</summary>
/// <remarks>Applications do not need to use this function unless they are providing
/// their own SDL_RWops implementation. If you just need a SDL_RWops to
/// read/write a common data source, you should use the built-in
/// implementations in SDL, like SDL_RWFromFile() or SDL_RWFromMem(), etc, and
/// call the **close** method on those SDL_RWops pointers when you are done
/// with them.
/// 
/// Only use SDL_FreeRW() on pointers returned by SDL_AllocRW(). The pointer is
/// invalid as soon as this function returns. Any extra memory allocated during
/// creation of the SDL_RWops is not freed by SDL_FreeRW(); the programmer must
/// be responsible for managing that memory in their **close** method.</remarks>
/// <param name="area">the SDL_RWops structure to be freed</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocRW</remarks>
SDL_FreeRW: procedure(area: PSDL_RWops); cdecl;

/// <summary>Use this function to get the size of the data stream in an SDL_RWops.</summary>
/// <remarks>Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">the SDL_RWops to get the size of the data stream from</param>
/// <returns>the size of the data stream in the SDL_RWops on success, -1 if
///   unknown or a negative error code on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RWsize: function(context: PSDL_RWops): Sint64; cdecl;

/// <summary>Seek within an SDL_RWops data stream.</summary>
/// <remarks>This function seeks to byte `offset`, relative to `whence`.
/// 
/// `whence` may be any of the following values:
/// 
/// - `RW_SEEK_SET`: seek from the beginning of data
/// - `RW_SEEK_CUR`: seek relative to current read point
/// - `RW_SEEK_END`: seek relative to the end of data
/// 
/// If this stream can not seek, it will return -1.
/// 
/// SDL_RWseek() is actually a wrapper function that calls the SDL_RWops's
/// `seek` method appropriately, to simplify application development.
/// 
/// Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">a pointer to an SDL_RWops structure</param>
/// <param name="offset">an offset in bytes, relative to **whence** location; can be
///   negative</param>
/// <param name="whence">any of `RW_SEEK_SET`, `RW_SEEK_CUR`, `RW_SEEK_END`</param>
/// <returns>the final offset in the data stream after the seek or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWtell
/// 
/// SDL_RWwrite</remarks>
SDL_RWseek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;

/// <summary>Determine the current read/write offset in an SDL_RWops data stream.</summary>
/// <remarks>SDL_RWtell is actually a wrapper function that calls the SDL_RWops's `seek`
/// method, with an offset of 0 bytes from `RW_SEEK_CUR`, to simplify
/// application development.
/// 
/// Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">a SDL_RWops data stream object from which to get the current
///   offset</param>
/// <returns>the current offset in the stream, or -1 if the information can not
///   be determined.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWwrite</remarks>
SDL_RWtell: function(context: PSDL_RWops): Sint64; cdecl;

/// <summary>Read from a data source.</summary>
/// <remarks>This function reads up to `maxnum` objects each of size `size` from the
/// data source to the area pointed at by `ptr`. This function may read less
/// objects than requested. It will return zero when there has been an error or
/// the data stream is completely read.
/// 
/// SDL_RWread() is actually a function wrapper that calls the SDL_RWops's
/// `read` method appropriately, to simplify application development.
/// 
/// Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">a pointer to an SDL_RWops structure</param>
/// <param name="ptr">a pointer to a buffer to read data into</param>
/// <param name="size">the size of each object to read, in bytes</param>
/// <param name="maxnum">the maximum number of objects to be read</param>
/// <returns>the number of objects read, or 0 at error or end of file; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWseek
/// 
/// SDL_RWwrite</remarks>
SDL_RWread: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;

/// <summary>Write to an SDL_RWops data stream.</summary>
/// <remarks>This function writes exactly `num` objects each of size `size` from the
/// area pointed at by `ptr` to the stream. If this fails for any reason, it'll
/// return less than `num` to demonstrate how far the write progressed. On
/// success, it returns `num`.
/// 
/// SDL_RWwrite is actually a function wrapper that calls the SDL_RWops's
/// `write` method appropriately, to simplify application development.
/// 
/// Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">a pointer to an SDL_RWops structure</param>
/// <param name="ptr">a pointer to a buffer containing data to write</param>
/// <param name="size">the size of an object to write, in bytes</param>
/// <param name="num">the number of objects to write</param>
/// <returns>the number of objects written, which will be less than **num** on
///   error; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_RWclose
/// 
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek</remarks>
SDL_RWwrite: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;

/// <summary>Close and free an allocated SDL_RWops structure.</summary>
/// <remarks>SDL_RWclose() closes and cleans up the SDL_RWops stream. It releases any
/// resources used by the stream and frees the SDL_RWops itself with
/// SDL_FreeRW(). This returns 0 on success, or -1 if the stream failed to
/// flush to its output (e.g. to disk).
/// 
/// Note that if this fails to flush the stream to disk, this function reports
/// an error, but the SDL_RWops is still invalid once this function returns.
/// 
/// Prior to SDL 2.0.10, this function was a macro.</remarks>
/// <param name="context">SDL_RWops structure to close</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_RWFromConstMem
/// 
/// SDL_RWFromFile
/// 
/// SDL_RWFromFP
/// 
/// SDL_RWFromMem
/// 
/// SDL_RWread
/// 
/// SDL_RWseek
/// 
/// SDL_RWwrite</remarks>
SDL_RWclose: function(context: PSDL_RWops): Integer; cdecl;

/// <summary>Load all the data from an SDL data stream.</summary>
/// <remarks>The data is allocated with a zero byte at the end (null terminated) for
/// convenience. This extra byte is not included in the value reported via
/// `datasize`.
/// 
/// The data should be freed with SDL_free().</remarks>
/// <param name="src">the SDL_RWops to read all available data from</param>
/// <param name="datasize">if not NULL, will store the number of bytes read</param>
/// <param name="freesrc">if non-zero, calls SDL_RWclose() on `src` before returning</param>
/// <returns>the data, or NULL if there was an error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_LoadFile_RW: function(src: PSDL_RWops; datasize: PNativeUInt; freesrc: Integer): Pointer; cdecl;

/// <summary>Load all the data from a file path.</summary>
/// <remarks>The data is allocated with a zero byte at the end (null terminated) for
/// convenience. This extra byte is not included in the value reported via
/// `datasize`.
/// 
/// The data should be freed with SDL_free().
/// 
/// Prior to SDL 2.0.10, this function was a macro wrapping around
/// SDL_LoadFile_RW.</remarks>
/// <param name="file">the path to read all available data from</param>
/// <param name="datasize">if not NULL, will store the number of bytes read</param>
/// <returns>the data, or NULL if there was an error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_LoadFile: function(const &file: PUTF8Char; datasize: PNativeUInt): Pointer; cdecl;

/// <summary>Use this function to read a byte from an SDL_RWops.</summary>
/// <param name="src">the SDL_RWops to read from</param>
/// <returns>the read byte on success or 0 on failure; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteU8</remarks>
SDL_ReadU8: function(src: PSDL_RWops): Uint8; cdecl;

/// <summary>Use this function to read 16 bits of little-endian data from an SDL_RWops
/// and return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>16 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadBE16</remarks>
SDL_ReadLE16: function(src: PSDL_RWops): Uint16; cdecl;

/// <summary>Use this function to read 16 bits of big-endian data from an SDL_RWops and
/// return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>16 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadLE16</remarks>
SDL_ReadBE16: function(src: PSDL_RWops): Uint16; cdecl;

/// <summary>Use this function to read 32 bits of little-endian data from an SDL_RWops
/// and return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>32 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadBE32</remarks>
SDL_ReadLE32: function(src: PSDL_RWops): Uint32; cdecl;

/// <summary>Use this function to read 32 bits of big-endian data from an SDL_RWops and
/// return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>32 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadLE32</remarks>
SDL_ReadBE32: function(src: PSDL_RWops): Uint32; cdecl;

/// <summary>Use this function to read 64 bits of little-endian data from an SDL_RWops
/// and return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>64 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadBE64</remarks>
SDL_ReadLE64: function(src: PSDL_RWops): Uint64; cdecl;

/// <summary>Use this function to read 64 bits of big-endian data from an SDL_RWops and
/// return in native format.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the data returned will be in
/// the native byte order.</remarks>
/// <param name="src">the stream from which to read data</param>
/// <returns>64 bits of data in the native byte order of the platform.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadLE64</remarks>
SDL_ReadBE64: function(src: PSDL_RWops): Uint64; cdecl;

/// <summary>Use this function to write a byte to an SDL_RWops.</summary>
/// <param name="dst">the SDL_RWops to write to</param>
/// <param name="value">the byte value to write</param>
/// <returns>1 on success or 0 on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ReadU8</remarks>
SDL_WriteU8: function(dst: PSDL_RWops; value: Uint8): NativeUInt; cdecl;

/// <summary>Use this function to write 16 bits in native format to a SDL_RWops as
/// little-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in little-endian
/// format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteBE16</remarks>
SDL_WriteLE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;

/// <summary>Use this function to write 16 bits in native format to a SDL_RWops as
/// big-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in big-endian format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteLE16</remarks>
SDL_WriteBE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;

/// <summary>Use this function to write 32 bits in native format to a SDL_RWops as
/// little-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in little-endian
/// format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteBE32</remarks>
SDL_WriteLE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;

/// <summary>Use this function to write 32 bits in native format to a SDL_RWops as
/// big-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in big-endian format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteLE32</remarks>
SDL_WriteBE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;

/// <summary>Use this function to write 64 bits in native format to a SDL_RWops as
/// little-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in little-endian
/// format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteBE64</remarks>
SDL_WriteLE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;

/// <summary>Use this function to write 64 bits in native format to a SDL_RWops as
/// big-endian data.</summary>
/// <remarks>SDL byteswaps the data only if necessary, so the application always
/// specifies native format, and the data written will be in big-endian format.</remarks>
/// <param name="dst">the stream to which data will be written</param>
/// <param name="value">the data to be written, in native format</param>
/// <returns>1 on successful write, 0 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WriteLE64</remarks>
SDL_WriteBE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;

/// <summary>Use this function to get the number of built-in audio drivers.</summary>
/// <remarks>This function returns a hardcoded number. This never returns a negative
/// value; if there are no drivers compiled into this build of SDL, this
/// function returns zero. The presence of a driver in this list does not mean
/// it will function, it just means SDL is capable of interacting with that
/// interface. For example, a build of SDL might have esound support, but if
/// there's no esound server available, SDL's esound driver would fail if used.
/// 
/// By default, SDL tries all drivers, in its preferred order, until one is
/// found to be usable.</remarks>
/// <returns>the number of built-in audio drivers.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetAudioDriver</remarks>
SDL_GetNumAudioDrivers: function(): Integer; cdecl;

/// <summary>Use this function to get the name of a built in audio driver.</summary>
/// <remarks>The list of audio drivers is given in the order that they are normally
/// initialized by default; the drivers that seem more reasonable to choose
/// first (as far as the SDL developers believe) are earlier in the list.
/// 
/// The names of drivers are all simple, low-ASCII identifiers, like "alsa",
/// "coreaudio" or "xaudio2". These never have Unicode characters, and are not
/// meant to be proper names.</remarks>
/// <param name="index">the index of the audio driver; the value ranges from 0 to
///   SDL_GetNumAudioDrivers() - 1</param>
/// <returns>the name of the audio driver at the requested index, or NULL if an
///   invalid index was specified.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumAudioDrivers</remarks>
SDL_GetAudioDriver: function(index: Integer): PUTF8Char; cdecl;

/// <summary>Use this function to initialize a particular audio driver.</summary>
/// <remarks>This function is used internally, and should not be used unless you have a
/// specific need to designate the audio driver you want to use. You should
/// normally use SDL_Init() or SDL_InitSubSystem().</remarks>
/// <param name="driver_name">the name of the desired audio driver</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AudioQuit</remarks>
SDL_AudioInit: function(const driver_name: PUTF8Char): Integer; cdecl;

/// <summary>Use this function to shut down audio if you initialized it with
/// SDL_AudioInit().</summary>
/// <remarks>This function is used internally, and should not be used unless you have a
/// specific need to specify the audio driver you want to use. You should
/// normally use SDL_Quit() or SDL_QuitSubSystem().
/// This function is available since SDL 2.0.0.
/// SDL_AudioInit</remarks>
SDL_AudioQuit: procedure(); cdecl;

/// <summary>Get the name of the current audio driver.</summary>
/// <remarks>The returned string points to internal static memory and thus never becomes
/// invalid, even if you quit the audio subsystem and initialize a new driver
/// (although such a case would return a different static string from another
/// call to this function, of course). As such, you should not modify or free
/// the returned string.</remarks>
/// <returns>the name of the current audio driver or NULL if no driver has been
///   initialized.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AudioInit</remarks>
SDL_GetCurrentAudioDriver: function(): PUTF8Char; cdecl;

/// <summary>This function is a legacy means of opening the audio device.</summary>
/// <remarks>This function remains for compatibility with SDL 1.2, but also because it's
/// slightly easier to use than the new functions in SDL 2.0. The new, more
/// powerful, and preferred way to do this is SDL_OpenAudioDevice().
/// 
/// This function is roughly equivalent to:
/// 
/// ```c
/// SDL_OpenAudioDevice(NULL, 0, desired, obtained, SDL_AUDIO_ALLOW_ANY_CHANGE);
/// ```
/// 
/// With two notable exceptions:
/// 
/// - If `obtained` is NULL, we use `desired` (and allow no changes), which
/// means desired will be modified to have the correct values for silence,
/// etc, and SDL will convert any differences between your app's specific
/// request and the hardware behind the scenes.
/// - The return value is always success or failure, and not a device ID, which
/// means you can only have one device open at a time with this function.</remarks>
/// <param name="desired">an SDL_AudioSpec structure representing the desired output
///   format. Please refer to the SDL_OpenAudioDevice
///   documentation for details on how to prepare this structure.</param>
/// <param name="obtained">an SDL_AudioSpec structure filled in with the actual
///   parameters, or NULL.</param>
/// <returns>0 if successful, placing the actual hardware parameters in the
///   structure pointed to by `obtained`.</returns></summary>
/// <remarks>If `obtained` is NULL, the audio data passed to the callback
/// function will be guaranteed to be in the requested format, and
/// will be automatically converted to the actual hardware audio
/// format if necessary. If `obtained` is NULL, `desired` will have
/// fields modified.
/// 
/// This function returns a negative error code on failure to open the
/// audio device or failure to set up the audio thread; call
/// SDL_GetError() for more information.
/// This function is available since SDL 2.0.0.
/// SDL_CloseAudio
/// 
/// SDL_LockAudio
/// 
/// SDL_PauseAudio
/// 
/// SDL_UnlockAudio</remarks>
SDL_OpenAudio: function(desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec): Integer; cdecl;

/// <summary>Get the number of built-in audio devices.</summary>
/// <remarks>This function is only valid after successfully initializing the audio
/// subsystem.
/// 
/// Note that audio capture support is not implemented as of SDL 2.0.4, so the
/// `iscapture` parameter is for future expansion and should always be zero for
/// now.
/// 
/// This function will return -1 if an explicit list of devices can't be
/// determined. Returning -1 is not an error. For example, if SDL is set up to
/// talk to a remote audio server, it can't list every one available on the
/// Internet, but it will still allow a specific host to be specified in
/// SDL_OpenAudioDevice().
/// 
/// In many common cases, when this function returns a value <= 0, it can still
/// successfully open the default device (NULL for first argument of
/// SDL_OpenAudioDevice()).
/// 
/// This function may trigger a complete redetect of available hardware. It
/// should not be called for each iteration of a loop, but rather once at the
/// start of a loop:
/// 
/// ```c
/// // Don't do this:
/// for (int i = 0; i < SDL_GetNumAudioDevices(0); i++)
/// 
/// // do this instead:
/// const int count = SDL_GetNumAudioDevices(0);
/// for (int i = 0; i < count; ++i) { do_something_here(); }
/// ```</remarks>
/// <param name="iscapture">zero to request playback devices, non-zero to request
///   recording devices</param>
/// <returns>the number of available devices exposed by the current driver or
///   -1 if an explicit list of devices can't be determined. A return
///   value of -1 does not necessarily mean an error condition.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetAudioDeviceName
/// 
/// SDL_OpenAudioDevice</remarks>
SDL_GetNumAudioDevices: function(iscapture: Integer): Integer; cdecl;

/// <summary>Get the human-readable name of a specific audio device.</summary>
/// <remarks>This function is only valid after successfully initializing the audio
/// subsystem. The values returned by this function reflect the latest call to
/// SDL_GetNumAudioDevices(); re-call that function to redetect available
/// hardware.
/// 
/// The string returned by this function is UTF-8 encoded, read-only, and
/// managed internally. You are not to free it. If you need to keep the string
/// for any length of time, you should make your own copy of it, as it will be
/// invalid next time any of several other SDL functions are called.</remarks>
/// <param name="index">the index of the audio device; valid values range from 0 to
///   SDL_GetNumAudioDevices() - 1</param>
/// <param name="iscapture">non-zero to query the list of recording devices, zero to
///   query the list of output devices.</param>
/// <returns>the name of the audio device at the requested index, or NULL on
///   error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumAudioDevices</remarks>
SDL_GetAudioDeviceName: function(index: Integer; iscapture: Integer): PUTF8Char; cdecl;

/// <summary>Get the preferred audio format of a specific audio device.</summary>
/// <remarks>This function is only valid after a successfully initializing the audio
/// subsystem. The values returned by this function reflect the latest call to
/// SDL_GetNumAudioDevices(); re-call that function to redetect available
/// hardware.
/// 
/// `spec` will be filled with the sample rate, sample format, and channel
/// count. All other values in the structure are filled with 0. When the
/// supported struct members are 0, SDL was unable to get the property from the
/// backend.</remarks>
/// <param name="index">the index of the audio device; valid values range from 0 to
///   SDL_GetNumAudioDevices() - 1</param>
/// <param name="iscapture">non-zero to query the list of recording devices, zero to
///   query the list of output devices.</param>
/// <param name="spec">The SDL_AudioSpec to be initialized by this function.</param>
/// <returns>0 on success, nonzero on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_GetNumAudioDevices</remarks>
SDL_GetAudioDeviceSpec: function(index: Integer; iscapture: Integer; spec: PSDL_AudioSpec): Integer; cdecl;

/// <summary>Open a specific audio device.</summary>
/// <remarks>SDL_OpenAudio(), unlike this function, always acts on device ID 1. As such,
/// this function will never return a 1 so as not to conflict with the legacy
/// function.
/// 
/// Please note that SDL 2.0 before 2.0.5 did not support recording; as such,
/// this function would fail if `iscapture` was not zero. Starting with SDL
/// 2.0.5, recording is implemented and this value can be non-zero.
/// 
/// Passing in a `device` name of NULL requests the most reasonable default
/// (and is equivalent to what SDL_OpenAudio() does to choose a device). The
/// `device` name is a UTF-8 string reported by SDL_GetAudioDeviceName(), but
/// some drivers allow arbitrary and driver-specific strings, such as a
/// hostname/IP address for a remote audio server, or a filename in the
/// diskaudio driver.
/// 
/// An opened audio device starts out paused, and should be enabled for playing
/// by calling SDL_PauseAudioDevice(devid, 0) when you are ready for your audio
/// callback function to be called. Since the audio driver may modify the
/// requested size of the audio buffer, you should allocate any local mixing
/// buffers after you open the audio device.
/// 
/// The audio callback runs in a separate thread in most cases; you can prevent
/// race conditions between your callback and other threads without fully
/// pausing playback with SDL_LockAudioDevice(). For more information about the
/// callback, see SDL_AudioSpec.
/// 
/// Managing the audio spec via 'desired' and 'obtained':
/// 
/// When filling in the desired audio spec structure:
/// 
/// - `desired->freq` should be the frequency in sample-frames-per-second (Hz).
/// - `desired->format` should be the audio format (`AUDIO_S16SYS`, etc).
/// - `desired->samples` is the desired size of the audio buffer, in _sample
/// frames_ (with stereo output, two samples--left and right--would make a
/// single sample frame). This number should be a power of two, and may be
/// adjusted by the audio driver to a value more suitable for the hardware.
/// Good values seem to range between 512 and 8096 inclusive, depending on
/// the application and CPU speed. Smaller values reduce latency, but can
/// lead to underflow if the application is doing heavy processing and cannot
/// fill the audio buffer in time. Note that the number of sample frames is
/// directly related to time by the following formula: `ms =
/// (sampleframes*1000)/freq`
/// - `desired->size` is the size in _bytes_ of the audio buffer, and is
/// calculated by SDL_OpenAudioDevice(). You don't initialize this.
/// - `desired->silence` is the value used to set the buffer to silence, and is
/// calculated by SDL_OpenAudioDevice(). You don't initialize this.
/// - `desired->callback` should be set to a function that will be called when
/// the audio device is ready for more data. It is passed a pointer to the
/// audio buffer, and the length in bytes of the audio buffer. This function
/// usually runs in a separate thread, and so you should protect data
/// structures that it accesses by calling SDL_LockAudioDevice() and
/// SDL_UnlockAudioDevice() in your code. Alternately, you may pass a NULL
/// pointer here, and call SDL_QueueAudio() with some frequency, to queue
/// more audio samples to be played (or for capture devices, call
/// SDL_DequeueAudio() with some frequency, to obtain audio samples).
/// - `desired->userdata` is passed as the first parameter to your callback
/// function. If you passed a NULL callback, this value is ignored.
/// 
/// `allowed_changes` can have the following flags OR'd together:
/// 
/// - `SDL_AUDIO_ALLOW_FREQUENCY_CHANGE`
/// - `SDL_AUDIO_ALLOW_FORMAT_CHANGE`
/// - `SDL_AUDIO_ALLOW_CHANNELS_CHANGE`
/// - `SDL_AUDIO_ALLOW_ANY_CHANGE`
/// 
/// These flags specify how SDL should behave when a device cannot offer a
/// specific feature. If the application requests a feature that the hardware
/// doesn't offer, SDL will always try to get the closest equivalent.
/// 
/// For example, if you ask for float32 audio format, but the sound card only
/// supports int16, SDL will set the hardware to int16. If you had set
/// SDL_AUDIO_ALLOW_FORMAT_CHANGE, SDL will change the format in the `obtained`
/// structure. If that flag was *not* set, SDL will prepare to convert your
/// callback's float32 audio to int16 before feeding it to the hardware and
/// will keep the originally requested format in the `obtained` structure.
/// 
/// The resulting audio specs, varying depending on hardware and on what
/// changes were allowed, will then be written back to `obtained`.
/// 
/// If your application can only handle one specific data format, pass a zero
/// for `allowed_changes` and let SDL transparently handle any differences.</remarks>
/// <param name="device">a UTF-8 string reported by SDL_GetAudioDeviceName() or a
///   driver-specific name as appropriate. NULL requests the most
///   reasonable default device.</param>
/// <param name="iscapture">non-zero to specify a device should be opened for
///   recording, not playback</param>
/// <param name="desired">an SDL_AudioSpec structure representing the desired output
///   format; see SDL_OpenAudio() for more information</param>
/// <param name="obtained">an SDL_AudioSpec structure filled in with the actual output
///   format; see SDL_OpenAudio() for more information</param>
/// <param name="allowed_changes">0, or one or more flags OR'd together</param>
/// <returns>a valid device ID that is > 0 on success or 0 on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>For compatibility with SDL 1.2, this will never return 1, since
/// SDL reserves that ID for the legacy SDL_OpenAudio() function.
/// This function is available since SDL 2.0.0.
/// SDL_CloseAudioDevice
/// 
/// SDL_GetAudioDeviceName
/// 
/// SDL_LockAudioDevice
/// 
/// SDL_OpenAudio
/// 
/// SDL_PauseAudioDevice
/// 
/// SDL_UnlockAudioDevice</remarks>
SDL_OpenAudioDevice: function(const device: PUTF8Char; iscapture: Integer; const desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec; allowed_changes: Integer): SDL_AudioDeviceID; cdecl;

/// <summary>This function is a legacy means of querying the audio device.</summary>
/// <remarks>New programs might want to use SDL_GetAudioDeviceStatus() instead. This
/// function is equivalent to calling...
/// 
/// ```c
/// SDL_GetAudioDeviceStatus(1);
/// ```
/// 
/// ...and is only useful if you used the legacy SDL_OpenAudio() function.</remarks>
/// <returns>the SDL_AudioStatus of the audio device opened by SDL_OpenAudio().</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetAudioDeviceStatus</remarks>
SDL_GetAudioStatus: function(): SDL_AudioStatus; cdecl;

/// <summary>Use this function to get the current audio state of an audio device.</summary>
/// <param name="dev">the ID of an audio device previously opened with
///   SDL_OpenAudioDevice()</param>
/// <returns>the SDL_AudioStatus of the specified audio device.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PauseAudioDevice</remarks>
SDL_GetAudioDeviceStatus: function(dev: SDL_AudioDeviceID): SDL_AudioStatus; cdecl;

/// <summary>This function is a legacy means of pausing the audio device.</summary>
/// <remarks>New programs might want to use SDL_PauseAudioDevice() instead. This
/// function is equivalent to calling...
/// 
/// ```c
/// SDL_PauseAudioDevice(1, pause_on);
/// ```
/// 
/// ...and is only useful if you used the legacy SDL_OpenAudio() function.</remarks>
/// <param name="pause_on">non-zero to pause, 0 to unpause</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetAudioStatus
/// 
/// SDL_PauseAudioDevice</remarks>
SDL_PauseAudio: procedure(pause_on: Integer); cdecl;

/// <summary>Use this function to pause and unpause audio playback on a specified
/// device.</summary>
/// <remarks>This function pauses and unpauses the audio callback processing for a given
/// device. Newly-opened audio devices start in the paused state, so you must
/// call this function with **pause_on**=0 after opening the specified audio
/// device to start playing sound. This allows you to safely initialize data
/// for your callback function after opening the audio device. Silence will be
/// written to the audio device while paused, and the audio callback is
/// guaranteed to not be called. Pausing one device does not prevent other
/// unpaused devices from running their callbacks.
/// 
/// Pausing state does not stack; even if you pause a device several times, a
/// single unpause will start the device playing again, and vice versa. This is
/// different from how SDL_LockAudioDevice() works.
/// 
/// If you just need to protect a few variables from race conditions vs your
/// callback, you shouldn't pause the audio device, as it will lead to dropouts
/// in the audio playback. Instead, you should use SDL_LockAudioDevice().</remarks>
/// <param name="dev">a device opened by SDL_OpenAudioDevice()</param>
/// <param name="pause_on">non-zero to pause, 0 to unpause</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LockAudioDevice</remarks>
SDL_PauseAudioDevice: procedure(dev: SDL_AudioDeviceID; pause_on: Integer); cdecl;

/// <summary>Load the audio data of a WAVE file into memory.</summary>
/// <remarks>Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to
/// be valid pointers. The entire data portion of the file is then loaded into
/// memory and decoded if necessary.
/// 
/// If `freesrc` is non-zero, the data source gets automatically closed and
/// freed before the function returns.
/// 
/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and
/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and
/// A-law and mu-law (8 bits). Other formats are currently unsupported and
/// cause an error.
/// 
/// If this function succeeds, the pointer returned by it is equal to `spec`
/// and the pointer to the audio data allocated by the function is written to
/// `audio_buf` and its length in bytes to `audio_len`. The SDL_AudioSpec
/// members `freq`, `channels`, and `format` are set to the values of the audio
/// data in the buffer. The `samples` member is set to a sane default and all
/// others are set to zero.
/// 
/// It's necessary to use SDL_FreeWAV() to free the audio data returned in
/// `audio_buf` when it is no longer used.
/// 
/// Because of the underspecification of the .WAV format, there are many
/// problematic files in the wild that cause issues with strict decoders. To
/// provide compatibility with these files, this decoder is lenient in regards
/// to the truncation of the file, the fact chunk, and the size of the RIFF
/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,
/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to
/// tune the behavior of the loading process.
/// 
/// Any file that is invalid (due to truncation, corruption, or wrong values in
/// the headers), too big, or unsupported causes an error. Additionally, any
/// critical I/O error from the data source will terminate the loading process
/// with an error. The function returns NULL on error and in all cases (with
/// the exception of `src` being NULL), an appropriate error message will be
/// set.
/// 
/// It is required that the data source supports seeking.
/// 
/// Example:
/// 
/// ```c
/// SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, &spec, &buf, &len);
/// ```
/// 
/// Note that the SDL_LoadWAV macro does this same thing for you, but in a less
/// messy way:
/// 
/// ```c
/// SDL_LoadWAV("sample.wav", &spec, &buf, &len);
/// ```</remarks>
/// <param name="src">The data source for the WAVE data</param>
/// <param name="freesrc">If non-zero, SDL will _always_ free the data source</param>
/// <param name="spec">An SDL_AudioSpec that will be filled in with the wave file's
///   format details</param>
/// <param name="audio_buf">A pointer filled with the audio data, allocated by the
///   function.</param>
/// <param name="audio_len">A pointer filled with the length of the audio data buffer
///   in bytes</param>
/// <returns>This function, if successfully called, returns `spec`, which will
///   be filled with the audio data format of the wave source data.
///   `audio_buf` will be filled with a pointer to an allocated buffer
///   containing the audio data, and `audio_len` is filled with the
///   length of that audio buffer in bytes.</returns></summary>
/// <remarks>This function returns NULL if the .WAV file cannot be opened, uses
/// an unknown data format, or is corrupt; call SDL_GetError() for
/// more information.
/// 
/// When the application is done with the data returned in
/// `audio_buf`, it should call SDL_FreeWAV() to dispose of it.
/// This function is available since SDL 2.0.0.
/// SDL_FreeWAV
/// 
/// SDL_LoadWAV</remarks>
SDL_LoadWAV_RW: function(src: PSDL_RWops; freesrc: Integer; spec: PSDL_AudioSpec; audio_buf: PPUint8; audio_len: PUint32): PSDL_AudioSpec; cdecl;

/// <summary>Free data previously allocated with SDL_LoadWAV() or SDL_LoadWAV_RW().</summary>
/// <remarks>After a WAVE file has been opened with SDL_LoadWAV() or SDL_LoadWAV_RW()
/// its data can eventually be freed with SDL_FreeWAV(). It is safe to call
/// this function with a NULL pointer.</remarks>
/// <param name="audio_buf">a pointer to the buffer created by SDL_LoadWAV() or
///   SDL_LoadWAV_RW()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadWAV
/// 
/// SDL_LoadWAV_RW</remarks>
SDL_FreeWAV: procedure(audio_buf: PUint8); cdecl;

/// <summary>Initialize an SDL_AudioCVT structure for conversion.</summary>
/// <remarks>Before an SDL_AudioCVT structure can be used to convert audio data it must
/// be initialized with source and destination information.
/// 
/// This function will zero out every field of the SDL_AudioCVT, so it must be
/// called before the application fills in the final buffer information.
/// 
/// Once this function has returned successfully, and reported that a
/// conversion is necessary, the application fills in the rest of the fields in
/// SDL_AudioCVT, now that it knows how large a buffer it needs to allocate,
/// and then can call SDL_ConvertAudio() to complete the conversion.</remarks>
/// <param name="cvt">an SDL_AudioCVT structure filled in with audio conversion
///   information</param>
/// <param name="src_format">the source format of the audio data; for more info see
///   SDL_AudioFormat</param>
/// <param name="src_channels">the number of channels in the source</param>
/// <param name="src_rate">the frequency (sample-frames-per-second) of the source</param>
/// <param name="dst_format">the destination format of the audio data; for more info
///   see SDL_AudioFormat</param>
/// <param name="dst_channels">the number of channels in the destination</param>
/// <param name="dst_rate">the frequency (sample-frames-per-second) of the destination</param>
/// <returns>1 if the audio filter is prepared, 0 if no conversion is needed,
///   or a negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ConvertAudio</remarks>
SDL_BuildAudioCVT: function(cvt: PSDL_AudioCVT; src_format: SDL_AudioFormat; src_channels: Uint8; src_rate: Integer; dst_format: SDL_AudioFormat; dst_channels: Uint8; dst_rate: Integer): Integer; cdecl;

/// <summary>Convert audio data to a desired audio format.</summary>
/// <remarks>This function does the actual audio data conversion, after the application
/// has called SDL_BuildAudioCVT() to prepare the conversion information and
/// then filled in the buffer details.
/// 
/// Once the application has initialized the `cvt` structure using
/// SDL_BuildAudioCVT(), allocated an audio buffer and filled it with audio
/// data in the source format, this function will convert the buffer, in-place,
/// to the desired format.
/// 
/// The data conversion may go through several passes; any given pass may
/// possibly temporarily increase the size of the data. For example, SDL might
/// expand 16-bit data to 32 bits before resampling to a lower frequency,
/// shrinking the data size after having grown it briefly. Since the supplied
/// buffer will be both the source and destination, converting as necessary
/// in-place, the application must allocate a buffer that will fully contain
/// the data during its largest conversion pass. After SDL_BuildAudioCVT()
/// returns, the application should set the `cvt->len` field to the size, in
/// bytes, of the source data, and allocate a buffer that is `cvt->len *
/// cvt->len_mult` bytes long for the `buf` field.
/// 
/// The source data should be copied into this buffer before the call to
/// SDL_ConvertAudio(). Upon successful return, this buffer will contain the
/// converted audio, and `cvt->len_cvt` will be the size of the converted data,
/// in bytes. Any bytes in the buffer past `cvt->len_cvt` are undefined once
/// this function returns.</remarks>
/// <param name="cvt">an SDL_AudioCVT structure that was previously set up by
///   SDL_BuildAudioCVT().</param>
/// <returns>0 if the conversion was completed successfully or a negative error
///   code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BuildAudioCVT</remarks>
SDL_ConvertAudio: function(cvt: PSDL_AudioCVT): Integer; cdecl;

/// <summary>Create a new audio stream.</summary>
/// <param name="src_format">The format of the source audio</param>
/// <param name="src_channels">The number of channels of the source audio</param>
/// <param name="src_rate">The sampling rate of the source audio</param>
/// <param name="dst_format">The format of the desired audio output</param>
/// <param name="dst_channels">The number of channels of the desired audio output</param>
/// <param name="dst_rate">The sampling rate of the desired audio output</param>
/// <returns>0 on success, or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.7.
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_AudioStreamClear
/// 
/// SDL_FreeAudioStream</remarks>
SDL_NewAudioStream: function(const src_format: SDL_AudioFormat; const src_channels: Uint8; const src_rate: Integer; const dst_format: SDL_AudioFormat; const dst_channels: Uint8; const dst_rate: Integer): PSDL_AudioStream; cdecl;

/// <summary>Add data to be converted/resampled to the stream.</summary>
/// <param name="stream">The stream the audio data is being added to</param>
/// <param name="buf">A pointer to the audio data to add</param>
/// <param name="len">The number of bytes to write to the stream</param>
/// <returns>0 on success, or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_AudioStreamClear
/// 
/// SDL_FreeAudioStream</remarks>
SDL_AudioStreamPut: function(stream: PSDL_AudioStream; const buf: Pointer; len: Integer): Integer; cdecl;

/// <summary>Get converted/resampled data from the stream</summary>
/// <param name="stream">The stream the audio is being requested from</param>
/// <param name="buf">A buffer to fill with audio data</param>
/// <param name="len">The maximum number of bytes to fill</param>
/// <returns>the number of bytes read from the stream, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_AudioStreamClear
/// 
/// SDL_FreeAudioStream</remarks>
SDL_AudioStreamGet: function(stream: PSDL_AudioStream; buf: Pointer; len: Integer): Integer; cdecl;

/// <summary>Get the number of converted/resampled bytes available.</summary>
/// <remarks>The stream may be buffering data behind the scenes until it has enough to
/// resample correctly, so this number might be lower than what you expect, or
/// even be zero. Add more data or flush the stream if you need the data now.
/// This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_AudioStreamClear
/// 
/// SDL_FreeAudioStream</remarks>
SDL_AudioStreamAvailable: function(stream: PSDL_AudioStream): Integer; cdecl;

/// <summary>Tell the stream that you're done sending data, and anything being buffered
/// should be converted/resampled and made available immediately.</summary>
/// <remarks>It is legal to add more data to a stream after flushing, but there will be
/// audio gaps in the output. Generally this is intended to signal the end of
/// input, so the complete output becomes available.
/// This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamClear
/// 
/// SDL_FreeAudioStream</remarks>
SDL_AudioStreamFlush: function(stream: PSDL_AudioStream): Integer; cdecl;

/// <summary>Clear any pending data in the stream without converting it</summary>
/// <remarks>This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_FreeAudioStream</remarks>
SDL_AudioStreamClear: procedure(stream: PSDL_AudioStream); cdecl;

/// <summary>Free an audio stream</summary>
/// <remarks>This function is available since SDL 2.0.7.
/// SDL_NewAudioStream
/// 
/// SDL_AudioStreamPut
/// 
/// SDL_AudioStreamGet
/// 
/// SDL_AudioStreamAvailable
/// 
/// SDL_AudioStreamFlush
/// 
/// SDL_AudioStreamClear</remarks>
SDL_FreeAudioStream: procedure(stream: PSDL_AudioStream); cdecl;

/// <summary>This function is a legacy means of mixing audio.</summary>
/// <remarks>This function is equivalent to calling...
/// 
/// ```c
/// SDL_MixAudioFormat(dst, src, format, len, volume);
/// ```
/// 
/// ...where `format` is the obtained format of the audio device from the
/// legacy SDL_OpenAudio() function.</remarks>
/// <param name="dst">the destination for the mixed audio</param>
/// <param name="src">the source audio buffer to be mixed</param>
/// <param name="len">the length of the audio buffer in bytes</param>
/// <param name="volume">ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME
///   for full audio volume</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MixAudioFormat</remarks>
SDL_MixAudio: procedure(dst: PUint8; const src: PUint8; len: Uint32; volume: Integer); cdecl;

/// <summary>Mix audio data in a specified format.</summary>
/// <remarks>This takes an audio buffer `src` of `len` bytes of `format` data and mixes
/// it into `dst`, performing addition, volume adjustment, and overflow
/// clipping. The buffer pointed to by `dst` must also be `len` bytes of
/// `format` data.
/// 
/// This is provided for convenience -- you can mix your own audio data.
/// 
/// Do not use this function for mixing together more than two streams of
/// sample data. The output from repeated application of this function may be
/// distorted by clipping, because there is no accumulator with greater range
/// than the input (not to mention this being an inefficient way of doing it).
/// 
/// It is a common misconception that this function is required to write audio
/// data to an output stream in an audio callback. While you can do that,
/// SDL_MixAudioFormat() is really only needed when you're mixing a single
/// audio stream with a volume adjustment.</remarks>
/// <param name="dst">the destination for the mixed audio</param>
/// <param name="src">the source audio buffer to be mixed</param>
/// <param name="format">the SDL_AudioFormat structure representing the desired audio
///   format</param>
/// <param name="len">the length of the audio buffer in bytes</param>
/// <param name="volume">ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME
///   for full audio volume</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_MixAudioFormat: procedure(dst: PUint8; const src: PUint8; format: SDL_AudioFormat; len: Uint32; volume: Integer); cdecl;

/// <summary>Queue more audio on non-callback devices.</summary>
/// <remarks>If you are looking to retrieve queued audio from a non-callback capture
/// device, you want SDL_DequeueAudio() instead. SDL_QueueAudio() will return
/// -1 to signify an error if you use it with capture devices.
/// 
/// SDL offers two ways to feed audio to the device: you can either supply a
/// callback that SDL triggers with some frequency to obtain more audio (pull
/// method), or you can supply no callback, and then SDL will expect you to
/// supply data at regular intervals (push method) with this function.
/// 
/// There are no limits on the amount of data you can queue, short of
/// exhaustion of address space. Queued data will drain to the device as
/// necessary without further intervention from you. If the device needs audio
/// but there is not enough queued, it will play silence to make up the
/// difference. This means you will have skips in your audio playback if you
/// aren't routinely queueing sufficient data.
/// 
/// This function copies the supplied data, so you are safe to free it when the
/// function returns. This function is thread-safe, but queueing to the same
/// device from two threads at once does not promise which buffer will be
/// queued first.
/// 
/// You may not queue audio on a device that is using an application-supplied
/// callback; doing so returns an error. You have to use the audio callback or
/// queue audio with this function, but not both.
/// 
/// You should not call SDL_LockAudio() on the device before queueing; SDL
/// handles locking internally for this function.
/// 
/// Note that SDL2 does not support planar audio. You will need to resample
/// from planar audio formats into a non-planar one (see SDL_AudioFormat)
/// before queuing audio.</remarks>
/// <param name="dev">the device ID to which we will queue audio</param>
/// <param name="data">the data to queue to the device for later playback</param>
/// <param name="len">the number of bytes (not samples!) to which `data` points</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_ClearQueuedAudio
/// 
/// SDL_GetQueuedAudioSize</remarks>
SDL_QueueAudio: function(dev: SDL_AudioDeviceID; const data: Pointer; len: Uint32): Integer; cdecl;

/// <summary>Dequeue more audio on non-callback devices.</summary>
/// <remarks>If you are looking to queue audio for output on a non-callback playback
/// device, you want SDL_QueueAudio() instead. SDL_DequeueAudio() will always
/// return 0 if you use it with playback devices.
/// 
/// SDL offers two ways to retrieve audio from a capture device: you can either
/// supply a callback that SDL triggers with some frequency as the device
/// records more audio data, (push method), or you can supply no callback, and
/// then SDL will expect you to retrieve data at regular intervals (pull
/// method) with this function.
/// 
/// There are no limits on the amount of data you can queue, short of
/// exhaustion of address space. Data from the device will keep queuing as
/// necessary without further intervention from you. This means you will
/// eventually run out of memory if you aren't routinely dequeueing data.
/// 
/// Capture devices will not queue data when paused; if you are expecting to
/// not need captured audio for some length of time, use SDL_PauseAudioDevice()
/// to stop the capture device from queueing more data. This can be useful
/// during, say, level loading times. When unpaused, capture devices will start
/// queueing data from that point, having flushed any capturable data available
/// while paused.
/// 
/// This function is thread-safe, but dequeueing from the same device from two
/// threads at once does not promise which thread will dequeue data first.
/// 
/// You may not dequeue audio from a device that is using an
/// application-supplied callback; doing so returns an error. You have to use
/// the audio callback, or dequeue audio with this function, but not both.
/// 
/// You should not call SDL_LockAudio() on the device before dequeueing; SDL
/// handles locking internally for this function.</remarks>
/// <param name="dev">the device ID from which we will dequeue audio</param>
/// <param name="data">a pointer into where audio data should be copied</param>
/// <param name="len">the number of bytes (not samples!) to which (data) points</param>
/// <returns>the number of bytes dequeued, which could be less than requested;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_ClearQueuedAudio
/// 
/// SDL_GetQueuedAudioSize</remarks>
SDL_DequeueAudio: function(dev: SDL_AudioDeviceID; data: Pointer; len: Uint32): Uint32; cdecl;

/// <summary>Get the number of bytes of still-queued audio.</summary>
/// <remarks>For playback devices: this is the number of bytes that have been queued for
/// playback with SDL_QueueAudio(), but have not yet been sent to the hardware.
/// 
/// Once we've sent it to the hardware, this function can not decide the exact
/// byte boundary of what has been played. It's possible that we just gave the
/// hardware several kilobytes right before you called this function, but it
/// hasn't played any of it yet, or maybe half of it, etc.
/// 
/// For capture devices, this is the number of bytes that have been captured by
/// the device and are waiting for you to dequeue. This number may grow at any
/// time, so this only informs of the lower-bound of available data.
/// 
/// You may not queue or dequeue audio on a device that is using an
/// application-supplied callback; calling this function on such a device
/// always returns 0. You have to use the audio callback or queue audio, but
/// not both.
/// 
/// You should not call SDL_LockAudio() on the device before querying; SDL
/// handles locking internally for this function.</remarks>
/// <param name="dev">the device ID of which we will query queued audio size</param>
/// <returns>the number of bytes (not samples!) of queued audio.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_ClearQueuedAudio
/// 
/// SDL_QueueAudio
/// 
/// SDL_DequeueAudio</remarks>
SDL_GetQueuedAudioSize: function(dev: SDL_AudioDeviceID): Uint32; cdecl;

/// <summary>Drop any queued audio data waiting to be sent to the hardware.</summary>
/// <remarks>Immediately after this call, SDL_GetQueuedAudioSize() will return 0. For
/// output devices, the hardware will start playing silence if more audio isn't
/// queued. For capture devices, the hardware will start filling the empty
/// queue with new data if the capture device isn't paused.
/// 
/// This will not prevent playback of queued audio that's already been sent to
/// the hardware, as we can not undo that, so expect there to be some fraction
/// of a second of audio that might still be heard. This can be useful if you
/// want to, say, drop any pending music or any unprocessed microphone input
/// during a level change in your game.
/// 
/// You may not queue or dequeue audio on a device that is using an
/// application-supplied callback; calling this function on such a device
/// always returns 0. You have to use the audio callback or queue audio, but
/// not both.
/// 
/// You should not call SDL_LockAudio() on the device before clearing the
/// queue; SDL handles locking internally for this function.
/// 
/// This function always succeeds and thus returns void.</remarks>
/// <param name="dev">the device ID of which to clear the audio queue</param></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_GetQueuedAudioSize
/// 
/// SDL_QueueAudio
/// 
/// SDL_DequeueAudio</remarks>
SDL_ClearQueuedAudio: procedure(dev: SDL_AudioDeviceID); cdecl;

/// <summary>This function is a legacy means of locking the audio device.</summary>
/// <remarks>New programs might want to use SDL_LockAudioDevice() instead. This function
/// is equivalent to calling...
/// 
/// ```c
/// SDL_LockAudioDevice(1);
/// ```
/// 
/// ...and is only useful if you used the legacy SDL_OpenAudio() function.
/// This function is available since SDL 2.0.0.
/// SDL_LockAudioDevice
/// 
/// SDL_UnlockAudio
/// 
/// SDL_UnlockAudioDevice</remarks>
SDL_LockAudio: procedure(); cdecl;

/// <summary>Use this function to lock out the audio callback function for a specified
/// device.</summary>
/// <remarks>The lock manipulated by these functions protects the audio callback
/// function specified in SDL_OpenAudioDevice(). During a
/// SDL_LockAudioDevice()/SDL_UnlockAudioDevice() pair, you can be guaranteed
/// that the callback function for that device is not running, even if the
/// device is not paused. While a device is locked, any other unpaused,
/// unlocked devices may still run their callbacks.
/// 
/// Calling this function from inside your audio callback is unnecessary. SDL
/// obtains this lock before calling your function, and releases it when the
/// function returns.
/// 
/// You should not hold the lock longer than absolutely necessary. If you hold
/// it too long, you'll experience dropouts in your audio playback. Ideally,
/// your application locks the device, sets a few variables and unlocks again.
/// Do not do heavy work while holding the lock for a device.
/// 
/// It is safe to lock the audio device multiple times, as long as you unlock
/// it an equivalent number of times. The callback will not run until the
/// device has been unlocked completely in this way. If your application fails
/// to unlock the device appropriately, your callback will never run, you might
/// hear repeating bursts of audio, and SDL_CloseAudioDevice() will probably
/// deadlock.
/// 
/// Internally, the audio device lock is a mutex; if you lock from two threads
/// at once, not only will you block the audio callback, you'll block the other
/// thread.</remarks>
/// <param name="dev">the ID of the device to be locked</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_UnlockAudioDevice</remarks>
SDL_LockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;

/// <summary>This function is a legacy means of unlocking the audio device.</summary>
/// <remarks>New programs might want to use SDL_UnlockAudioDevice() instead. This
/// function is equivalent to calling...
/// 
/// ```c
/// SDL_UnlockAudioDevice(1);
/// ```
/// 
/// ...and is only useful if you used the legacy SDL_OpenAudio() function.
/// This function is available since SDL 2.0.0.
/// SDL_LockAudio
/// 
/// SDL_UnlockAudioDevice</remarks>
SDL_UnlockAudio: procedure(); cdecl;

/// <summary>Use this function to unlock the audio callback function for a specified
/// device.</summary>
/// <remarks>This function should be paired with a previous SDL_LockAudioDevice() call.</remarks>
/// <param name="dev">the ID of the device to be unlocked</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LockAudioDevice</remarks>
SDL_UnlockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;

/// <summary>This function is a legacy means of closing the audio device.</summary>
/// <remarks>This function is equivalent to calling...
/// 
/// ```c
/// SDL_CloseAudioDevice(1);
/// ```
/// 
/// ...and is only useful if you used the legacy SDL_OpenAudio() function.
/// This function is available since SDL 2.0.0.
/// SDL_OpenAudio</remarks>
SDL_CloseAudio: procedure(); cdecl;

/// <summary>Use this function to shut down audio processing and close the audio device.</summary>
/// <remarks>The application should close open audio devices once they are no longer
/// needed. Calling this function will wait until the device's audio callback
/// is not running, release the audio hardware and then clean up internal
/// state. No further audio will play from this device once this function
/// returns.
/// 
/// This function may block briefly while pending audio data is played by the
/// hardware, so that applications don't drop the last buffer of data they
/// supplied.
/// 
/// The device ID is invalid as soon as the device is closed, and is eligible
/// for reuse in a new SDL_OpenAudioDevice() call immediately.</remarks>
/// <param name="dev">an audio device previously opened with SDL_OpenAudioDevice()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_OpenAudioDevice</remarks>
SDL_CloseAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;

/// <summary>Put UTF-8 text into the clipboard.</summary>
/// <param name="text">the text to store in the clipboard</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetClipboardText
/// 
/// SDL_HasClipboardText</remarks>
SDL_SetClipboardText: function(const text: PUTF8Char): Integer; cdecl;

/// <summary>Get UTF-8 text from the clipboard, which must be freed with SDL_free().</summary>
/// <remarks>This functions returns empty string if there was not enough memory left for
/// a copy of the clipboard's content.</remarks>
/// <returns>the clipboard text on success or an empty string on failure; call
///   SDL_GetError() for more information. Caller must call SDL_free()
///   on the returned pointer when done with it (even if there was an
///   error).</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasClipboardText
/// 
/// SDL_SetClipboardText</remarks>
SDL_GetClipboardText: function(): PUTF8Char; cdecl;

/// <summary>Query whether the clipboard exists and contains a non-empty text string.</summary>
/// <returns>SDL_TRUE if the clipboard has text, or SDL_FALSE if it does not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetClipboardText
/// 
/// SDL_SetClipboardText</remarks>
SDL_HasClipboardText: function(): SDL_bool; cdecl;

/// <summary>Get the number of CPU cores available.</summary>
/// <returns>the total number of logical CPU cores. On CPUs that include
///   technologies such as hyperthreading, the number of logical cores
///   may be more than the number of physical cores.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetCPUCount: function(): Integer; cdecl;

/// <summary>Determine the L1 cache line size of the CPU.</summary>
/// <remarks>This is useful for determining multi-threaded structure padding or SIMD
/// prefetch sizes.</remarks>
/// <returns>the L1 cache line size of the CPU, in bytes.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetCPUCacheLineSize: function(): Integer; cdecl;

/// <summary>Determine whether the CPU has the RDTSC instruction.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has the RDTSC instruction or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasRDTSC: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has AltiVec features.</summary>
/// <remarks>This always returns false on CPUs that aren't using PowerPC instruction
/// sets.</remarks>
/// <returns>SDL_TRUE if the CPU has AltiVec features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasAltiVec: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has MMX features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasMMX: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has 3DNow! features.</summary>
/// <remarks>This always returns false on CPUs that aren't using AMD instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has 3DNow! features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_Has3DNow: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has SSE features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasSSE: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has SSE2 features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasSSE2: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has SSE3 features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasSSE3: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has SSE4.1 features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE42</remarks>
SDL_HasSSE41: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has SSE4.2 features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41</remarks>
SDL_HasSSE42: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has AVX features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX2
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasAVX: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has AVX2 features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_Has3DNow
/// 
/// SDL_HasAltiVec
/// 
/// SDL_HasAVX
/// 
/// SDL_HasMMX
/// 
/// SDL_HasRDTSC
/// 
/// SDL_HasSSE
/// 
/// SDL_HasSSE2
/// 
/// SDL_HasSSE3
/// 
/// SDL_HasSSE41
/// 
/// SDL_HasSSE42</remarks>
SDL_HasAVX2: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has AVX-512F (foundation) features.</summary>
/// <remarks>This always returns false on CPUs that aren't using Intel instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has AVX-512F features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.
/// SDL_HasAVX</remarks>
SDL_HasAVX512F: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has ARM SIMD (ARMv6) features.</summary>
/// <remarks>This is different from ARM NEON, which is a different instruction set.
/// 
/// This always returns false on CPUs that aren't using ARM instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has ARM SIMD features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.
/// SDL_HasNEON</remarks>
SDL_HasARMSIMD: function(): SDL_bool; cdecl;

/// <summary>Determine whether the CPU has NEON (ARM SIMD) features.</summary>
/// <remarks>This always returns false on CPUs that aren't using ARM instruction sets.</remarks>
/// <returns>SDL_TRUE if the CPU has ARM NEON features or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_HasNEON: function(): SDL_bool; cdecl;

/// <summary>Get the amount of RAM configured in the system.</summary>
/// <returns>the amount of RAM configured in the system in MB.</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.</remarks>
SDL_GetSystemRAM: function(): Integer; cdecl;

/// <summary>Report the alignment this system needs for SIMD allocations.</summary>
/// <remarks>This will return the minimum number of bytes to which a pointer must be
/// aligned to be compatible with SIMD instructions on the current machine. For
/// example, if the machine supports SSE only, it will return 16, but if it
/// supports AVX-512F, it'll return 64 (etc). This only reports values for
/// instruction sets SDL knows about, so if your SDL build doesn't have
/// SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and
/// not 64 for the AVX-512 instructions that exist but SDL doesn't know about.
/// Plan accordingly.</remarks>
/// <returns>the alignment in bytes needed for available, known SIMD
///   instructions.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_SIMDGetAlignment: function(): NativeUInt; cdecl;

/// <summary>Allocate memory in a SIMD-friendly way.</summary>
/// <remarks>This will allocate a block of memory that is suitable for use with SIMD
/// instructions. Specifically, it will be properly aligned and padded for the
/// system's supported vector instructions.
/// 
/// The memory returned will be padded such that it is safe to read or write an
/// incomplete vector at the end of the memory block. This can be useful so you
/// don't have to drop back to a scalar fallback at the end of your SIMD
/// processing loop to deal with the final elements without overflowing the
/// allocated buffer.
/// 
/// You must free this memory with SDL_FreeSIMD(), not free() or SDL_free() or
/// delete[], etc.
/// 
/// Note that SDL will only deal with SIMD instruction sets it is aware of; for
/// example, SDL 2.0.8 knows that SSE wants 16-byte vectors (SDL_HasSSE()), and
/// AVX2 wants 32 bytes (SDL_HasAVX2()), but doesn't know that AVX-512 wants
/// 64. To be clear: if you can't decide to use an instruction set with an
/// SDL_Has*() function, don't use that instruction set with memory allocated
/// through here.
/// 
/// SDL_AllocSIMD(0) will return a non-NULL pointer, assuming the system isn't
/// out of memory, but you are not allowed to dereference it (because you only
/// own zero bytes of that buffer).</remarks>
/// <param name="len">The length, in bytes, of the block to allocate. The actual
///   allocated block might be larger due to padding, etc.</param>
/// <returns>a pointer to the newly-allocated block, NULL if out of memory.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_SIMDAlignment
/// 
/// SDL_SIMDRealloc
/// 
/// SDL_SIMDFree</remarks>
SDL_SIMDAlloc: function(const len: NativeUInt): Pointer; cdecl;

/// <summary>Reallocate memory obtained from SDL_SIMDAlloc</summary>
/// <remarks>It is not valid to use this function on a pointer from anything but
/// SDL_SIMDAlloc(). It can't be used on pointers from malloc, realloc,
/// SDL_malloc, memalign, new[], etc.</remarks>
/// <param name="mem">The pointer obtained from SDL_SIMDAlloc. This function also
///   accepts NULL, at which point this function is the same as
///   calling SDL_SIMDAlloc with a NULL pointer.</param>
/// <param name="len">The length, in bytes, of the block to allocated. The actual
///   allocated block might be larger due to padding, etc. Passing 0
///   will return a non-NULL pointer, assuming the system isn't out of
///   memory.</param>
/// <returns>a pointer to the newly-reallocated block, NULL if out of memory.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_SIMDAlignment
/// 
/// SDL_SIMDAlloc
/// 
/// SDL_SIMDFree</remarks>
SDL_SIMDRealloc: function(mem: Pointer; const len: NativeUInt): Pointer; cdecl;

/// <summary>Deallocate memory obtained from SDL_SIMDAlloc</summary>
/// <remarks>It is not valid to use this function on a pointer from anything but
/// SDL_SIMDAlloc() or SDL_SIMDRealloc(). It can't be used on pointers from
/// malloc, realloc, SDL_malloc, memalign, new[], etc.
/// 
/// However, SDL_SIMDFree(NULL) is a legal no-op.
/// 
/// The memory pointed to by `ptr` is no longer valid for access upon return,
/// and may be returned to the system or reused by a future allocation. The
/// pointer passed to this function is no longer safe to dereference once this
/// function returns, and should be discarded.</remarks>
/// <param name="ptr">The pointer, returned from SDL_SIMDAlloc or SDL_SIMDRealloc, to
///   deallocate. NULL is a legal no-op.</param></summary>
/// <remarks>This function is available since SDL 2.0.10.
/// SDL_SIMDAlloc
/// 
/// SDL_SIMDRealloc</remarks>
SDL_SIMDFree: procedure(ptr: Pointer); cdecl;

/// <summary>Get the human readable name of a pixel format.</summary>
/// <param name="format">the pixel format to query</param>
/// <returns>the human readable name of the specified pixel format or
///   `SDL_PIXELFORMAT_UNKNOWN` if the format isn't recognized.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetPixelFormatName: function(format: Uint32): PUTF8Char; cdecl;

/// <summary>Convert one of the enumerated pixel formats to a bpp value and RGBA masks.</summary>
/// <param name="format">one of the SDL_PixelFormatEnum values</param>
/// <param name="bpp">a bits per pixel value; usually 15, 16, or 32</param>
/// <param name="Rmask">a pointer filled in with the red mask for the format</param>
/// <param name="Gmask">a pointer filled in with the green mask for the format</param>
/// <param name="Bmask">a pointer filled in with the blue mask for the format</param>
/// <param name="Amask">a pointer filled in with the alpha mask for the format</param>
/// <returns>SDL_TRUE on success or SDL_FALSE if the conversion wasn't
///   possible; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MasksToPixelFormatEnum</remarks>
SDL_PixelFormatEnumToMasks: function(format: Uint32; bpp: PInteger; Rmask: PUint32; Gmask: PUint32; Bmask: PUint32; Amask: PUint32): SDL_bool; cdecl;

/// <summary>Convert a bpp value and RGBA masks to an enumerated pixel format.</summary>
/// <remarks>This will return `SDL_PIXELFORMAT_UNKNOWN` if the conversion wasn't
/// possible.</remarks>
/// <param name="bpp">a bits per pixel value; usually 15, 16, or 32</param>
/// <param name="Rmask">the red mask for the format</param>
/// <param name="Gmask">the green mask for the format</param>
/// <param name="Bmask">the blue mask for the format</param>
/// <param name="Amask">the alpha mask for the format</param>
/// <returns>one of the SDL_PixelFormatEnum values</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PixelFormatEnumToMasks</remarks>
SDL_MasksToPixelFormatEnum: function(bpp: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): Uint32; cdecl;

/// <summary>Create an SDL_PixelFormat structure corresponding to a pixel format.</summary>
/// <remarks>Returned structure may come from a shared global cache (i.e. not newly
/// allocated), and hence should not be modified, especially the palette. Weird
/// errors such as `Blit combination not supported` may occur.</remarks>
/// <param name="pixel_format">one of the SDL_PixelFormatEnum values</param>
/// <returns>the new SDL_PixelFormat structure or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreeFormat</remarks>
SDL_AllocFormat: function(pixel_format: Uint32): PSDL_PixelFormat; cdecl;

/// <summary>Free an SDL_PixelFormat structure allocated by SDL_AllocFormat().</summary>
/// <param name="format">the SDL_PixelFormat structure to free</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocFormat</remarks>
SDL_FreeFormat: procedure(format: PSDL_PixelFormat); cdecl;

/// <summary>Create a palette structure with the specified number of color entries.</summary>
/// <remarks>The palette entries are initialized to white.</remarks>
/// <param name="ncolors">represents the number of color entries in the color palette</param>
/// <returns>a new SDL_Palette structure on success or NULL on failure (e.g. if
///   there wasn't enough memory); call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreePalette</remarks>
SDL_AllocPalette: function(ncolors: Integer): PSDL_Palette; cdecl;

/// <summary>Set the palette for a pixel format structure.</summary>
/// <param name="format">the SDL_PixelFormat structure that will use the palette</param>
/// <param name="palette">the SDL_Palette structure that will be used</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocPalette
/// 
/// SDL_FreePalette</remarks>
SDL_SetPixelFormatPalette: function(format: PSDL_PixelFormat; palette: PSDL_Palette): Integer; cdecl;

/// <summary>Set a range of colors in a palette.</summary>
/// <param name="palette">the SDL_Palette structure to modify</param>
/// <param name="colors">an array of SDL_Color structures to copy into the palette</param>
/// <param name="firstcolor">the index of the first palette entry to modify</param>
/// <param name="ncolors">the number of entries to modify</param>
/// <returns>0 on success or a negative error code if not all of the colors
///   could be set; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocPalette
/// 
/// SDL_CreateRGBSurface</remarks>
SDL_SetPaletteColors: function(palette: PSDL_Palette; const colors: PSDL_Color; firstcolor: Integer; ncolors: Integer): Integer; cdecl;

/// <summary>Free a palette created with SDL_AllocPalette().</summary>
/// <param name="palette">the SDL_Palette structure to be freed</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocPalette</remarks>
SDL_FreePalette: procedure(palette: PSDL_Palette); cdecl;

/// <summary>Map an RGB triple to an opaque pixel value for a given pixel format.</summary>
/// <remarks>This function maps the RGB color value to the specified pixel format and
/// returns the pixel value best approximating the given RGB color value for
/// the given pixel format.
/// 
/// If the format has a palette (8-bit) the index of the closest matching color
/// in the palette will be returned.
/// 
/// If the specified pixel format has an alpha component it will be returned as
/// all 1 bits (fully opaque).
/// 
/// If the pixel format bpp (color depth) is less than 32-bpp then the unused
/// upper bits of the return value can safely be ignored (e.g., with a 16-bpp
/// format the return value can be assigned to a Uint16, and similarly a Uint8
/// for an 8-bpp format).</remarks>
/// <param name="format">an SDL_PixelFormat structure describing the pixel format</param>
/// <param name="r">the red component of the pixel in the range 0-255</param>
/// <param name="g">the green component of the pixel in the range 0-255</param>
/// <param name="b">the blue component of the pixel in the range 0-255</param>
/// <returns>a pixel value</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRGB
/// 
/// SDL_GetRGBA
/// 
/// SDL_MapRGBA</remarks>
SDL_MapRGB: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8): Uint32; cdecl;

/// <summary>Map an RGBA quadruple to a pixel value for a given pixel format.</summary>
/// <remarks>This function maps the RGBA color value to the specified pixel format and
/// returns the pixel value best approximating the given RGBA color value for
/// the given pixel format.
/// 
/// If the specified pixel format has no alpha component the alpha value will
/// be ignored (as it will be in formats with a palette).
/// 
/// If the format has a palette (8-bit) the index of the closest matching color
/// in the palette will be returned.
/// 
/// If the pixel format bpp (color depth) is less than 32-bpp then the unused
/// upper bits of the return value can safely be ignored (e.g., with a 16-bpp
/// format the return value can be assigned to a Uint16, and similarly a Uint8
/// for an 8-bpp format).</remarks>
/// <param name="format">an SDL_PixelFormat structure describing the format of the
///   pixel</param>
/// <param name="r">the red component of the pixel in the range 0-255</param>
/// <param name="g">the green component of the pixel in the range 0-255</param>
/// <param name="b">the blue component of the pixel in the range 0-255</param>
/// <param name="a">the alpha component of the pixel in the range 0-255</param>
/// <returns>a pixel value</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRGB
/// 
/// SDL_GetRGBA
/// 
/// SDL_MapRGB</remarks>
SDL_MapRGBA: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32; cdecl;

/// <summary>Get RGB values from a pixel in the specified format.</summary>
/// <remarks>This function uses the entire 8-bit [0..255] range when converting color
/// components from pixel formats with less than 8-bits per RGB component
/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).</remarks>
/// <param name="pixel">a pixel value</param>
/// <param name="format">an SDL_PixelFormat structure describing the format of the
///   pixel</param>
/// <param name="r">a pointer filled in with the red component</param>
/// <param name="g">a pointer filled in with the green component</param>
/// <param name="b">a pointer filled in with the blue component</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRGBA
/// 
/// SDL_MapRGB
/// 
/// SDL_MapRGBA</remarks>
SDL_GetRGB: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8); cdecl;

/// <summary>Get RGBA values from a pixel in the specified format.</summary>
/// <remarks>This function uses the entire 8-bit [0..255] range when converting color
/// components from pixel formats with less than 8-bits per RGB component
/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
/// 
/// If the surface has no alpha component, the alpha will be returned as 0xff
/// (100% opaque).</remarks>
/// <param name="pixel">a pixel value</param>
/// <param name="format">an SDL_PixelFormat structure describing the format of the
///   pixel</param>
/// <param name="r">a pointer filled in with the red component</param>
/// <param name="g">a pointer filled in with the green component</param>
/// <param name="b">a pointer filled in with the blue component</param>
/// <param name="a">a pointer filled in with the alpha component</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRGB
/// 
/// SDL_MapRGB
/// 
/// SDL_MapRGBA</remarks>
SDL_GetRGBA: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8; a: PUint8); cdecl;

/// <summary>Calculate a 256 entry gamma ramp for a gamma value.</summary>
/// <param name="gamma">a gamma value where 0.0 is black and 1.0 is identity</param>
/// <param name="ramp">an array of 256 values filled in with the gamma ramp</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowGammaRamp</remarks>
SDL_CalculateGammaRamp: procedure(gamma: Single; ramp: PUint16); cdecl;

/// <summary>Determine whether two rectangles intersect.</summary>
/// <remarks>If either pointer is NULL the function will return SDL_FALSE.</remarks>
/// <param name="A">an SDL_Rect structure representing the first rectangle</param>
/// <param name="B">an SDL_Rect structure representing the second rectangle</param>
/// <returns>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_IntersectRect</remarks>
SDL_HasIntersection: function(const A: PSDL_Rect; const B: PSDL_Rect): SDL_bool; cdecl;

/// <summary>Calculate the intersection of two rectangles.</summary>
/// <remarks>If `result` is NULL then this function will return SDL_FALSE.</remarks>
/// <param name="A">an SDL_Rect structure representing the first rectangle</param>
/// <param name="B">an SDL_Rect structure representing the second rectangle</param>
/// <param name="result">an SDL_Rect structure filled in with the intersection of
///   rectangles `A` and `B`</param>
/// <returns>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasIntersection</remarks>
SDL_IntersectRect: function(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;

/// <summary>Calculate the union of two rectangles.</summary>
/// <param name="A">an SDL_Rect structure representing the first rectangle</param>
/// <param name="B">an SDL_Rect structure representing the second rectangle</param>
/// <param name="result">an SDL_Rect structure filled in with the union of rectangles
///   `A` and `B`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_UnionRect: procedure(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect); cdecl;

/// <summary>Calculate a minimal rectangle enclosing a set of points.</summary>
/// <remarks>If `clip` is not NULL then only points inside of the clipping rectangle are
/// considered.</remarks>
/// <param name="points">an array of SDL_Point structures representing points to be
///   enclosed</param>
/// <param name="count">the number of structures in the `points` array</param>
/// <param name="clip">an SDL_Rect used for clipping or NULL to enclose all points</param>
/// <param name="result">an SDL_Rect structure filled in with the minimal enclosing
///   rectangle</param>
/// <returns>SDL_TRUE if any points were enclosed or SDL_FALSE if all the
///   points were outside of the clipping rectangle.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_EnclosePoints: function(const points: PSDL_Point; count: Integer; const clip: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;

/// <summary>Calculate the intersection of a rectangle and line segment.</summary>
/// <remarks>This function is used to clip a line segment to a rectangle. A line segment
/// contained entirely within the rectangle or that does not intersect will
/// remain unchanged. A line segment that crosses the rectangle at either or
/// both ends will be clipped to the boundary of the rectangle and the new
/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.</remarks>
/// <param name="rect">an SDL_Rect structure representing the rectangle to intersect</param>
/// <param name="X1">a pointer to the starting X-coordinate of the line</param>
/// <param name="Y1">a pointer to the starting Y-coordinate of the line</param>
/// <param name="X2">a pointer to the ending X-coordinate of the line</param>
/// <param name="Y2">a pointer to the ending Y-coordinate of the line</param>
/// <returns>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_IntersectRectAndLine: function(const rect: PSDL_Rect; X1: PInteger; Y1: PInteger; X2: PInteger; Y2: PInteger): SDL_bool; cdecl;

/// <summary>Compose a custom blend mode for renderers.</summary>
/// <remarks>The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept
/// the SDL_BlendMode returned by this function if the renderer supports it.
/// 
/// A blend mode controls how the pixels from a drawing operation (source) get
/// combined with the pixels from the render target (destination). First, the
/// components of the source and destination pixels get multiplied with their
/// blend factors. Then, the blend operation takes the two products and
/// calculates the result that will get stored in the render target.
/// 
/// Expressed in pseudocode, it would look like this:
/// 
/// ```c
/// dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);
/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);
/// ```
/// 
/// Where the functions `colorOperation(src, dst)` and `alphaOperation(src,
/// dst)` can return one of the following:
/// 
/// - `src + dst`
/// - `src - dst`
/// - `dst - src`
/// - `min(src, dst)`
/// - `max(src, dst)`
/// 
/// The red, green, and blue components are always multiplied with the first,
/// second, and third components of the SDL_BlendFactor, respectively. The
/// fourth component is not used.
/// 
/// The alpha component is always multiplied with the fourth component of the
/// SDL_BlendFactor. The other components are not used in the alpha
/// calculation.
/// 
/// Support for these blend modes varies for each renderer. To check if a
/// specific SDL_BlendMode is supported, create a renderer and pass it to
/// either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will
/// return with an error if the blend mode is not supported.
/// 
/// This list describes the support of custom blend modes for each renderer in
/// SDL 2.0.6. All renderers support the four blend modes listed in the
/// SDL_BlendMode enumeration.
/// 
/// - **direct3d**: Supports `SDL_BLENDOPERATION_ADD` with all factors.
/// - **direct3d11**: Supports all operations with all factors. However, some
/// factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and
/// `SDL_BLENDOPERATION_MAXIMUM`.
/// - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all
/// factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL
/// 2.0.6.
/// - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all
/// factors. Color and alpha factors need to be the same. OpenGL ES 1
/// implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`
/// and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha
/// operations being different from each other. May support color and alpha
/// factors being different from each other.
/// - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,
/// `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`
/// operations with all factors.
/// - **psp**: No custom blend mode support.
/// - **software**: No custom blend mode support.
/// 
/// Some renderers do not provide an alpha component for the default render
/// target. The `SDL_BLENDFACTOR_DST_ALPHA` and
/// `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this
/// case.</remarks>
/// <param name="srcColorFactor">the SDL_BlendFactor applied to the red, green, and
///   blue components of the source pixels</param>
/// <param name="dstColorFactor">the SDL_BlendFactor applied to the red, green, and
///   blue components of the destination pixels</param>
/// <param name="colorOperation">the SDL_BlendOperation used to combine the red,
///   green, and blue components of the source and
///   destination pixels</param>
/// <param name="srcAlphaFactor">the SDL_BlendFactor applied to the alpha component of
///   the source pixels</param>
/// <param name="dstAlphaFactor">the SDL_BlendFactor applied to the alpha component of
///   the destination pixels</param>
/// <param name="alphaOperation">the SDL_BlendOperation used to combine the alpha
///   component of the source and destination pixels</param>
/// <returns>an SDL_BlendMode that represents the chosen factors and
///   operations.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_GetRenderDrawBlendMode
/// 
/// SDL_SetTextureBlendMode
/// 
/// SDL_GetTextureBlendMode</remarks>
SDL_ComposeCustomBlendMode: function(srcColorFactor: SDL_BlendFactor; dstColorFactor: SDL_BlendFactor; colorOperation: SDL_BlendOperation; srcAlphaFactor: SDL_BlendFactor; dstAlphaFactor: SDL_BlendFactor; alphaOperation: SDL_BlendOperation): SDL_BlendMode; cdecl;

/// <summary>Allocate a new RGB surface.</summary>
/// <remarks>If `depth` is 4 or 8 bits, an empty palette is allocated for the surface.
/// If `depth` is greater than 8 bits, the pixel format is set using the
/// [RGBA]mask parameters.
/// 
/// The [RGBA]mask parameters are the bitmasks used to extract that color from
/// a pixel. For instance, `Rmask` being 0xFF000000 means the red data is
/// stored in the most significant byte. Using zeros for the RGB masks sets a
/// default value, based on the depth. For example:
/// 
/// ```c++
/// SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);
/// ```
/// 
/// However, using zero for the Amask results in an Amask of 0.
/// 
/// By default surfaces with an alpha mask are set up for blending as with:
/// 
/// ```c++
/// SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)
/// ```
/// 
/// You can change this by calling SDL_SetSurfaceBlendMode() and selecting a
/// different `blendMode`.</remarks>
/// <param name="flags">the flags are unused and should be set to 0</param>
/// <param name="width">the width of the surface</param>
/// <param name="height">the height of the surface</param>
/// <param name="depth">the depth of the surface in bits</param>
/// <param name="Rmask">the red mask for the pixels</param>
/// <param name="Gmask">the green mask for the pixels</param>
/// <param name="Bmask">the blue mask for the pixels</param>
/// <param name="Amask">the alpha mask for the pixels</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRGBSurfaceFrom
/// 
/// SDL_CreateRGBSurfaceWithFormat
/// 
/// SDL_FreeSurface</remarks>
SDL_CreateRGBSurface: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;

/// <summary>Allocate a new RGB surface with a specific pixel format.</summary>
/// <remarks>This function operates mostly like SDL_CreateRGBSurface(), except instead
/// of providing pixel color masks, you provide it with a predefined format
/// from SDL_PixelFormatEnum.</remarks>
/// <param name="flags">the flags are unused and should be set to 0</param>
/// <param name="width">the width of the surface</param>
/// <param name="height">the height of the surface</param>
/// <param name="depth">the depth of the surface in bits</param>
/// <param name="format">the SDL_PixelFormatEnum for the new surface's pixel format.</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_CreateRGBSurface
/// 
/// SDL_CreateRGBSurfaceFrom
/// 
/// SDL_FreeSurface</remarks>
SDL_CreateRGBSurfaceWithFormat: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; format: Uint32): PSDL_Surface; cdecl;

/// <summary>Allocate a new RGB surface with existing pixel data.</summary>
/// <remarks>This function operates mostly like SDL_CreateRGBSurface(), except it does
/// not allocate memory for the pixel data, instead the caller provides an
/// existing buffer of data for the surface to use.
/// 
/// No copy is made of the pixel data. Pixel data is not managed automatically;
/// you must free the surface before you free the pixel data.</remarks>
/// <param name="pixels">a pointer to existing pixel data</param>
/// <param name="width">the width of the surface</param>
/// <param name="height">the height of the surface</param>
/// <param name="depth">the depth of the surface in bits</param>
/// <param name="pitch">the pitch of the surface in bytes</param>
/// <param name="Rmask">the red mask for the pixels</param>
/// <param name="Gmask">the green mask for the pixels</param>
/// <param name="Bmask">the blue mask for the pixels</param>
/// <param name="Amask">the alpha mask for the pixels</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRGBSurface
/// 
/// SDL_CreateRGBSurfaceWithFormat
/// 
/// SDL_FreeSurface</remarks>
SDL_CreateRGBSurfaceFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;

/// <summary>Allocate a new RGB surface with with a specific pixel format and existing
/// pixel data.</summary>
/// <remarks>This function operates mostly like SDL_CreateRGBSurfaceFrom(), except
/// instead of providing pixel color masks, you provide it with a predefined
/// format from SDL_PixelFormatEnum.
/// 
/// No copy is made of the pixel data. Pixel data is not managed automatically;
/// you must free the surface before you free the pixel data.</remarks>
/// <param name="pixels">a pointer to existing pixel data</param>
/// <param name="width">the width of the surface</param>
/// <param name="height">the height of the surface</param>
/// <param name="depth">the depth of the surface in bits</param>
/// <param name="pitch">the pitch of the surface in bytes</param>
/// <param name="format">the SDL_PixelFormatEnum for the new surface's pixel format.</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_CreateRGBSurfaceFrom
/// 
/// SDL_CreateRGBSurfaceWithFormat
/// 
/// SDL_FreeSurface</remarks>
SDL_CreateRGBSurfaceWithFormatFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; format: Uint32): PSDL_Surface; cdecl;

/// <summary>Free an RGB surface.</summary>
/// <remarks>It is safe to pass NULL to this function.</remarks>
/// <param name="surface">the SDL_Surface to free.</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRGBSurface
/// 
/// SDL_CreateRGBSurfaceFrom
/// 
/// SDL_LoadBMP
/// 
/// SDL_LoadBMP_RW</remarks>
SDL_FreeSurface: procedure(surface: PSDL_Surface); cdecl;

/// <summary>Set the palette used by a surface.</summary>
/// <remarks>A single palette can be shared with many surfaces.</remarks>
/// <param name="surface">the SDL_Surface structure to update</param>
/// <param name="palette">the SDL_Palette structure to use</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_SetSurfacePalette: function(surface: PSDL_Surface; palette: PSDL_Palette): Integer; cdecl;

/// <summary>Set up a surface for directly accessing the pixels.</summary>
/// <remarks>Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to
/// and read from `surface->pixels`, using the pixel format stored in
/// `surface->format`. Once you are done accessing the surface, you should use
/// SDL_UnlockSurface() to release it.
/// 
/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to
/// 0, then you can read and write to the surface at any time, and the pixel
/// format of the surface will not change.</remarks>
/// <param name="surface">the SDL_Surface structure to be locked</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MUSTLOCK
/// 
/// SDL_UnlockSurface</remarks>
SDL_LockSurface: function(surface: PSDL_Surface): Integer; cdecl;

/// <summary>Release a surface after directly accessing the pixels.</summary>
/// <param name="surface">the SDL_Surface structure to be unlocked</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LockSurface</remarks>
SDL_UnlockSurface: procedure(surface: PSDL_Surface); cdecl;

/// <summary>Load a BMP image from a seekable SDL data stream.</summary>
/// <remarks>The new surface should be freed with SDL_FreeSurface(). Not doing so will
/// result in a memory leak.
/// 
/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.
/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap
/// from a file, convert it to an SDL_Surface and then close the file.</remarks>
/// <param name="src">the data stream for the surface</param>
/// <param name="freesrc">non-zero to close the stream after being read</param>
/// <returns>a pointer to a new SDL_Surface structure or NULL if there was an
///   error; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreeSurface
/// 
/// SDL_RWFromFile
/// 
/// SDL_LoadBMP
/// 
/// SDL_SaveBMP_RW</remarks>
SDL_LoadBMP_RW: function(src: PSDL_RWops; freesrc: Integer): PSDL_Surface; cdecl;

/// <summary>Save a surface to a seekable SDL data stream in BMP format.</summary>
/// <remarks>Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
/// BMP directly. Other RGB formats with 8-bit or higher get converted to a
/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
/// not supported.</remarks>
/// <param name="surface">the SDL_Surface structure containing the image to be saved</param>
/// <param name="dst">a data stream to save to</param>
/// <param name="freedst">non-zero to close the stream after being written</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadBMP_RW
/// 
/// SDL_SaveBMP</remarks>
SDL_SaveBMP_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer): Integer; cdecl;

/// <summary>Set the RLE acceleration hint for a surface.</summary>
/// <remarks>If RLE is enabled, color key and alpha blending blits are much faster, but
/// the surface must be locked before directly accessing the pixels.</remarks>
/// <param name="surface">the SDL_Surface structure to optimize</param>
/// <param name="flag">0 to disable, non-zero to enable RLE acceleration</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface
/// 
/// SDL_LockSurface
/// 
/// SDL_UnlockSurface</remarks>
SDL_SetSurfaceRLE: function(surface: PSDL_Surface; flag: Integer): Integer; cdecl;

/// <summary>Returns whether the surface is RLE enabled</summary>
/// <remarks>It is safe to pass a NULL `surface` here; it will return SDL_FALSE.</remarks>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <returns>SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_SetSurfaceRLE</remarks>
SDL_HasSurfaceRLE: function(surface: PSDL_Surface): SDL_bool; cdecl;

/// <summary>Set the color key (transparent pixel) in a surface.</summary>
/// <remarks>The color key defines a pixel value that will be treated as transparent in
/// a blit. For example, one can use this to specify that cyan pixels should be
/// considered transparent, and therefore not rendered.
/// 
/// It is a pixel of the format used by the surface, as generated by
/// SDL_MapRGB().
/// 
/// RLE acceleration can substantially speed up blitting of images with large
/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.</remarks>
/// <param name="surface">the SDL_Surface structure to update</param>
/// <param name="flag">SDL_TRUE to enable color key, SDL_FALSE to disable color key</param>
/// <param name="key">the transparent pixel</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface
/// 
/// SDL_GetColorKey</remarks>
SDL_SetColorKey: function(surface: PSDL_Surface; flag: Integer; key: Uint32): Integer; cdecl;

/// <summary>Returns whether the surface has a color key</summary>
/// <remarks>It is safe to pass a NULL `surface` here; it will return SDL_FALSE.</remarks>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <returns>SDL_TRUE if the surface has a color key, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.
/// SDL_SetColorKey
/// 
/// SDL_GetColorKey</remarks>
SDL_HasColorKey: function(surface: PSDL_Surface): SDL_bool; cdecl;

/// <summary>Get the color key (transparent pixel) for a surface.</summary>
/// <remarks>The color key is a pixel of the format used by the surface, as generated by
/// SDL_MapRGB().
/// 
/// If the surface doesn't have color key enabled this function returns -1.</remarks>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <param name="key">a pointer filled in with the transparent pixel</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface
/// 
/// SDL_SetColorKey</remarks>
SDL_GetColorKey: function(surface: PSDL_Surface; key: PUint32): Integer; cdecl;

/// <summary>Set an additional color value multiplied into blit operations.</summary>
/// <remarks>When this surface is blitted, during the blit operation each source color
/// channel is modulated by the appropriate color value according to the
/// following formula:
/// 
/// `srcC = srcC * (color / 255)`</remarks>
/// <param name="surface">the SDL_Surface structure to update</param>
/// <param name="r">the red color value multiplied into blit operations</param>
/// <param name="g">the green color value multiplied into blit operations</param>
/// <param name="b">the blue color value multiplied into blit operations</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetSurfaceColorMod
/// 
/// SDL_SetSurfaceAlphaMod</remarks>
SDL_SetSurfaceColorMod: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;

/// <summary>Get the additional color value multiplied into blit operations.</summary>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <param name="r">a pointer filled in with the current red color value</param>
/// <param name="g">a pointer filled in with the current green color value</param>
/// <param name="b">a pointer filled in with the current blue color value</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetSurfaceAlphaMod
/// 
/// SDL_SetSurfaceColorMod</remarks>
SDL_GetSurfaceColorMod: function(surface: PSDL_Surface; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;

/// <summary>Set an additional alpha value used in blit operations.</summary>
/// <remarks>When this surface is blitted, during the blit operation the source alpha
/// value is modulated by this alpha value according to the following formula:
/// 
/// `srcA = srcA * (alpha / 255)`</remarks>
/// <param name="surface">the SDL_Surface structure to update</param>
/// <param name="alpha">the alpha value multiplied into blit operations</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetSurfaceAlphaMod
/// 
/// SDL_SetSurfaceColorMod</remarks>
SDL_SetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: Uint8): Integer; cdecl;

/// <summary>Get the additional alpha value used in blit operations.</summary>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <param name="alpha">a pointer filled in with the current alpha value</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetSurfaceColorMod
/// 
/// SDL_SetSurfaceAlphaMod</remarks>
SDL_GetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: PUint8): Integer; cdecl;

/// <summary>Set the blend mode used for blit operations.</summary>
/// <remarks>To copy a surface to another surface (or texture) without blending with the
/// existing data, the blendmode of the SOURCE surface should be set to
/// `SDL_BLENDMODE_NONE`.</remarks>
/// <param name="surface">the SDL_Surface structure to update</param>
/// <param name="blendMode">the SDL_BlendMode to use for blit blending</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetSurfaceBlendMode</remarks>
SDL_SetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: SDL_BlendMode): Integer; cdecl;

/// <summary>Get the blend mode used for blit operations.</summary>
/// <param name="surface">the SDL_Surface structure to query</param>
/// <param name="blendMode">a pointer filled in with the current SDL_BlendMode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetSurfaceBlendMode</remarks>
SDL_GetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: PSDL_BlendMode): Integer; cdecl;

/// <summary>Set the clipping rectangle for a surface.</summary>
/// <remarks>When `surface` is the destination of a blit, only the area within the clip
/// rectangle is drawn into.
/// 
/// Note that blits are automatically clipped to the edges of the source and
/// destination surfaces.</remarks>
/// <param name="surface">the SDL_Surface structure to be clipped</param>
/// <param name="rect">the SDL_Rect structure representing the clipping rectangle, or
///   NULL to disable clipping</param>
/// <returns>SDL_TRUE if the rectangle intersects the surface, otherwise
///   SDL_FALSE and blits will be completely clipped.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface
/// 
/// SDL_GetClipRect</remarks>
SDL_SetClipRect: function(surface: PSDL_Surface; const rect: PSDL_Rect): SDL_bool; cdecl;

/// <summary>Get the clipping rectangle for a surface.</summary>
/// <remarks>When `surface` is the destination of a blit, only the area within the clip
/// rectangle is drawn into.</remarks>
/// <param name="surface">the SDL_Surface structure representing the surface to be
///   clipped</param>
/// <param name="rect">an SDL_Rect structure filled in with the clipping rectangle for
///   the surface</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface
/// 
/// SDL_SetClipRect</remarks>
SDL_GetClipRect: procedure(surface: PSDL_Surface; rect: PSDL_Rect); cdecl;

SDL_DuplicateSurface: function(surface: PSDL_Surface): PSDL_Surface; cdecl;

/// <summary>Copy an existing surface to a new surface of the specified format.</summary>
/// <remarks>This function is used to optimize images for faster *repeat* blitting. This
/// is accomplished by converting the original and storing the result as a new
/// surface. The new, optimized surface can then be used as the source for
/// future blits, making them faster.</remarks>
/// <param name="src">the existing SDL_Surface structure to convert</param>
/// <param name="fmt">the SDL_PixelFormat structure that the new surface is optimized
///   for</param>
/// <param name="flags">the flags are unused and should be set to 0; this is a
///   leftover from SDL 1.2's API</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocFormat
/// 
/// SDL_ConvertSurfaceFormat
/// 
/// SDL_CreateRGBSurface</remarks>
SDL_ConvertSurface: function(src: PSDL_Surface; const fmt: PSDL_PixelFormat; flags: Uint32): PSDL_Surface; cdecl;

/// <summary>Copy an existing surface to a new surface of the specified format enum.</summary>
/// <remarks>This function operates just like SDL_ConvertSurface(), but accepts an
/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,
/// it might be easier to call but it doesn't have access to palette
/// information for the destination surface, in case that would be important.</remarks>
/// <param name="src">the existing SDL_Surface structure to convert</param>
/// <param name="pixel_format">the SDL_PixelFormatEnum that the new surface is
///   optimized for</param>
/// <param name="flags">the flags are unused and should be set to 0; this is a
///   leftover from SDL 1.2's API</param>
/// <returns>the new SDL_Surface structure that is created or NULL if it fails;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AllocFormat
/// 
/// SDL_ConvertSurface
/// 
/// SDL_CreateRGBSurface</remarks>
SDL_ConvertSurfaceFormat: function(src: PSDL_Surface; pixel_format: Uint32; flags: Uint32): PSDL_Surface; cdecl;

/// <summary>Copy a block of pixels of one format to another format.</summary>
/// <param name="width">the width of the block to copy, in pixels</param>
/// <param name="height">the height of the block to copy, in pixels</param>
/// <param name="src_format">an SDL_PixelFormatEnum value of the `src` pixels format</param>
/// <param name="src">a pointer to the source pixels</param>
/// <param name="src_pitch">the pitch of the source pixels, in bytes</param>
/// <param name="dst_format">an SDL_PixelFormatEnum value of the `dst` pixels format</param>
/// <param name="dst">a pointer to be filled in with new pixel data</param>
/// <param name="dst_pitch">the pitch of the destination pixels, in bytes</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_ConvertPixels: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;

/// <summary>Premultiply the alpha on a block of pixels.</summary>
/// <remarks>This is safe to use with src == dst, but not for other overlapping areas.
/// 
/// This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.</remarks>
/// <param name="width">the width of the block to convert, in pixels</param>
/// <param name="height">the height of the block to convert, in pixels</param>
/// <param name="src_format">an SDL_PixelFormatEnum value of the `src` pixels format</param>
/// <param name="src">a pointer to the source pixels</param>
/// <param name="src_pitch">the pitch of the source pixels, in bytes</param>
/// <param name="dst_format">an SDL_PixelFormatEnum value of the `dst` pixels format</param>
/// <param name="dst">a pointer to be filled in with premultiplied pixel data</param>
/// <param name="dst_pitch">the pitch of the destination pixels, in bytes</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_PremultiplyAlpha: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;

/// <summary>Perform a fast fill of a rectangle with a specific color.</summary>
/// <remarks>`color` should be a pixel of the format used by the surface, and can be
/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
/// alpha component then the destination is simply filled with that alpha
/// information, no blending takes place.
/// 
/// If there is a clip rectangle set on the destination (set via
/// SDL_SetClipRect()), then this function will fill based on the intersection
/// of the clip rectangle and `rect`.</remarks>
/// <param name="dst">the SDL_Surface structure that is the drawing target</param>
/// <param name="rect">the SDL_Rect structure representing the rectangle to fill, or
///   NULL to fill the entire surface</param>
/// <param name="color">the color to fill with</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FillRects</remarks>
SDL_FillRect: function(dst: PSDL_Surface; const rect: PSDL_Rect; color: Uint32): Integer; cdecl;

/// <summary>Perform a fast fill of a set of rectangles with a specific color.</summary>
/// <remarks>`color` should be a pixel of the format used by the surface, and can be
/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
/// alpha component then the destination is simply filled with that alpha
/// information, no blending takes place.
/// 
/// If there is a clip rectangle set on the destination (set via
/// SDL_SetClipRect()), then this function will fill based on the intersection
/// of the clip rectangle and `rect`.</remarks>
/// <param name="dst">the SDL_Surface structure that is the drawing target</param>
/// <param name="rects">an array of SDL_Rects representing the rectangles to fill.</param>
/// <param name="count">the number of rectangles in the array</param>
/// <param name="color">the color to fill with</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FillRect</remarks>
SDL_FillRects: function(dst: PSDL_Surface; const rects: PSDL_Rect; count: Integer; color: Uint32): Integer; cdecl;

/// <summary>Perform a fast blit from the source surface to the destination surface.</summary>
/// <remarks>SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a
/// macro for this function with a less confusing name.
/// This function is available since SDL 2.0.0.
/// SDL_BlitSurface</remarks>
SDL_UpperBlit: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Perform low-level surface blitting only.</summary>
/// <remarks>This is a semi-private blit function and it performs low-level surface
/// blitting, assuming the input rectangles have already been clipped.
/// 
/// Unless you know what you're doing, you should be using SDL_BlitSurface()
/// instead.</remarks>
/// <param name="src">the SDL_Surface structure to be copied from</param>
/// <param name="srcrect">the SDL_Rect structure representing the rectangle to be
///   copied, or NULL to copy the entire surface</param>
/// <param name="dst">the SDL_Surface structure that is the blit target</param>
/// <param name="dstrect">the SDL_Rect structure representing the rectangle that is
///   copied into</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitSurface</remarks>
SDL_LowerBlit: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Perform a fast, low quality, stretch blit between two surfaces of the same
/// format.</summary>
/// <remarks>Please use SDL_BlitScaled() instead.
/// This function is available since SDL 2.0.0.</remarks>
SDL_SoftStretch: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Perform bilinear scaling between two surfaces of the same format, 32BPP.</summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_SoftStretchLinear: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Perform a scaled surface copy to a destination surface.</summary>
/// <remarks>SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is
/// merely a macro for this function with a less confusing name.
/// This function is available since SDL 2.0.0.
/// SDL_BlitScaled</remarks>
SDL_UpperBlitScaled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Perform low-level surface scaled blitting only.</summary>
/// <remarks>This is a semi-private function and it performs low-level surface blitting,
/// assuming the input rectangles have already been clipped.</remarks>
/// <param name="src">the SDL_Surface structure to be copied from</param>
/// <param name="srcrect">the SDL_Rect structure representing the rectangle to be
///   copied</param>
/// <param name="dst">the SDL_Surface structure that is the blit target</param>
/// <param name="dstrect">the SDL_Rect structure representing the rectangle that is
///   copied into</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_BlitScaled</remarks>
SDL_LowerBlitScaled: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Set the YUV conversion mode</summary>
/// <remarks>This function is available since SDL 2.0.8.</remarks>
SDL_SetYUVConversionMode: procedure(mode: SDL_YUV_CONVERSION_MODE); cdecl;

/// <summary>Get the YUV conversion mode</summary>
/// <remarks>This function is available since SDL 2.0.8.</remarks>
SDL_GetYUVConversionMode: function(): SDL_YUV_CONVERSION_MODE; cdecl;

/// <summary>Get the YUV conversion mode, returning the correct mode for the resolution
/// when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC</summary>
/// <remarks>This function is available since SDL 2.0.8.</remarks>
SDL_GetYUVConversionModeForResolution: function(width: Integer; height: Integer): SDL_YUV_CONVERSION_MODE; cdecl;

/// <summary>Get the number of video drivers compiled into SDL.</summary>
/// <returns>a number >= 1 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetVideoDriver</remarks>
SDL_GetNumVideoDrivers: function(): Integer; cdecl;

/// <summary>Get the name of a built in video driver.</summary>
/// <remarks>The video drivers are presented in the order in which they are normally
/// checked during initialization.</remarks>
/// <param name="index">the index of a video driver</param>
/// <returns>the name of the video driver with the given **index**.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumVideoDrivers</remarks>
SDL_GetVideoDriver: function(index: Integer): PUTF8Char; cdecl;

/// <summary>Initialize the video subsystem, optionally specifying a video driver.</summary>
/// <remarks>This function initializes the video subsystem, setting up a connection to
/// the window manager, etc, and determines the available display modes and
/// pixel formats, but does not initialize a window or graphics mode.
/// 
/// If you use this function and you haven't used the SDL_INIT_VIDEO flag with
/// either SDL_Init() or SDL_InitSubSystem(), you should call SDL_VideoQuit()
/// before calling SDL_Quit().
/// 
/// It is safe to call this function multiple times. SDL_VideoInit() will call
/// SDL_VideoQuit() itself if the video subsystem has already been initialized.
/// 
/// You can use SDL_GetNumVideoDrivers() and SDL_GetVideoDriver() to find a
/// specific `driver_name`.</remarks>
/// <param name="driver_name">the name of a video driver to initialize, or NULL for
///   the default driver</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumVideoDrivers
/// 
/// SDL_GetVideoDriver
/// 
/// SDL_InitSubSystem
/// 
/// SDL_VideoQuit</remarks>
SDL_VideoInit: function(const driver_name: PUTF8Char): Integer; cdecl;

/// <summary>Shut down the video subsystem, if initialized with SDL_VideoInit().</summary>
/// <remarks>This function closes all windows, and restores the original video mode.
/// This function is available since SDL 2.0.0.
/// SDL_VideoInit</remarks>
SDL_VideoQuit: procedure(); cdecl;

/// <summary>Get the name of the currently initialized video driver.</summary>
/// <returns>the name of the current video driver or NULL if no driver has been
///   initialized.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumVideoDrivers
/// 
/// SDL_GetVideoDriver</remarks>
SDL_GetCurrentVideoDriver: function(): PUTF8Char; cdecl;

/// <summary>Get the number of available video displays.</summary>
/// <returns>a number >= 1 or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetDisplayBounds</remarks>
SDL_GetNumVideoDisplays: function(): Integer; cdecl;

/// <summary>Get the name of a display in UTF-8 encoding.</summary>
/// <param name="displayIndex">the index of display from which the name should be
///   queried</param>
/// <returns>the name of a display or NULL for an invalid display index or
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetDisplayName: function(displayIndex: Integer): PUTF8Char; cdecl;

/// <summary>Get the desktop area represented by a display.</summary>
/// <remarks>The primary display (`displayIndex` zero) is always located at 0,0.</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <param name="rect">the SDL_Rect structure filled in with the display bounds</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetDisplayBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;

/// <summary>Get the usable desktop area represented by a display.</summary>
/// <remarks>The primary display (`displayIndex` zero) is always located at 0,0.
/// 
/// This is the same area as SDL_GetDisplayBounds() reports, but with portions
/// reserved by the system removed. For example, on Apple's macOS, this
/// subtracts the area occupied by the menu bar and dock.
/// 
/// Setting a window to be fullscreen generally bypasses these unusable areas,
/// so these are good guidelines for the maximum space available to a
/// non-fullscreen window.
/// 
/// The parameter `rect` is ignored if it is NULL.
/// 
/// This function also returns -1 if the parameter `displayIndex` is out of
/// range.</remarks>
/// <param name="displayIndex">the index of the display to query the usable bounds
///   from</param>
/// <param name="rect">the SDL_Rect structure filled in with the display bounds</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_GetDisplayBounds
/// 
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetDisplayUsableBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;

/// <summary>Get the dots/pixels-per-inch for a display.</summary>
/// <remarks>Diagonal, horizontal and vertical DPI can all be optionally returned if the
/// appropriate parameter is non-NULL.
/// 
/// A failure of this function usually means that either no DPI information is
/// available or the `displayIndex` is out of range.</remarks>
/// <param name="displayIndex">the index of the display from which DPI information
///   should be queried</param>
/// <param name="ddpi">a pointer filled in with the diagonal DPI of the display; may
///   be NULL</param>
/// <param name="hdpi">a pointer filled in with the horizontal DPI of the display; may
///   be NULL</param>
/// <param name="vdpi">a pointer filled in with the vertical DPI of the display; may
///   be NULL</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetDisplayDPI: function(displayIndex: Integer; ddpi: PSingle; hdpi: PSingle; vdpi: PSingle): Integer; cdecl;

/// <summary>Get the orientation of a display.</summary>
/// <param name="displayIndex">the index of the display to query</param>
/// <returns>The SDL_DisplayOrientation enum value of the display, or
///   `SDL_ORIENTATION_UNKNOWN` if it isn't available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetDisplayOrientation: function(displayIndex: Integer): SDL_DisplayOrientation; cdecl;

/// <summary>Get the number of available display modes.</summary>
/// <remarks>The `displayIndex` needs to be in the range from 0 to
/// SDL_GetNumVideoDisplays() - 1.</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <returns>a number >= 1 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetDisplayMode
/// 
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetNumDisplayModes: function(displayIndex: Integer): Integer; cdecl;

/// <summary>Get information about a specific display mode.</summary>
/// <remarks>The display modes are sorted in this priority:
/// 
/// - width -> largest to smallest
/// - height -> largest to smallest
/// - bits per pixel -> more colors to fewer colors
/// - packed pixel layout -> largest to smallest
/// - refresh rate -> highest to lowest</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <param name="modeIndex">the index of the display mode to query</param>
/// <param name="mode">an SDL_DisplayMode structure filled in with the mode at
///   `modeIndex`</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumDisplayModes</remarks>
SDL_GetDisplayMode: function(displayIndex: Integer; modeIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;

/// <summary>Get information about the desktop's display mode.</summary>
/// <remarks>There's a difference between this function and SDL_GetCurrentDisplayMode()
/// when SDL runs fullscreen and has changed the resolution. In that case this
/// function will return the previous native display mode, and not the current
/// display mode.</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <param name="mode">an SDL_DisplayMode structure filled in with the current display
///   mode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetCurrentDisplayMode
/// 
/// SDL_GetDisplayMode
/// 
/// SDL_SetWindowDisplayMode</remarks>
SDL_GetDesktopDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;

/// <summary>Get information about the current display mode.</summary>
/// <remarks>There's a difference between this function and SDL_GetDesktopDisplayMode()
/// when SDL runs fullscreen and has changed the resolution. In that case this
/// function will return the current display mode, and not the previous native
/// display mode.</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <param name="mode">an SDL_DisplayMode structure filled in with the current display
///   mode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetDesktopDisplayMode
/// 
/// SDL_GetDisplayMode
/// 
/// SDL_GetNumVideoDisplays
/// 
/// SDL_SetWindowDisplayMode</remarks>
SDL_GetCurrentDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;

/// <summary>Get the closest match to the requested display mode.</summary>
/// <remarks>The available display modes are scanned and `closest` is filled in with the
/// closest mode matching the requested mode and returned. The mode format and
/// refresh rate default to the desktop mode if they are set to 0. The modes
/// are scanned with size being first priority, format being second priority,
/// and finally checking the refresh rate. If all the available modes are too
/// small, then NULL is returned.</remarks>
/// <param name="displayIndex">the index of the display to query</param>
/// <param name="mode">an SDL_DisplayMode structure containing the desired display
///   mode</param>
/// <param name="closest">an SDL_DisplayMode structure filled in with the closest
///   match of the available display modes</param>
/// <returns>the passed in value `closest` or NULL if no matching video mode
///   was available; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetDisplayMode
/// 
/// SDL_GetNumDisplayModes</remarks>
SDL_GetClosestDisplayMode: function(displayIndex: Integer; const mode: PSDL_DisplayMode; closest: PSDL_DisplayMode): PSDL_DisplayMode; cdecl;

/// <summary>Get the index of the display associated with a window.</summary>
/// <param name="window">the window to query</param>
/// <returns>the index of the display containing the center of the window on
///   success or a negative error code on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetDisplayBounds
/// 
/// SDL_GetNumVideoDisplays</remarks>
SDL_GetWindowDisplayIndex: function(window: PSDL_Window): Integer; cdecl;

/// <summary>Set the display mode to use when a window is visible at fullscreen.</summary>
/// <remarks>This only affects the display mode used when the window is fullscreen. To
/// change the window size when the window is not fullscreen, use
/// SDL_SetWindowSize().</remarks>
/// <param name="window">the window to affect</param>
/// <param name="mode">the SDL_DisplayMode structure representing the mode to use, or
///   NULL to use the window's dimensions and the desktop's format
///   and refresh rate</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowDisplayMode
/// 
/// SDL_SetWindowFullscreen</remarks>
SDL_SetWindowDisplayMode: function(window: PSDL_Window; const mode: PSDL_DisplayMode): Integer; cdecl;

/// <summary>Query the display mode to use when a window is visible at fullscreen.</summary>
/// <param name="window">the window to query</param>
/// <param name="mode">an SDL_DisplayMode structure filled in with the fullscreen
///   display mode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowDisplayMode
/// 
/// SDL_SetWindowFullscreen</remarks>
SDL_GetWindowDisplayMode: function(window: PSDL_Window; mode: PSDL_DisplayMode): Integer; cdecl;

/// <summary>Get the raw ICC profile data for the screen the window is currently on.</summary>
/// <remarks>Data returned should be freed with SDL_free.</remarks>
/// <param name="window">the window to query</param>
/// <param name="size">the size of the ICC profile</param>
/// <returns>the raw ICC profile data on success or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_GetWindowICCProfile: function(window: PSDL_Window; size: PNativeUInt): Pointer; cdecl;

/// <summary>Get the pixel format associated with the window.</summary>
/// <param name="window">the window to query</param>
/// <returns>the pixel format of the window on success or
///   SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetWindowPixelFormat: function(window: PSDL_Window): Uint32; cdecl;

/// <summary>Create a window with the specified position, dimensions, and flags.</summary>
/// <remarks>`flags` may be any of the following OR'd together:
/// 
/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window
/// - `SDL_WINDOW_FULLSCREEN_DESKTOP`: fullscreen window at desktop resolution
/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context
/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance
/// - `SDL_WINDOW_METAL`: window usable with a Metal instance
/// - `SDL_WINDOW_HIDDEN`: window is not visible
/// - `SDL_WINDOW_BORDERLESS`: no window decoration
/// - `SDL_WINDOW_RESIZABLE`: window can be resized
/// - `SDL_WINDOW_MINIMIZED`: window is minimized
/// - `SDL_WINDOW_MAXIMIZED`: window is maximized
/// - `SDL_WINDOW_INPUT_GRABBED`: window has grabbed input focus
/// - `SDL_WINDOW_ALLOW_HIGHDPI`: window should be created in high-DPI mode if
/// supported (>= SDL 2.0.1)
/// 
/// `SDL_WINDOW_SHOWN` is ignored by SDL_CreateWindow(). The SDL_Window is
/// implicitly shown if SDL_WINDOW_HIDDEN is not set. `SDL_WINDOW_SHOWN` may be
/// queried later using SDL_GetWindowFlags().
/// 
/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist
/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.
/// 
/// If the window is created with the `SDL_WINDOW_ALLOW_HIGHDPI` flag, its size
/// in pixels may differ from its size in screen coordinates on platforms with
/// high-DPI support (e.g. iOS and macOS). Use SDL_GetWindowSize() to query the
/// client area's size in screen coordinates, and SDL_GL_GetDrawableSize() or
/// SDL_GetRendererOutputSize() to query the drawable size in pixels.
/// 
/// If the window is set fullscreen, the width and height parameters `w` and
/// `h` will not be used. However, invalid size parameters (e.g. too large) may
/// still fail. Window size is actually limited to 16384 x 16384 for all
/// platforms at window creation.
/// 
/// If the window is created with any of the SDL_WINDOW_OPENGL or
/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function
/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the
/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().
/// 
/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,
/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.
/// 
/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,
/// SDL_CreateWindow() will fail.
/// 
/// On non-Apple devices, SDL requires you to either not link to the Vulkan
/// loader or link to a dynamic library version. This limitation may be removed
/// in a future version of SDL.</remarks>
/// <param name="title">the title of the window, in UTF-8 encoding</param>
/// <param name="x">the x position of the window, `SDL_WINDOWPOS_CENTERED`, or
///   `SDL_WINDOWPOS_UNDEFINED`</param>
/// <param name="y">the y position of the window, `SDL_WINDOWPOS_CENTERED`, or
///   `SDL_WINDOWPOS_UNDEFINED`</param>
/// <param name="w">the width of the window, in screen coordinates</param>
/// <param name="h">the height of the window, in screen coordinates</param>
/// <param name="flags">0, or one or more SDL_WindowFlags OR'd together</param>
/// <returns>the window that was created or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateWindowFrom
/// 
/// SDL_DestroyWindow</remarks>
SDL_CreateWindow: function(const title: PUTF8Char; x: Integer; y: Integer; w: Integer; h: Integer; flags: Uint32): PSDL_Window; cdecl;

/// <summary>Create an SDL window from an existing native window.</summary>
/// <remarks>In some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows)
/// the hint `SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT` needs to be configured
/// before using SDL_CreateWindowFrom().</remarks>
/// <param name="data">a pointer to driver-dependent window creation data, typically
///   your native window cast to a void*</param>
/// <returns>the window that was created or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateWindow
/// 
/// SDL_DestroyWindow</remarks>
SDL_CreateWindowFrom: function(const data: Pointer): PSDL_Window; cdecl;

/// <summary>Get the numeric ID of a window.</summary>
/// <remarks>The numeric ID is what SDL_WindowEvent references, and is necessary to map
/// these events to specific SDL_Window objects.</remarks>
/// <param name="window">the window to query</param>
/// <returns>the ID of the window on success or 0 on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowFromID</remarks>
SDL_GetWindowID: function(window: PSDL_Window): Uint32; cdecl;

/// <summary>Get a window from a stored ID.</summary>
/// <remarks>The numeric ID is what SDL_WindowEvent references, and is necessary to map
/// these events to specific SDL_Window objects.</remarks>
/// <param name="id">the ID of the window</param>
/// <returns>the window associated with `id` or NULL if it doesn't exist; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowID</remarks>
SDL_GetWindowFromID: function(id: Uint32): PSDL_Window; cdecl;

/// <summary>Get the window flags.</summary>
/// <param name="window">the window to query</param>
/// <returns>a mask of the SDL_WindowFlags associated with `window`</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateWindow
/// 
/// SDL_HideWindow
/// 
/// SDL_MaximizeWindow
/// 
/// SDL_MinimizeWindow
/// 
/// SDL_SetWindowFullscreen
/// 
/// SDL_SetWindowGrab
/// 
/// SDL_ShowWindow</remarks>
SDL_GetWindowFlags: function(window: PSDL_Window): Uint32; cdecl;

/// <summary>Set the title of a window.</summary>
/// <remarks>This string is expected to be in UTF-8 encoding.</remarks>
/// <param name="window">the window to change</param>
/// <param name="title">the desired window title in UTF-8 format</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowTitle</remarks>
SDL_SetWindowTitle: procedure(window: PSDL_Window; const title: PUTF8Char); cdecl;

/// <summary>Get the title of a window.</summary>
/// <param name="window">the window to query</param>
/// <returns>the title of the window in UTF-8 format or "" if there is no
///   title.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowTitle</remarks>
SDL_GetWindowTitle: function(window: PSDL_Window): PUTF8Char; cdecl;

/// <summary>Set the icon for a window.</summary>
/// <param name="window">the window to change</param>
/// <param name="icon">an SDL_Surface structure containing the icon for the window</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_SetWindowIcon: procedure(window: PSDL_Window; icon: PSDL_Surface); cdecl;

/// <summary>Associate an arbitrary named pointer with a window.</summary>
/// <remarks>`name` is case-sensitive.</remarks>
/// <param name="window">the window to associate with the pointer</param>
/// <param name="name">the name of the pointer</param>
/// <param name="userdata">the associated pointer</param>
/// <returns>the previous value associated with `name`.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowData</remarks>
SDL_SetWindowData: function(window: PSDL_Window; const name: PUTF8Char; userdata: Pointer): Pointer; cdecl;

/// <summary>Retrieve the data pointer associated with a window.</summary>
/// <param name="window">the window to query</param>
/// <param name="name">the name of the pointer</param>
/// <returns>the value associated with `name`.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowData</remarks>
SDL_GetWindowData: function(window: PSDL_Window; const name: PUTF8Char): Pointer; cdecl;

/// <summary>Set the position of a window.</summary>
/// <remarks>The window coordinate origin is the upper left of the display.</remarks>
/// <param name="window">the window to reposition</param>
/// <param name="x">the x coordinate of the window in screen coordinates, or
///   `SDL_WINDOWPOS_CENTERED` or `SDL_WINDOWPOS_UNDEFINED`</param>
/// <param name="y">the y coordinate of the window in screen coordinates, or
///   `SDL_WINDOWPOS_CENTERED` or `SDL_WINDOWPOS_UNDEFINED`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowPosition</remarks>
SDL_SetWindowPosition: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;

/// <summary>Get the position of a window.</summary>
/// <remarks>If you do not need the value for one of the positions a NULL may be passed
/// in the `x` or `y` parameter.</remarks>
/// <param name="window">the window to query</param>
/// <param name="x">a pointer filled in with the x position of the window, in screen
///   coordinates, may be NULL</param>
/// <param name="y">a pointer filled in with the y position of the window, in screen
///   coordinates, may be NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowPosition</remarks>
SDL_GetWindowPosition: procedure(window: PSDL_Window; x: PInteger; y: PInteger); cdecl;

/// <summary>Set the size of a window's client area.</summary>
/// <remarks>The window size in screen coordinates may differ from the size in pixels,
/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform
/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize() or
/// SDL_GetRendererOutputSize() to get the real client area size in pixels.
/// 
/// Fullscreen windows automatically match the size of the display mode, and
/// you should use SDL_SetWindowDisplayMode() to change their size.</remarks>
/// <param name="window">the window to change</param>
/// <param name="w">the width of the window in pixels, in screen coordinates, must be
///   > 0</param>
/// <param name="h">the height of the window in pixels, in screen coordinates, must be
///   > 0</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowSize
/// 
/// SDL_SetWindowDisplayMode</remarks>
SDL_SetWindowSize: procedure(window: PSDL_Window; w: Integer; h: Integer); cdecl;

/// <summary>Get the size of a window's client area.</summary>
/// <remarks>NULL can safely be passed as the `w` or `h` parameter if the width or
/// height value is not desired.
/// 
/// The window size in screen coordinates may differ from the size in pixels,
/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform
/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),
/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the
/// real client area size in pixels.</remarks>
/// <param name="window">the window to query the width and height from</param>
/// <param name="w">a pointer filled in with the width of the window, in screen
///   coordinates, may be NULL</param>
/// <param name="h">a pointer filled in with the height of the window, in screen
///   coordinates, may be NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_GetDrawableSize
/// 
/// SDL_Vulkan_GetDrawableSize
/// 
/// SDL_SetWindowSize</remarks>
SDL_GetWindowSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;

/// <summary>Get the size of a window's borders (decorations) around the client area.</summary>
/// <remarks>Note: If this function fails (returns -1), the size values will be
/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the
/// window in question was borderless.
/// 
/// Note: This function may fail on systems where the window has not yet been
/// decorated by the display server (for example, immediately after calling
/// SDL_CreateWindow). It is recommended that you wait at least until the
/// window has been presented and composited, so that the window system has a
/// chance to decorate the window and provide the border dimensions to SDL.
/// 
/// This function also returns -1 if getting the information is not supported.</remarks>
/// <param name="window">the window to query the size values of the border
///   (decorations) from</param>
/// <param name="top">pointer to variable for storing the size of the top border; NULL
///   is permitted</param>
/// <param name="left">pointer to variable for storing the size of the left border;
///   NULL is permitted</param>
/// <param name="bottom">pointer to variable for storing the size of the bottom
///   border; NULL is permitted</param>
/// <param name="right">pointer to variable for storing the size of the right border;
///   NULL is permitted</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_GetWindowSize</remarks>
SDL_GetWindowBordersSize: function(window: PSDL_Window; top: PInteger; left: PInteger; bottom: PInteger; right: PInteger): Integer; cdecl;

/// <summary>Set the minimum size of a window's client area.</summary>
/// <param name="window">the window to change</param>
/// <param name="min_w">the minimum width of the window in pixels</param>
/// <param name="min_h">the minimum height of the window in pixels</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowMinimumSize
/// 
/// SDL_SetWindowMaximumSize</remarks>
SDL_SetWindowMinimumSize: procedure(window: PSDL_Window; min_w: Integer; min_h: Integer); cdecl;

/// <summary>Get the minimum size of a window's client area.</summary>
/// <param name="window">the window to query</param>
/// <param name="w">a pointer filled in with the minimum width of the window, may be
///   NULL</param>
/// <param name="h">a pointer filled in with the minimum height of the window, may be
///   NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowMaximumSize
/// 
/// SDL_SetWindowMinimumSize</remarks>
SDL_GetWindowMinimumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;

/// <summary>Set the maximum size of a window's client area.</summary>
/// <param name="window">the window to change</param>
/// <param name="max_w">the maximum width of the window in pixels</param>
/// <param name="max_h">the maximum height of the window in pixels</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowMaximumSize
/// 
/// SDL_SetWindowMinimumSize</remarks>
SDL_SetWindowMaximumSize: procedure(window: PSDL_Window; max_w: Integer; max_h: Integer); cdecl;

/// <summary>Get the maximum size of a window's client area.</summary>
/// <param name="window">the window to query</param>
/// <param name="w">a pointer filled in with the maximum width of the window, may be
///   NULL</param>
/// <param name="h">a pointer filled in with the maximum height of the window, may be
///   NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowMinimumSize
/// 
/// SDL_SetWindowMaximumSize</remarks>
SDL_GetWindowMaximumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;

/// <summary>Set the border state of a window.</summary>
/// <remarks>This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add
/// or remove the border from the actual window. This is a no-op if the
/// window's border already matches the requested state.
/// 
/// You can't change the border state of a fullscreen window.</remarks>
/// <param name="window">the window of which to change the border state</param>
/// <param name="bordered">SDL_FALSE to remove border, SDL_TRUE to add border</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowFlags</remarks>
SDL_SetWindowBordered: procedure(window: PSDL_Window; bordered: SDL_bool); cdecl;

/// <summary>Set the user-resizable state of a window.</summary>
/// <remarks>This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and
/// allow/disallow user resizing of the window. This is a no-op if the window's
/// resizable state already matches the requested state.
/// 
/// You can't change the resizable state of a fullscreen window.</remarks>
/// <param name="window">the window of which to change the resizable state</param>
/// <param name="resizable">SDL_TRUE to allow resizing, SDL_FALSE to disallow</param></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_GetWindowFlags</remarks>
SDL_SetWindowResizable: procedure(window: PSDL_Window; resizable: SDL_bool); cdecl;

/// <summary>Set the window to always be above the others.</summary>
/// <remarks>This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This
/// will bring the window to the front and keep the window above the rest.</remarks>
/// <param name="window">The window of which to change the always on top state</param>
/// <param name="on_top">SDL_TRUE to set the window always on top, SDL_FALSE to
///   disable</param></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_GetWindowFlags</remarks>
SDL_SetWindowAlwaysOnTop: procedure(window: PSDL_Window; on_top: SDL_bool); cdecl;

/// <summary>Show a window.</summary>
/// <param name="window">the window to show</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HideWindow
/// 
/// SDL_RaiseWindow</remarks>
SDL_ShowWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Hide a window.</summary>
/// <param name="window">the window to hide</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ShowWindow</remarks>
SDL_HideWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Raise a window above other windows and set the input focus.</summary>
/// <param name="window">the window to raise</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_RaiseWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Make a window as large as possible.</summary>
/// <param name="window">the window to maximize</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MinimizeWindow
/// 
/// SDL_RestoreWindow</remarks>
SDL_MaximizeWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Minimize a window to an iconic representation.</summary>
/// <param name="window">the window to minimize</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MaximizeWindow
/// 
/// SDL_RestoreWindow</remarks>
SDL_MinimizeWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Restore the size and position of a minimized or maximized window.</summary>
/// <param name="window">the window to restore</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_MaximizeWindow
/// 
/// SDL_MinimizeWindow</remarks>
SDL_RestoreWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Set a window's fullscreen state.</summary>
/// <remarks>`flags` may be `SDL_WINDOW_FULLSCREEN`, for "real" fullscreen with a
/// videomode change; `SDL_WINDOW_FULLSCREEN_DESKTOP` for "fake" fullscreen
/// that takes the size of the desktop; and 0 for windowed mode.</remarks>
/// <param name="window">the window to change</param>
/// <param name="flags">`SDL_WINDOW_FULLSCREEN`, `SDL_WINDOW_FULLSCREEN_DESKTOP` or 0</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowDisplayMode
/// 
/// SDL_SetWindowDisplayMode</remarks>
SDL_SetWindowFullscreen: function(window: PSDL_Window; flags: Uint32): Integer; cdecl;

/// <summary>Get the SDL surface associated with the window.</summary>
/// <remarks>A new surface will be created with the optimal format for the window, if
/// necessary. This surface will be freed when the window is destroyed. Do not
/// free this surface.
/// 
/// This surface will be invalidated if the window is resized. After resizing a
/// window this function must be called again to return a valid surface.
/// 
/// You may not combine this with 3D or the rendering API on this window.
/// 
/// This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.</remarks>
/// <param name="window">the window to query</param>
/// <returns>the surface associated with the window, or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_UpdateWindowSurface
/// 
/// SDL_UpdateWindowSurfaceRects</remarks>
SDL_GetWindowSurface: function(window: PSDL_Window): PSDL_Surface; cdecl;

/// <summary>Copy the window surface to the screen.</summary>
/// <remarks>This is the function you use to reflect any changes to the surface on the
/// screen.
/// 
/// This function is equivalent to the SDL 1.2 API SDL_Flip().</remarks>
/// <param name="window">the window to update</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowSurface
/// 
/// SDL_UpdateWindowSurfaceRects</remarks>
SDL_UpdateWindowSurface: function(window: PSDL_Window): Integer; cdecl;

/// <summary>Copy areas of the window surface to the screen.</summary>
/// <remarks>This is the function you use to reflect changes to portions of the surface
/// on the screen.
/// 
/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().</remarks>
/// <param name="window">the window to update</param>
/// <param name="rects">an array of SDL_Rect structures representing areas of the
///   surface to copy</param>
/// <param name="numrects">the number of rectangles</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowSurface
/// 
/// SDL_UpdateWindowSurface</remarks>
SDL_UpdateWindowSurfaceRects: function(window: PSDL_Window; const rects: PSDL_Rect; numrects: Integer): Integer; cdecl;

/// <summary>Set a window's input grab mode.</summary>
/// <remarks>When input is grabbed, the mouse is confined to the window. This function
/// will also grab the keyboard if `SDL_HINT_GRAB_KEYBOARD` is set. To grab the
/// keyboard without also grabbing the mouse, use SDL_SetWindowKeyboardGrab().
/// 
/// If the caller enables a grab while another window is currently grabbed, the
/// other window loses its grab in favor of the caller's window.</remarks>
/// <param name="window">the window for which the input grab mode should be set</param>
/// <param name="grabbed">SDL_TRUE to grab input or SDL_FALSE to release input</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetGrabbedWindow
/// 
/// SDL_GetWindowGrab</remarks>
SDL_SetWindowGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;

/// <summary>Set a window's keyboard grab mode.</summary>
/// <remarks>Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or
/// the Meta/Super key. Note that not all system keyboard shortcuts can be
/// captured by applications (one example is Ctrl+Alt+Del on Windows).
/// 
/// This is primarily intended for specialized applications such as VNC clients
/// or VM frontends. Normal games should not use keyboard grab.
/// 
/// When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the
/// window is full-screen to ensure the user is not trapped in your
/// application. If you have a custom keyboard shortcut to exit fullscreen
/// mode, you may suppress this behavior with
/// `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.
/// 
/// If the caller enables a grab while another window is currently grabbed, the
/// other window loses its grab in favor of the caller's window.</remarks>
/// <param name="window">The window for which the keyboard grab mode should be set.</param>
/// <param name="grabbed">This is SDL_TRUE to grab keyboard, and SDL_FALSE to release.</param></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_GetWindowKeyboardGrab
/// 
/// SDL_SetWindowMouseGrab
/// 
/// SDL_SetWindowGrab</remarks>
SDL_SetWindowKeyboardGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;

/// <summary>Set a window's mouse grab mode.</summary>
/// <remarks>Mouse grab confines the mouse cursor to the window.</remarks>
/// <param name="window">The window for which the mouse grab mode should be set.</param></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_GetWindowMouseGrab
/// 
/// SDL_SetWindowKeyboardGrab
/// 
/// SDL_SetWindowGrab</remarks>
SDL_SetWindowMouseGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;

/// <summary>Get a window's input grab mode.</summary>
/// <param name="window">the window to query</param>
/// <returns>SDL_TRUE if input is grabbed, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowGrab</remarks>
SDL_GetWindowGrab: function(window: PSDL_Window): SDL_bool; cdecl;

/// <summary>Get a window's keyboard grab mode.</summary>
/// <param name="window">the window to query</param>
/// <returns>SDL_TRUE if keyboard is grabbed, and SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_SetWindowKeyboardGrab
/// 
/// SDL_GetWindowGrab</remarks>
SDL_GetWindowKeyboardGrab: function(window: PSDL_Window): SDL_bool; cdecl;

/// <summary>Get a window's mouse grab mode.</summary>
/// <param name="window">the window to query</param>
/// <returns>SDL_TRUE if mouse is grabbed, and SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.
/// SDL_SetWindowKeyboardGrab
/// 
/// SDL_GetWindowGrab</remarks>
SDL_GetWindowMouseGrab: function(window: PSDL_Window): SDL_bool; cdecl;

/// <summary>Get the window that currently has an input grab enabled.</summary>
/// <returns>the window if input is grabbed or NULL otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_GetWindowGrab
/// 
/// SDL_SetWindowGrab</remarks>
SDL_GetGrabbedWindow: function(): PSDL_Window; cdecl;

/// <summary>Confines the cursor to the specified area of a window.</summary>
/// <remarks>Note that this does NOT grab the cursor, it only defines the area a cursor
/// is restricted to when the window has mouse focus.</remarks>
/// <param name="window">The window that will be associated with the barrier.</param>
/// <param name="rect">A rectangle area in window-relative coordinates. If NULL the
///   barrier for the specified window will be destroyed.</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GetWindowMouseRect
/// 
/// SDL_SetWindowMouseGrab</remarks>
SDL_SetWindowMouseRect: function(window: PSDL_Window; const rect: PSDL_Rect): Integer; cdecl;

/// <summary>Get the mouse confinement rectangle of a window.</summary>
/// <param name="window">The window to query</param>
/// <returns>A pointer to the mouse confinement rectangle of a window, or NULL
///   if there isn't one.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_SetWindowMouseRect</remarks>
SDL_GetWindowMouseRect: function(window: PSDL_Window): PSDL_Rect; cdecl;

/// <summary>Set the brightness (gamma multiplier) for a given window's display.</summary>
/// <remarks>Despite the name and signature, this method sets the brightness of the
/// entire display, not an individual window. A window is considered to be
/// owned by the display that contains the window's center pixel. (The index of
/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The
/// brightness set will not follow the window if it is moved to another
/// display.
/// 
/// Many platforms will refuse to set the display brightness in modern times.
/// You are better off using a shader to adjust gamma during rendering, or
/// something similar.</remarks>
/// <param name="window">the window used to select the display whose brightness will
///   be changed</param>
/// <param name="brightness">the brightness (gamma multiplier) value to set where 0.0
///   is completely dark and 1.0 is normal brightness</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowBrightness
/// 
/// SDL_SetWindowGammaRamp</remarks>
SDL_SetWindowBrightness: function(window: PSDL_Window; brightness: Single): Integer; cdecl;

/// <summary>Get the brightness (gamma multiplier) for a given window's display.</summary>
/// <remarks>Despite the name and signature, this method retrieves the brightness of the
/// entire display, not an individual window. A window is considered to be
/// owned by the display that contains the window's center pixel. (The index of
/// this display can be retrieved using SDL_GetWindowDisplayIndex().)</remarks>
/// <param name="window">the window used to select the display whose brightness will
///   be queried</param>
/// <returns>the brightness for the display where 0.0 is completely dark and
///   1.0 is normal brightness.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowBrightness</remarks>
SDL_GetWindowBrightness: function(window: PSDL_Window): Single; cdecl;

/// <summary>Set the opacity for a window.</summary>
/// <remarks>The parameter `opacity` will be clamped internally between 0.0f
/// (transparent) and 1.0f (opaque).
/// 
/// This function also returns -1 if setting the opacity isn't supported.</remarks>
/// <param name="window">the window which will be made transparent or opaque</param>
/// <param name="opacity">the opacity value (0.0f - transparent, 1.0f - opaque)</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_GetWindowOpacity</remarks>
SDL_SetWindowOpacity: function(window: PSDL_Window; opacity: Single): Integer; cdecl;

/// <summary>Get the opacity of a window.</summary>
/// <remarks>If transparency isn't supported on this platform, opacity will be reported
/// as 1.0f without error.
/// 
/// The parameter `opacity` is ignored if it is NULL.
/// 
/// This function also returns -1 if an invalid window was provided.</remarks>
/// <param name="window">the window to get the current opacity value from</param>
/// <param name="out_opacity">the float filled in (0.0f - transparent, 1.0f - opaque)</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_SetWindowOpacity</remarks>
SDL_GetWindowOpacity: function(window: PSDL_Window; out_opacity: PSingle): Integer; cdecl;

/// <summary>Set the window as a modal for another window.</summary>
/// <param name="modal_window">the window that should be set modal</param>
/// <param name="parent_window">the parent window for the modal window</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.</remarks>
SDL_SetWindowModalFor: function(modal_window: PSDL_Window; parent_window: PSDL_Window): Integer; cdecl;

/// <summary>Explicitly set input focus to the window.</summary>
/// <remarks>You almost certainly want SDL_RaiseWindow() instead of this function. Use
/// this with caution, as you might give focus to a window that is completely
/// obscured by other windows.</remarks>
/// <param name="window">the window that should get the input focus</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_RaiseWindow</remarks>
SDL_SetWindowInputFocus: function(window: PSDL_Window): Integer; cdecl;

/// <summary>Set the gamma ramp for the display that owns a given window.</summary>
/// <remarks>Set the gamma translation table for the red, green, and blue channels of
/// the video hardware. Each table is an array of 256 16-bit quantities,
/// representing a mapping between the input and output for that channel. The
/// input is the index into the array, and the output is the 16-bit gamma value
/// at that index, scaled to the output color precision.
/// 
/// Despite the name and signature, this method sets the gamma ramp of the
/// entire display, not an individual window. A window is considered to be
/// owned by the display that contains the window's center pixel. (The index of
/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma
/// ramp set will not follow the window if it is moved to another display.</remarks>
/// <param name="window">the window used to select the display whose gamma ramp will
///   be changed</param>
/// <param name="red">a 256 element array of 16-bit quantities representing the
///   translation table for the red channel, or NULL</param>
/// <param name="green">a 256 element array of 16-bit quantities representing the
///   translation table for the green channel, or NULL</param>
/// <param name="blue">a 256 element array of 16-bit quantities representing the
///   translation table for the blue channel, or NULL</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetWindowGammaRamp</remarks>
SDL_SetWindowGammaRamp: function(window: PSDL_Window; const red: PUint16; const green: PUint16; const blue: PUint16): Integer; cdecl;

/// <summary>Get the gamma ramp for a given window's display.</summary>
/// <remarks>Despite the name and signature, this method retrieves the gamma ramp of the
/// entire display, not an individual window. A window is considered to be
/// owned by the display that contains the window's center pixel. (The index of
/// this display can be retrieved using SDL_GetWindowDisplayIndex().)</remarks>
/// <param name="window">the window used to select the display whose gamma ramp will
///   be queried</param>
/// <param name="red">a 256 element array of 16-bit quantities filled in with the
///   translation table for the red channel, or NULL</param>
/// <param name="green">a 256 element array of 16-bit quantities filled in with the
///   translation table for the green channel, or NULL</param>
/// <param name="blue">a 256 element array of 16-bit quantities filled in with the
///   translation table for the blue channel, or NULL</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetWindowGammaRamp</remarks>
SDL_GetWindowGammaRamp: function(window: PSDL_Window; red: PUint16; green: PUint16; blue: PUint16): Integer; cdecl;

/// <summary>Provide a callback that decides if a window region has special properties.</summary>
/// <remarks>Normally windows are dragged and resized by decorations provided by the
/// system window manager (a title bar, borders, etc), but for some apps, it
/// makes sense to drag them from somewhere else inside the window itself; for
/// example, one might have a borderless window that wants to be draggable from
/// any part, or simulate its own title bar, etc.
/// 
/// This function lets the app provide a callback that designates pieces of a
/// given window as special. This callback is run during event processing if we
/// need to tell the OS to treat a region of the window specially; the use of
/// this callback is known as "hit testing."
/// 
/// Mouse input may not be delivered to your application if it is within a
/// special area; the OS will often apply that input to moving the window or
/// resizing the window and not deliver it to the application.
/// 
/// Specifying NULL for a callback disables hit-testing. Hit-testing is
/// disabled by default.
/// 
/// Platforms that don't support this functionality will return -1
/// unconditionally, even if you're attempting to disable hit-testing.
/// 
/// Your callback may fire at any time, and its firing does not indicate any
/// specific behavior (for example, on Windows, this certainly might fire when
/// the OS is deciding whether to drag your window, but it fires for lots of
/// other reasons, too, some unrelated to anything you probably care about _and
/// when the mouse isn't actually at the location it is testing_). Since this
/// can fire at any time, you should try to keep your callback efficient,
/// devoid of allocations, etc.</remarks>
/// <param name="window">the window to set hit-testing on</param>
/// <param name="callback">the function to call when doing a hit-test</param>
/// <param name="callback_data">an app-defined void pointer passed to **callback**</param>
/// <returns>0 on success or -1 on error (including unsupported); call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.</remarks>
SDL_SetWindowHitTest: function(window: PSDL_Window; callback: SDL_HitTest; callback_data: Pointer): Integer; cdecl;

/// <summary>Request a window to demand attention from the user.</summary>
/// <param name="window">the window to be flashed</param>
/// <param name="operation">the flash operation</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_FlashWindow: function(window: PSDL_Window; operation: SDL_FlashOperation): Integer; cdecl;

/// <summary>Destroy a window.</summary>
/// <remarks>If `window` is NULL, this function will return immediately after setting
/// the SDL error message to "Invalid window". See SDL_GetError().</remarks>
/// <param name="window">the window to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateWindow
/// 
/// SDL_CreateWindowFrom</remarks>
SDL_DestroyWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Check whether the screensaver is currently enabled.</summary>
/// <remarks>The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2
/// the screensaver was enabled by default.
/// 
/// The default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.</remarks>
/// <returns>SDL_TRUE if the screensaver is enabled, SDL_FALSE if it is
///   disabled.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DisableScreenSaver
/// 
/// SDL_EnableScreenSaver</remarks>
SDL_IsScreenSaverEnabled: function(): SDL_bool; cdecl;

/// <summary>Allow the screen to be blanked by a screen saver.</summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DisableScreenSaver
/// 
/// SDL_IsScreenSaverEnabled</remarks>
SDL_EnableScreenSaver: procedure(); cdecl;

/// <summary>Prevent the screen from being blanked by a screen saver.</summary>
/// <remarks>If you disable the screensaver, it is automatically re-enabled when SDL
/// quits.
/// This function is available since SDL 2.0.0.
/// SDL_EnableScreenSaver
/// 
/// SDL_IsScreenSaverEnabled</remarks>
SDL_DisableScreenSaver: procedure(); cdecl;

/// <summary>Dynamically load an OpenGL library.</summary>
/// <remarks>This should be done after initializing the video driver, but before
/// creating any OpenGL windows. If no OpenGL library is loaded, the default
/// library will be loaded upon creation of the first OpenGL window.
/// 
/// If you do this, you need to retrieve all of the GL functions used in your
/// program from the dynamic library using SDL_GL_GetProcAddress().</remarks>
/// <param name="path">the platform dependent OpenGL library name, or NULL to open the
///   default OpenGL library</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_GetProcAddress
/// 
/// SDL_GL_UnloadLibrary</remarks>
SDL_GL_LoadLibrary: function(const path: PUTF8Char): Integer; cdecl;

/// <summary>Get an OpenGL function by name.</summary>
/// <remarks>If the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all
/// GL functions must be retrieved this way. Usually this is used to retrieve
/// function pointers to OpenGL extensions.
/// 
/// There are some quirks to looking up OpenGL functions that require some
/// extra care from the application. If you code carefully, you can handle
/// these quirks without any platform-specific code, though:
/// 
/// - On Windows, function pointers are specific to the current GL context;
/// this means you need to have created a GL context and made it current
/// before calling SDL_GL_GetProcAddress(). If you recreate your context or
/// create a second context, you should assume that any existing function
/// pointers aren't valid to use with it. This is (currently) a
/// Windows-specific limitation, and in practice lots of drivers don't suffer
/// this limitation, but it is still the way the wgl API is documented to
/// work and you should expect crashes if you don't respect it. Store a copy
/// of the function pointers that comes and goes with context lifespan.
/// - On X11, function pointers returned by this function are valid for any
/// context, and can even be looked up before a context is created at all.
/// This means that, for at least some common OpenGL implementations, if you
/// look up a function that doesn't exist, you'll get a non-NULL result that
/// is _NOT_ safe to call. You must always make sure the function is actually
/// available for a given GL context before calling it, by checking for the
/// existence of the appropriate extension with SDL_GL_ExtensionSupported(),
/// or verifying that the version of OpenGL you're using offers the function
/// as core functionality.
/// - Some OpenGL drivers, on all platforms, *will* return NULL if a function
/// isn't supported, but you can't count on this behavior. Check for
/// extensions you use, and if you get a NULL anyway, act as if that
/// extension wasn't available. This is probably a bug in the driver, but you
/// can code defensively for this scenario anyhow.
/// - Just because you're on Linux/Unix, don't assume you'll be using X11.
/// Next-gen display servers are waiting to replace it, and may or may not
/// make the same promises about function pointers.
/// - OpenGL function pointers must be declared `APIENTRY` as in the example
/// code. This will ensure the proper calling convention is followed on
/// platforms where this matters (Win32) thereby avoiding stack corruption.</remarks>
/// <param name="proc">the name of an OpenGL function</param>
/// <returns>a pointer to the named OpenGL function. The returned pointer
///   should be cast to the appropriate function signature.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_ExtensionSupported
/// 
/// SDL_GL_LoadLibrary
/// 
/// SDL_GL_UnloadLibrary</remarks>
SDL_GL_GetProcAddress: function(const proc: PUTF8Char): Pointer; cdecl;

/// <summary>Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().</summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_LoadLibrary</remarks>
SDL_GL_UnloadLibrary: procedure(); cdecl;

/// <summary>Check if an OpenGL extension is supported for the current context.</summary>
/// <remarks>This function operates on the current GL context; you must have created a
/// context and it must be current before calling this function. Do not assume
/// that all contexts you create will have the same set of extensions
/// available, or that recreating an existing context will offer the same
/// extensions again.
/// 
/// While it's probably not a massive overhead, this function is not an O(1)
/// operation. Check the extensions you care about after creating the GL
/// context and save that information somewhere instead of calling the function
/// every time you need to know.</remarks>
/// <param name="extension">the name of the extension to check</param>
/// <returns>SDL_TRUE if the extension is supported, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GL_ExtensionSupported: function(const extension: PUTF8Char): SDL_bool; cdecl;

/// <summary>Reset all previously set OpenGL context attributes to their default values.</summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_GL_GetAttribute
/// 
/// SDL_GL_SetAttribute</remarks>
SDL_GL_ResetAttributes: procedure(); cdecl;

/// <summary>Set an OpenGL window attribute before window creation.</summary>
/// <remarks>This function sets the OpenGL attribute `attr` to `value`. The requested
/// attributes should be set before creating an OpenGL window. You should use
/// SDL_GL_GetAttribute() to check the values after creating the OpenGL
/// context, since the values obtained can differ from the requested ones.</remarks>
/// <param name="attr">an SDL_GLattr enum value specifying the OpenGL attribute to set</param>
/// <param name="value">the desired value for the attribute</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_GetAttribute
/// 
/// SDL_GL_ResetAttributes</remarks>
SDL_GL_SetAttribute: function(attr: SDL_GLattr; value: Integer): Integer; cdecl;

/// <summary>Get the actual value for an attribute from the current context.</summary>
/// <param name="attr">an SDL_GLattr enum value specifying the OpenGL attribute to get</param>
/// <param name="value">a pointer filled in with the current value of `attr`</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_ResetAttributes
/// 
/// SDL_GL_SetAttribute</remarks>
SDL_GL_GetAttribute: function(attr: SDL_GLattr; value: PInteger): Integer; cdecl;

/// <summary>Create an OpenGL context for an OpenGL window, and make it current.</summary>
/// <remarks>Windows users new to OpenGL should note that, for historical reasons, GL
/// functions added after OpenGL version 1.1 are not available by default.
/// Those functions must be loaded at run-time, either with an OpenGL
/// extension-handling library or with SDL_GL_GetProcAddress() and its related
/// functions.
/// 
/// SDL_GLContext is an alias for `void *`. It's opaque to the application.</remarks>
/// <param name="window">the window to associate with the context</param>
/// <returns>the OpenGL context associated with `window` or NULL on error; call
///   SDL_GetError() for more details.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_DeleteContext
/// 
/// SDL_GL_MakeCurrent</remarks>
SDL_GL_CreateContext: function(window: PSDL_Window): SDL_GLContext; cdecl;

/// <summary>Set up an OpenGL context for rendering into an OpenGL window.</summary>
/// <remarks>The context must have been created with a compatible window.</remarks>
/// <param name="window">the window to associate with the context</param>
/// <param name="context">the OpenGL context to associate with the window</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_CreateContext</remarks>
SDL_GL_MakeCurrent: function(window: PSDL_Window; context: SDL_GLContext): Integer; cdecl;

/// <summary>Get the currently active OpenGL window.</summary>
/// <returns>the currently active OpenGL window on success or NULL on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GL_GetCurrentWindow: function(): PSDL_Window; cdecl;

/// <summary>Get the currently active OpenGL context.</summary>
/// <returns>the currently active OpenGL context or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_MakeCurrent</remarks>
SDL_GL_GetCurrentContext: function(): SDL_GLContext; cdecl;

/// <summary>Get the size of a window's underlying drawable in pixels.</summary>
/// <remarks>This returns info useful for calling glViewport().
/// 
/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI
/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a
/// platform with high-DPI support (Apple calls this "Retina"), and not
/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.</remarks>
/// <param name="window">the window from which the drawable size should be queried</param>
/// <param name="w">a pointer to variable for storing the width in pixels, may be NULL</param>
/// <param name="h">a pointer to variable for storing the height in pixels, may be
///   NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.1.
/// SDL_CreateWindow
/// 
/// SDL_GetWindowSize</remarks>
SDL_GL_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;

/// <summary>Set the swap interval for the current OpenGL context.</summary>
/// <remarks>Some systems allow specifying -1 for the interval, to enable adaptive
/// vsync. Adaptive vsync works the same as vsync, but if you've already missed
/// the vertical retrace for a given frame, it swaps buffers immediately, which
/// might be less jarring for the user during occasional framerate drops. If an
/// application requests adaptive vsync and the system does not support it,
/// this function will fail and return -1. In such a case, you should probably
/// retry the call with 1 for the interval.
/// 
/// Adaptive vsync is implemented for some glX drivers with
/// GLX_EXT_swap_control_tear:
/// 
/// https://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt
/// 
/// and for some Windows drivers with WGL_EXT_swap_control_tear:
/// 
/// https://www.opengl.org/registry/specs/EXT/wgl_swap_control_tear.txt
/// 
/// Read more on the Khronos wiki:
/// https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync</remarks>
/// <param name="interval">0 for immediate updates, 1 for updates synchronized with
///   the vertical retrace, -1 for adaptive vsync</param>
/// <returns>0 on success or -1 if setting the swap interval is not supported;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_GetSwapInterval</remarks>
SDL_GL_SetSwapInterval: function(interval: Integer): Integer; cdecl;

/// <summary>Get the swap interval for the current OpenGL context.</summary>
/// <remarks>If the system can't determine the swap interval, or there isn't a valid
/// current context, this function will return 0 as a safe default.</remarks>
/// <returns>0 if there is no vertical retrace synchronization, 1 if the buffer
///   swap is synchronized with the vertical retrace, and -1 if late
///   swaps happen immediately instead of waiting for the next retrace;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_SetSwapInterval</remarks>
SDL_GL_GetSwapInterval: function(): Integer; cdecl;

/// <summary>Update a window with OpenGL rendering.</summary>
/// <remarks>This is used with double-buffered OpenGL contexts, which are the default.
/// 
/// On macOS, make sure you bind 0 to the draw framebuffer before swapping the
/// window, otherwise nothing will happen. If you aren't using
/// glBindFramebuffer(), this is the default and you won't have to do anything
/// extra.</remarks>
/// <param name="window">the window to change</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GL_SwapWindow: procedure(window: PSDL_Window); cdecl;

/// <summary>Delete an OpenGL context.</summary>
/// <param name="context">the OpenGL context to be deleted</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_CreateContext</remarks>
SDL_GL_DeleteContext: procedure(context: SDL_GLContext); cdecl;

/// <summary>Query the window which currently has keyboard focus.</summary>
/// <returns>the window with keyboard focus.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetKeyboardFocus: function(): PSDL_Window; cdecl;

/// <summary>Get a snapshot of the current state of the keyboard.</summary>
/// <remarks>The pointer returned is a pointer to an internal SDL array. It will be
/// valid for the whole lifetime of the application and should not be freed by
/// the caller.
/// 
/// A array element with a value of 1 means that the key is pressed and a value
/// of 0 means that it is not. Indexes into this array are obtained by using
/// SDL_Scancode values.
/// 
/// Use SDL_PumpEvents() to update the state array.
/// 
/// This function gives you the current state after all events have been
/// processed, so if a key or button has been pressed and released before you
/// process events, then the pressed state will never show up in the
/// SDL_GetKeyboardState() calls.
/// 
/// Note: This function doesn't take into account whether shift has been
/// pressed or not.</remarks>
/// <param name="numkeys">if non-NULL, receives the length of the returned array</param>
/// <returns>a pointer to an array of key states.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PumpEvents</remarks>
SDL_GetKeyboardState: function(numkeys: PInteger): PUint8; cdecl;

/// <summary>Get the current key modifier state for the keyboard.</summary>
/// <returns>an OR'd combination of the modifier keys for the keyboard. See
///   SDL_Keymod for details.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyboardState
/// 
/// SDL_SetModState</remarks>
SDL_GetModState: function(): SDL_Keymod; cdecl;

/// <summary>Set the current key modifier state for the keyboard.</summary>
/// <remarks>The inverse of SDL_GetModState(), SDL_SetModState() allows you to impose
/// modifier key states on your application. Simply pass your desired modifier
/// states into `modstate`. This value may be a bitwise, OR'd combination of
/// SDL_Keymod values.
/// 
/// This does not change the keyboard state, only the key modifier flags that
/// SDL reports.</remarks>
/// <param name="modstate">the desired SDL_Keymod for the keyboard</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetModState</remarks>
SDL_SetModState: procedure(modstate: SDL_Keymod); cdecl;

/// <summary>Get the key code corresponding to the given scancode according to the
/// current keyboard layout.</summary>
/// <remarks>See SDL_Keycode for details.</remarks>
/// <param name="scancode">the desired SDL_Scancode to query</param>
/// <returns>the SDL_Keycode that corresponds to the given SDL_Scancode.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyName
/// 
/// SDL_GetScancodeFromKey</remarks>
SDL_GetKeyFromScancode: function(scancode: SDL_Scancode): SDL_Keycode; cdecl;

/// <summary>Get the scancode corresponding to the given key code according to the
/// current keyboard layout.</summary>
/// <remarks>See SDL_Scancode for details.</remarks>
/// <param name="key">the desired SDL_Keycode to query</param>
/// <returns>the SDL_Scancode that corresponds to the given SDL_Keycode.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyFromScancode
/// 
/// SDL_GetScancodeName</remarks>
SDL_GetScancodeFromKey: function(key: SDL_Keycode): SDL_Scancode; cdecl;

/// <summary>Get a human-readable name for a scancode.</summary>
/// <remarks>See SDL_Scancode for details.
/// 
/// **Warning**: The returned name is by design not stable across platforms,
/// e.g. the name for `SDL_SCANCODE_LGUI` is "Left GUI" under Linux but "Left
/// Windows" under Microsoft Windows, and some scancodes like
/// `SDL_SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even
/// scancodes that share names, e.g. `SDL_SCANCODE_RETURN` and
/// `SDL_SCANCODE_RETURN2` (both called "Return"). This function is therefore
/// unsuitable for creating a stable cross-platform two-way mapping between
/// strings and scancodes.</remarks>
/// <param name="scancode">the desired SDL_Scancode to query</param>
/// <returns>a pointer to the name for the scancode. If the scancode doesn't
///   have a name this function returns an empty string ("").</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetScancodeFromKey
/// 
/// SDL_GetScancodeFromName</remarks>
SDL_GetScancodeName: function(scancode: SDL_Scancode): PUTF8Char; cdecl;

/// <summary>Get a scancode from a human-readable name.</summary>
/// <param name="name">the human-readable scancode name</param>
/// <returns>the SDL_Scancode, or `SDL_SCANCODE_UNKNOWN` if the name wasn't
///   recognized; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyFromName
/// 
/// SDL_GetScancodeFromKey
/// 
/// SDL_GetScancodeName</remarks>
SDL_GetScancodeFromName: function(const name: PUTF8Char): SDL_Scancode; cdecl;

/// <summary>Get a human-readable name for a key.</summary>
/// <remarks>See SDL_Scancode and SDL_Keycode for details.</remarks>
/// <param name="key">the desired SDL_Keycode to query</param>
/// <returns>a pointer to a UTF-8 string that stays valid at least until the
///   next call to this function. If you need it around any longer, you
///   must copy it. If the key doesn't have a name, this function
///   returns an empty string ("").</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyFromName
/// 
/// SDL_GetKeyFromScancode
/// 
/// SDL_GetScancodeFromKey</remarks>
SDL_GetKeyName: function(key: SDL_Keycode): PUTF8Char; cdecl;

/// <summary>Get a key code from a human-readable name.</summary>
/// <param name="name">the human-readable key name</param>
/// <returns>key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetKeyFromScancode
/// 
/// SDL_GetKeyName
/// 
/// SDL_GetScancodeFromName</remarks>
SDL_GetKeyFromName: function(const name: PUTF8Char): SDL_Keycode; cdecl;

/// <summary>Start accepting Unicode text input events.</summary>
/// <remarks>This function will start accepting Unicode text input events in the focused
/// SDL window, and start emitting SDL_TextInputEvent (SDL_TEXTINPUT) and
/// SDL_TextEditingEvent (SDL_TEXTEDITING) events. Please use this function in
/// pair with SDL_StopTextInput().
/// 
/// On some platforms using this function activates the screen keyboard.
/// This function is available since SDL 2.0.0.
/// SDL_SetTextInputRect
/// 
/// SDL_StopTextInput</remarks>
SDL_StartTextInput: procedure(); cdecl;

/// <summary>Check whether or not Unicode text input events are enabled.</summary>
/// <returns>SDL_TRUE if text input events are enabled else SDL_FALSE.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_StartTextInput</remarks>
SDL_IsTextInputActive: function(): SDL_bool; cdecl;

/// <summary>Stop receiving any text input events.</summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_StartTextInput</remarks>
SDL_StopTextInput: procedure(); cdecl;

/// <summary>Set the rectangle used to type Unicode text inputs.</summary>
/// <param name="rect">the SDL_Rect structure representing the rectangle to receive
///   text (ignored if NULL)</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_StartTextInput</remarks>
SDL_SetTextInputRect: procedure(rect: PSDL_Rect); cdecl;

/// <summary>Check whether the platform has screen keyboard support.</summary>
/// <returns>SDL_TRUE if the platform has some screen keyboard support or
///   SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_StartTextInput
/// 
/// SDL_IsScreenKeyboardShown</remarks>
SDL_HasScreenKeyboardSupport: function(): SDL_bool; cdecl;

/// <summary>Check whether the screen keyboard is shown for given window.</summary>
/// <param name="window">the window for which screen keyboard should be queried</param>
/// <returns>SDL_TRUE if screen keyboard is shown or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasScreenKeyboardSupport</remarks>
SDL_IsScreenKeyboardShown: function(window: PSDL_Window): SDL_bool; cdecl;

/// <summary>Get the window which currently has mouse focus.</summary>
/// <returns>the window with mouse focus.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetMouseFocus: function(): PSDL_Window; cdecl;

/// <summary>Retrieve the current state of the mouse.</summary>
/// <remarks>The current button state is returned as a button bitmask, which can be
/// tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the
/// left, 2 for middle, 3 for the right button), and `x` and `y` are set to the
/// mouse cursor position relative to the focus window. You can pass NULL for
/// either `x` or `y`.</remarks>
/// <param name="x">the x coordinate of the mouse cursor position relative to the
///   focus window</param>
/// <param name="y">the y coordinate of the mouse cursor position relative to the
///   focus window</param>
/// <returns>a 32-bit button bitmask of the current button state.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetGlobalMouseState
/// 
/// SDL_GetRelativeMouseState
/// 
/// SDL_PumpEvents</remarks>
SDL_GetMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;

/// <summary>Get the current state of the mouse in relation to the desktop.</summary>
/// <remarks>This works similarly to SDL_GetMouseState(), but the coordinates will be
/// reported relative to the top-left of the desktop. This can be useful if you
/// need to track the mouse outside of a specific window and SDL_CaptureMouse()
/// doesn't fit your needs. For example, it could be useful if you need to
/// track the mouse while dragging a window, where coordinates relative to a
/// window might not be in sync at all times.
/// 
/// Note: SDL_GetMouseState() returns the mouse position as SDL understands it
/// from the last pump of the event queue. This function, however, queries the
/// OS for the current mouse position, and as such, might be a slightly less
/// efficient function. Unless you know what you're doing and have a good
/// reason to use this function, you probably want SDL_GetMouseState() instead.</remarks>
/// <param name="x">filled in with the current X coord relative to the desktop; can be
///   NULL</param>
/// <param name="y">filled in with the current Y coord relative to the desktop; can be
///   NULL</param>
/// <returns>the current button state as a bitmask which can be tested using
///   the SDL_BUTTON(X) macros.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_CaptureMouse</remarks>
SDL_GetGlobalMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;

/// <summary>Retrieve the relative state of the mouse.</summary>
/// <remarks>The current button state is returned as a button bitmask, which can be
/// tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the
/// left, 2 for middle, 3 for the right button), and `x` and `y` are set to the
/// mouse deltas since the last call to SDL_GetRelativeMouseState() or since
/// event initialization. You can pass NULL for either `x` or `y`.</remarks>
/// <param name="x">a pointer filled with the last recorded x coordinate of the mouse</param>
/// <param name="y">a pointer filled with the last recorded y coordinate of the mouse</param>
/// <returns>a 32-bit button bitmask of the relative button state.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetMouseState</remarks>
SDL_GetRelativeMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;

/// <summary>Move the mouse cursor to the given position within the window.</summary>
/// <remarks>This function generates a mouse motion event.
/// 
/// Note that this function will appear to succeed, but not actually move the
/// mouse when used over Microsoft Remote Desktop.</remarks>
/// <param name="window">the window to move the mouse into, or NULL for the current
///   mouse focus</param>
/// <param name="x">the x coordinate within the window</param>
/// <param name="y">the y coordinate within the window</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WarpMouseGlobal</remarks>
SDL_WarpMouseInWindow: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;

/// <summary>Move the mouse to the given position in global screen space.</summary>
/// <remarks>This function generates a mouse motion event.
/// 
/// A failure of this function usually means that it is unsupported by a
/// platform.
/// 
/// Note that this function will appear to succeed, but not actually move the
/// mouse when used over Microsoft Remote Desktop.</remarks>
/// <param name="x">the x coordinate</param>
/// <param name="y">the y coordinate</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_WarpMouseInWindow</remarks>
SDL_WarpMouseGlobal: function(x: Integer; y: Integer): Integer; cdecl;

/// <summary>Set relative mouse mode.</summary>
/// <remarks>While the mouse is in relative mode, the cursor is hidden, and the driver
/// will try to report continuous motion in the current window. Only relative
/// motion events will be delivered, the mouse position will not change.
/// 
/// Note that this function will not be able to provide continuous relative
/// motion when used over Microsoft Remote Desktop, instead motion is limited
/// to the bounds of the screen.
/// 
/// This function will flush any pending mouse motion.</remarks>
/// <param name="enabled">SDL_TRUE to enable relative mode, SDL_FALSE to disable.</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>If relative mode is not supported, this returns -1.
/// This function is available since SDL 2.0.0.
/// SDL_GetRelativeMouseMode</remarks>
SDL_SetRelativeMouseMode: function(enabled: SDL_bool): Integer; cdecl;

/// <summary>Capture the mouse and to track input outside an SDL window.</summary>
/// <remarks>Capturing enables your app to obtain mouse events globally, instead of just
/// within your window. Not all video targets support this function. When
/// capturing is enabled, the current window will get all mouse events, but
/// unlike relative mode, no change is made to the cursor and it is not
/// restrained to your window.
/// 
/// This function may also deny mouse input to other windows--both those in
/// your application and others on the system--so you should use this function
/// sparingly, and in small bursts. For example, you might want to track the
/// mouse while the user is dragging something, until the user releases a mouse
/// button. It is not recommended that you capture the mouse for long periods
/// of time, such as the entire time your app is running. For that, you should
/// probably use SDL_SetRelativeMouseMode() or SDL_SetWindowGrab(), depending
/// on your goals.
/// 
/// While captured, mouse events still report coordinates relative to the
/// current (foreground) window, but those coordinates may be outside the
/// bounds of the window (including negative values). Capturing is only allowed
/// for the foreground window. If the window loses focus while capturing, the
/// capture will be disabled automatically.
/// 
/// While capturing is enabled, the current window will have the
/// `SDL_WINDOW_MOUSE_CAPTURE` flag set.</remarks>
/// <param name="enabled">SDL_TRUE to enable capturing, SDL_FALSE to disable.</param>
/// <returns>0 on success or -1 if not supported; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_GetGlobalMouseState</remarks>
SDL_CaptureMouse: function(enabled: SDL_bool): Integer; cdecl;

/// <summary>Query whether relative mouse mode is enabled.</summary>
/// <returns>SDL_TRUE if relative mode is enabled or SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRelativeMouseMode</remarks>
SDL_GetRelativeMouseMode: function(): SDL_bool; cdecl;

/// <summary>Create a cursor using the specified bitmap data and mask (in MSB format).</summary>
/// <remarks>`mask` has to be in MSB (Most Significant Bit) format.
/// 
/// The cursor width (`w`) must be a multiple of 8 bits.
/// 
/// The cursor is created in black and white according to the following:
/// 
/// - data=0, mask=1: white
/// - data=1, mask=1: black
/// - data=0, mask=0: transparent
/// - data=1, mask=0: inverted color if possible, black if not.
/// 
/// Cursors created with this function must be freed with SDL_FreeCursor().
/// 
/// If you want to have a color cursor, or create your cursor from an
/// SDL_Surface, you should use SDL_CreateColorCursor(). Alternately, you can
/// hide the cursor and draw your own as part of your game's rendering, but it
/// will be bound to the framerate.
/// 
/// Also, since SDL 2.0.0, SDL_CreateSystemCursor() is available, which
/// provides twelve readily available system cursors to pick from.</remarks>
/// <param name="data">the color value for each pixel of the cursor</param>
/// <param name="mask">the mask value for each pixel of the cursor</param>
/// <param name="w">the width of the cursor</param>
/// <param name="h">the height of the cursor</param>
/// <param name="hot_x">the X-axis location of the upper left corner of the cursor
///   relative to the actual mouse position</param>
/// <param name="hot_y">the Y-axis location of the upper left corner of the cursor
///   relative to the actual mouse position</param>
/// <returns>a new cursor with the specified parameters on success or NULL on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreeCursor
/// 
/// SDL_SetCursor
/// 
/// SDL_ShowCursor</remarks>
SDL_CreateCursor: function(const data: PUint8; const mask: PUint8; w: Integer; h: Integer; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;

/// <summary>Create a color cursor.</summary>
/// <param name="surface">an SDL_Surface structure representing the cursor image</param>
/// <param name="hot_x">the x position of the cursor hot spot</param>
/// <param name="hot_y">the y position of the cursor hot spot</param>
/// <returns>the new cursor on success or NULL on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateCursor
/// 
/// SDL_FreeCursor</remarks>
SDL_CreateColorCursor: function(surface: PSDL_Surface; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;

/// <summary>Create a system cursor.</summary>
/// <param name="id">an SDL_SystemCursor enum value</param>
/// <returns>a cursor on success or NULL on failure; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FreeCursor</remarks>
SDL_CreateSystemCursor: function(id: SDL_SystemCursor): PSDL_Cursor; cdecl;

/// <summary>Set the active cursor.</summary>
/// <remarks>This function sets the currently active cursor to the specified one. If the
/// cursor is currently visible, the change will be immediately represented on
/// the display. SDL_SetCursor(NULL) can be used to force cursor redraw, if
/// this is desired for any reason.</remarks>
/// <param name="cursor">a cursor to make active</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateCursor
/// 
/// SDL_GetCursor
/// 
/// SDL_ShowCursor</remarks>
SDL_SetCursor: procedure(cursor: PSDL_Cursor); cdecl;

/// <summary>Get the active cursor.</summary>
/// <remarks>This function returns a pointer to the current cursor which is owned by the
/// library. It is not necessary to free the cursor with SDL_FreeCursor().</remarks>
/// <returns>the active cursor or NULL if there is no mouse.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetCursor</remarks>
SDL_GetCursor: function(): PSDL_Cursor; cdecl;

/// <summary>Get the default cursor.</summary>
/// <returns>the default cursor on success or NULL on failure.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSystemCursor</remarks>
SDL_GetDefaultCursor: function(): PSDL_Cursor; cdecl;

/// <summary>Free a previously-created cursor.</summary>
/// <remarks>Use this function to free cursor resources created with SDL_CreateCursor(),
/// SDL_CreateColorCursor() or SDL_CreateSystemCursor().</remarks>
/// <param name="cursor">the cursor to free</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateColorCursor
/// 
/// SDL_CreateCursor
/// 
/// SDL_CreateSystemCursor</remarks>
SDL_FreeCursor: procedure(cursor: PSDL_Cursor); cdecl;

/// <summary>Toggle whether or not the cursor is shown.</summary>
/// <remarks>The cursor starts off displayed but can be turned off. Passing `SDL_ENABLE`
/// displays the cursor and passing `SDL_DISABLE` hides it.
/// 
/// The current state of the mouse cursor can be queried by passing
/// `SDL_QUERY`; either `SDL_DISABLE` or `SDL_ENABLE` will be returned.</remarks>
/// <param name="toggle">`SDL_ENABLE` to show the cursor, `SDL_DISABLE` to hide it,
///   `SDL_QUERY` to query the current state without changing it.</param>
/// <returns>`SDL_ENABLE` if the cursor is shown, or `SDL_DISABLE` if the
///   cursor is hidden, or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateCursor
/// 
/// SDL_SetCursor</remarks>
SDL_ShowCursor: function(toggle: Integer): Integer; cdecl;

/// <summary>Locking for multi-threaded access to the joystick API</summary>
/// <remarks>If you are using the joystick API or handling events from multiple threads
/// you should use these locking functions to protect access to the joysticks.
/// 
/// In particular, you are guaranteed that the joystick list won't change, so
/// the API functions that take a joystick index will be valid, and joystick
/// and game controller events will not be delivered.
/// This function is available since SDL 2.0.7.</remarks>
SDL_LockJoysticks: procedure(); cdecl;

/// <summary>Unlocking for multi-threaded access to the joystick API</summary>
/// <remarks>If you are using the joystick API or handling events from multiple threads
/// you should use these locking functions to protect access to the joysticks.
/// 
/// In particular, you are guaranteed that the joystick list won't change, so
/// the API functions that take a joystick index will be valid, and joystick
/// and game controller events will not be delivered.
/// This function is available since SDL 2.0.7.</remarks>
SDL_UnlockJoysticks: procedure(); cdecl;

/// <summary>Count the number of joysticks attached to the system.</summary>
/// <returns>the number of attached joysticks on success or a negative error
///   code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickName
/// 
/// SDL_JoystickOpen</remarks>
SDL_NumJoysticks: function(): Integer; cdecl;

/// <summary>Get the implementation dependent name of a joystick.</summary>
/// <remarks>This can be called before any joysticks are opened.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system)</param>
/// <returns>the name of the selected joystick. If no name can be found, this
///   function returns NULL; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickName
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickNameForIndex: function(device_index: Integer): PUTF8Char; cdecl;

/// <summary>Get the player index of a joystick, or -1 if it's not available This can be
/// called before any joysticks are opened.</summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_JoystickGetDevicePlayerIndex: function(device_index: Integer): Integer; cdecl;

/// <summary>Get the implementation-dependent GUID for the joystick at a given device
/// index.</summary>
/// <remarks>This function can be called before any joysticks are opened.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the GUID of the selected joystick. If called on an invalid index,
///   this function returns a zero GUID</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetGUID
/// 
/// SDL_JoystickGetGUIDString</remarks>
SDL_JoystickGetDeviceGUID: function(device_index: Integer): SDL_JoystickGUID; cdecl;

/// <summary>Get the USB vendor ID of a joystick, if available.</summary>
/// <remarks>This can be called before any joysticks are opened. If the vendor ID isn't
/// available this function returns 0.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the USB vendor ID of the selected joystick. If called on an
///   invalid index, this function returns zero</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetDeviceVendor: function(device_index: Integer): Uint16; cdecl;

/// <summary>Get the USB product ID of a joystick, if available.</summary>
/// <remarks>This can be called before any joysticks are opened. If the product ID isn't
/// available this function returns 0.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the USB product ID of the selected joystick. If called on an
///   invalid index, this function returns zero</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetDeviceProduct: function(device_index: Integer): Uint16; cdecl;

/// <summary>Get the product version of a joystick, if available.</summary>
/// <remarks>This can be called before any joysticks are opened. If the product version
/// isn't available this function returns 0.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the product version of the selected joystick. If called on an
///   invalid index, this function returns zero</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetDeviceProductVersion: function(device_index: Integer): Uint16; cdecl;

/// <summary>Get the type of a joystick, if available.</summary>
/// <remarks>This can be called before any joysticks are opened.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the SDL_JoystickType of the selected joystick. If called on an
///   invalid index, this function returns `SDL_JOYSTICK_TYPE_UNKNOWN`</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetDeviceType: function(device_index: Integer): SDL_JoystickType; cdecl;

/// <summary>Get the instance ID of a joystick.</summary>
/// <remarks>This can be called before any joysticks are opened. If the index is out of
/// range, this function will return -1.</remarks>
/// <param name="device_index">the index of the joystick to query (the N'th joystick
///   on the system</param>
/// <returns>the instance id of the selected joystick. If called on an invalid
///   index, this function returns zero</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetDeviceInstanceID: function(device_index: Integer): SDL_JoystickID; cdecl;

/// <summary>Open a joystick for use.</summary>
/// <remarks>The `device_index` argument refers to the N'th joystick presently
/// recognized by SDL on the system. It is **NOT** the same as the instance ID
/// used to identify the joystick in future events. See
/// SDL_JoystickInstanceID() for more details about instance IDs.
/// 
/// The joystick subsystem must be initialized before a joystick can be opened
/// for use.</remarks>
/// <param name="device_index">the index of the joystick to query</param>
/// <returns>a joystick identifier or NULL if an error occurred; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickClose
/// 
/// SDL_JoystickInstanceID</remarks>
SDL_JoystickOpen: function(device_index: Integer): PSDL_Joystick; cdecl;

/// <summary>Get the SDL_Joystick associated with an instance id.</summary>
/// <param name="instance_id">the instance id to get the SDL_Joystick for</param>
/// <returns>an SDL_Joystick on success or NULL on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.</remarks>
SDL_JoystickFromInstanceID: function(instance_id: SDL_JoystickID): PSDL_Joystick; cdecl;

/// <summary>Get the SDL_Joystick associated with a player index.</summary>
/// <param name="player_index">the player index to get the SDL_Joystick for</param>
/// <returns>an SDL_Joystick on success or NULL on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.</remarks>
SDL_JoystickFromPlayerIndex: function(player_index: Integer): PSDL_Joystick; cdecl;

/// <summary>Attach a new virtual joystick.</summary>
/// <returns>the joystick's device index, or -1 if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickAttachVirtual: function(&type: SDL_JoystickType; naxes: Integer; nbuttons: Integer; nhats: Integer): Integer; cdecl;

/// <summary>Detach a virtual joystick.</summary>
/// <param name="device_index">a value previously returned from
///   SDL_JoystickAttachVirtual()</param>
/// <returns>0 on success, or -1 if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickDetachVirtual: function(device_index: Integer): Integer; cdecl;

/// <summary>Query whether or not the joystick at a given device index is virtual.</summary>
/// <param name="device_index">a joystick device index.</param>
/// <returns>SDL_TRUE if the joystick is virtual, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickIsVirtual: function(device_index: Integer): SDL_bool; cdecl;

/// <summary>Set values on an opened, virtual-joystick's axis.</summary>
/// <remarks>Please note that values set here will not be applied until the next call to
/// SDL_JoystickUpdate, which can either be called directly, or can be called
/// indirectly through various other SDL APIs, including, but not limited to
/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
/// SDL_WaitEvent.</remarks>
/// <param name="joystick">the virtual joystick on which to set state.</param>
/// <param name="axis">the specific axis on the virtual joystick to set.</param>
/// <param name="value">the new value for the specified axis.</param>
/// <returns>0 on success, -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickSetVirtualAxis: function(joystick: PSDL_Joystick; axis: Integer; value: Sint16): Integer; cdecl;

/// <summary>Set values on an opened, virtual-joystick's button.</summary>
/// <remarks>Please note that values set here will not be applied until the next call to
/// SDL_JoystickUpdate, which can either be called directly, or can be called
/// indirectly through various other SDL APIs, including, but not limited to
/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
/// SDL_WaitEvent.</remarks>
/// <param name="joystick">the virtual joystick on which to set state.</param>
/// <param name="button">the specific button on the virtual joystick to set.</param>
/// <param name="value">the new value for the specified button.</param>
/// <returns>0 on success, -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickSetVirtualButton: function(joystick: PSDL_Joystick; button: Integer; value: Uint8): Integer; cdecl;

/// <summary>Set values on an opened, virtual-joystick's hat.</summary>
/// <remarks>Please note that values set here will not be applied until the next call to
/// SDL_JoystickUpdate, which can either be called directly, or can be called
/// indirectly through various other SDL APIs, including, but not limited to
/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
/// SDL_WaitEvent.</remarks>
/// <param name="joystick">the virtual joystick on which to set state.</param>
/// <param name="hat">the specific hat on the virtual joystick to set.</param>
/// <param name="value">the new value for the specified hat.</param>
/// <returns>0 on success, -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickSetVirtualHat: function(joystick: PSDL_Joystick; hat: Integer; value: Uint8): Integer; cdecl;

/// <summary>Get the implementation dependent name of a joystick.</summary>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the name of the selected joystick. If no name can be found, this
///   function returns NULL; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickNameForIndex
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickName: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;

/// <summary>Get the player index of an opened joystick.</summary>
/// <remarks>For XInput controllers this returns the XInput user index. Many joysticks
/// will not be able to supply this information.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the player index, or -1 if it's not available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_JoystickGetPlayerIndex: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Set the player index of an opened joystick.</summary>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <param name="player_index">the player index to set.</param></summary>
/// <remarks>This function is available since SDL 2.0.12.</remarks>
SDL_JoystickSetPlayerIndex: procedure(joystick: PSDL_Joystick; player_index: Integer); cdecl;

/// <summary>Get the implementation-dependent GUID for the joystick.</summary>
/// <remarks>This function requires an open joystick.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the GUID of the given joystick. If called on an invalid index,
///   this function returns a zero GUID; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetDeviceGUID
/// 
/// SDL_JoystickGetGUIDString</remarks>
SDL_JoystickGetGUID: function(joystick: PSDL_Joystick): SDL_JoystickGUID; cdecl;

/// <summary>Get the USB vendor ID of an opened joystick, if available.</summary>
/// <remarks>If the vendor ID isn't available this function returns 0.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the USB vendor ID of the selected joystick, or 0 if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetVendor: function(joystick: PSDL_Joystick): Uint16; cdecl;

/// <summary>Get the USB product ID of an opened joystick, if available.</summary>
/// <remarks>If the product ID isn't available this function returns 0.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the USB product ID of the selected joystick, or 0 if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetProduct: function(joystick: PSDL_Joystick): Uint16; cdecl;

/// <summary>Get the product version of an opened joystick, if available.</summary>
/// <remarks>If the product version isn't available this function returns 0.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the product version of the selected joystick, or 0 if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetProductVersion: function(joystick: PSDL_Joystick): Uint16; cdecl;

/// <summary>Get the serial number of an opened joystick, if available.</summary>
/// <remarks>Returns the serial number of the joystick, or NULL if it is not available.</remarks>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the serial number of the selected joystick, or NULL if
///   unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickGetSerial: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;

/// <summary>Get the type of an opened joystick.</summary>
/// <param name="joystick">the SDL_Joystick obtained from SDL_JoystickOpen()</param>
/// <returns>the SDL_JoystickType of the selected joystick.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetType: function(joystick: PSDL_Joystick): SDL_JoystickType; cdecl;

/// <summary>Get an ASCII string representation for a given SDL_JoystickGUID.</summary>
/// <remarks>You should supply at least 33 bytes for pszGUID.</remarks>
/// <param name="guid">the SDL_JoystickGUID you wish to convert to string</param>
/// <param name="pszGUID">buffer in which to write the ASCII string</param>
/// <param name="cbGUID">the size of pszGUID</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetDeviceGUID
/// 
/// SDL_JoystickGetGUID
/// 
/// SDL_JoystickGetGUIDFromString</remarks>
SDL_JoystickGetGUIDString: procedure(guid: SDL_JoystickGUID; pszGUID: PUTF8Char; cbGUID: Integer); cdecl;

/// <summary>Convert a GUID string into a SDL_JoystickGUID structure.</summary>
/// <remarks>Performs no error checking. If this function is given a string containing
/// an invalid GUID, the function will silently succeed, but the GUID generated
/// will not be useful.</remarks>
/// <param name="pchGUID">string containing an ASCII representation of a GUID</param>
/// <returns>a SDL_JoystickGUID structure.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetGUIDString</remarks>
SDL_JoystickGetGUIDFromString: function(const pchGUID: PUTF8Char): SDL_JoystickGUID; cdecl;

/// <summary>Get the status of a specified joystick.</summary>
/// <param name="joystick">the joystick to query</param>
/// <returns>SDL_TRUE if the joystick has been opened, SDL_FALSE if it has not;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickClose
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickGetAttached: function(joystick: PSDL_Joystick): SDL_bool; cdecl;

/// <summary>Get the instance ID of an opened joystick.</summary>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <returns>the instance ID of the specified joystick on success or a negative
///   error code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickOpen</remarks>
SDL_JoystickInstanceID: function(joystick: PSDL_Joystick): SDL_JoystickID; cdecl;

/// <summary>Get the number of general axis controls on a joystick.</summary>
/// <remarks>Often, the directional pad on a game controller will either look like 4
/// separate buttons or a POV hat, and not axes, but all of this is up to the
/// device and platform.</remarks>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <returns>the number of axis controls/number of axes on success or a
///   negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetAxis
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickNumAxes: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Get the number of trackballs on a joystick.</summary>
/// <remarks>Joystick trackballs have only relative motion events associated with them
/// and their state cannot be polled.
/// 
/// Most joysticks do not have trackballs.</remarks>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <returns>the number of trackballs on success or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetBall</remarks>
SDL_JoystickNumBalls: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Get the number of POV hats on a joystick.</summary>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <returns>the number of POV hats on success or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetHat
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickNumHats: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Get the number of buttons on a joystick.</summary>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <returns>the number of buttons on success or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetButton
/// 
/// SDL_JoystickOpen</remarks>
SDL_JoystickNumButtons: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Update the current state of the open joysticks.</summary>
/// <remarks>This is called automatically by the event loop if any joystick events are
/// enabled.
/// This function is available since SDL 2.0.0.
/// SDL_JoystickEventState</remarks>
SDL_JoystickUpdate: procedure(); cdecl;

/// <summary>Enable/disable joystick event polling.</summary>
/// <remarks>If joystick events are disabled, you must call SDL_JoystickUpdate()
/// yourself and manually check the state of the joystick when you want
/// joystick information.
/// 
/// It is recommended that you leave joystick event handling enabled.
/// 
/// **WARNING**: Calling this function may delete all events currently in SDL's
/// event queue.</remarks>
/// <param name="state">can be one of `SDL_QUERY`, `SDL_IGNORE`, or `SDL_ENABLE`</param>
/// <returns>1 if enabled, 0 if disabled, or a negative error code on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>If `state` is `SDL_QUERY` then the current state is returned,
/// otherwise the new processing state is returned.
/// This function is available since SDL 2.0.0.
/// SDL_GameControllerEventState</remarks>
SDL_JoystickEventState: function(state: Integer): Integer; cdecl;

/// <summary>Get the current state of an axis control on a joystick.</summary>
/// <remarks>SDL makes no promises about what part of the joystick any given axis refers
/// to. Your game should have some sort of configuration UI to let users
/// specify what each axis should be bound to. Alternately, SDL's higher-level
/// Game Controller API makes a great effort to apply order to this lower-level
/// interface, so you know that a specific axis is the "left thumb stick," etc.
/// 
/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to
/// 32767) representing the current position of the axis. It may be necessary
/// to impose certain tolerances on these values to account for jitter.</remarks>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <param name="axis">the axis to query; the axis indices start at index 0</param>
/// <returns>a 16-bit signed integer representing the current position of the
///   axis or 0 on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickNumAxes</remarks>
SDL_JoystickGetAxis: function(joystick: PSDL_Joystick; axis: Integer): Sint16; cdecl;

/// <summary>Get the initial state of an axis control on a joystick.</summary>
/// <remarks>The state is a value ranging from -32768 to 32767.
/// 
/// The axis indices start at index 0.</remarks>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <param name="axis">the axis to query; the axis indices start at index 0</param>
/// <param name="state">Upon return, the initial value is supplied here.</param>
/// <returns>SDL_TRUE if this axis has any initial value, or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_JoystickGetAxisInitialState: function(joystick: PSDL_Joystick; axis: Integer; state: PSint16): SDL_bool; cdecl;

/// <summary>Get the current state of a POV hat on a joystick.</summary>
/// <remarks>The returned value will be one of the following positions:
/// 
/// - `SDL_HAT_CENTERED`
/// - `SDL_HAT_UP`
/// - `SDL_HAT_RIGHT`
/// - `SDL_HAT_DOWN`
/// - `SDL_HAT_LEFT`
/// - `SDL_HAT_RIGHTUP`
/// - `SDL_HAT_RIGHTDOWN`
/// - `SDL_HAT_LEFTUP`
/// - `SDL_HAT_LEFTDOWN`</remarks>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <param name="hat">the hat index to get the state from; indices start at index 0</param>
/// <returns>the current hat position.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickNumHats</remarks>
SDL_JoystickGetHat: function(joystick: PSDL_Joystick; hat: Integer): Uint8; cdecl;

/// <summary>Get the ball axis change since the last poll.</summary>
/// <remarks>Trackballs can only return relative motion since the last call to
/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.
/// 
/// Most joysticks do not have trackballs.</remarks>
/// <param name="joystick">the SDL_Joystick to query</param>
/// <param name="ball">the ball index to query; ball indices start at index 0</param>
/// <param name="dx">stores the difference in the x axis position since the last poll</param>
/// <param name="dy">stores the difference in the y axis position since the last poll</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickNumBalls</remarks>
SDL_JoystickGetBall: function(joystick: PSDL_Joystick; ball: Integer; dx: PInteger; dy: PInteger): Integer; cdecl;

/// <summary>Get the current state of a button on a joystick.</summary>
/// <param name="joystick">an SDL_Joystick structure containing joystick information</param>
/// <param name="button">the button index to get the state from; indices start at
///   index 0</param>
/// <returns>1 if the specified button is pressed, 0 otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickNumButtons</remarks>
SDL_JoystickGetButton: function(joystick: PSDL_Joystick; button: Integer): Uint8; cdecl;

/// <summary>Start a rumble effect.</summary>
/// <remarks>Each call to this function cancels any previous rumble effect, and calling
/// it with 0 intensity stops any rumbling.</remarks>
/// <param name="joystick">The joystick to vibrate</param>
/// <param name="low_frequency_rumble">The intensity of the low frequency (left)
///   rumble motor, from 0 to 0xFFFF</param>
/// <param name="high_frequency_rumble">The intensity of the high frequency (right)
///   rumble motor, from 0 to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if rumble isn't supported on this joystick</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.
/// SDL_JoystickHasRumble</remarks>
SDL_JoystickRumble: function(joystick: PSDL_Joystick; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;

/// <summary>Start a rumble effect in the joystick's triggers</summary>
/// <remarks>Each call to this function cancels any previous trigger rumble effect, and
/// calling it with 0 intensity stops any rumbling.
/// 
/// Note that this function is for _trigger_ rumble; the first joystick to
/// support this was the PlayStation 5's DualShock 5 controller. If you want
/// the (more common) whole-controller rumble, use SDL_JoystickRumble()
/// instead.</remarks>
/// <param name="joystick">The joystick to vibrate</param>
/// <param name="left_rumble">The intensity of the left trigger rumble motor, from 0
///   to 0xFFFF</param>
/// <param name="right_rumble">The intensity of the right trigger rumble motor, from 0
///   to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if trigger rumble isn't supported on this joystick</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_JoystickHasRumbleTriggers</remarks>
SDL_JoystickRumbleTriggers: function(joystick: PSDL_Joystick; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;

/// <summary>Query whether a joystick has an LED.</summary>
/// <remarks>An example of a joystick LED is the light on the back of a PlayStation 4's
/// DualShock 4 controller.</remarks>
/// <param name="joystick">The joystick to query</param>
/// <returns>SDL_TRUE if the joystick has a modifiable LED, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickHasLED: function(joystick: PSDL_Joystick): SDL_bool; cdecl;

/// <summary>Query whether a joystick has rumble support.</summary>
/// <param name="joystick">The joystick to query</param>
/// <returns>SDL_TRUE if the joystick has rumble, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_JoystickRumble</remarks>
SDL_JoystickHasRumble: function(joystick: PSDL_Joystick): SDL_bool; cdecl;

/// <summary>Query whether a joystick has rumble support on triggers.</summary>
/// <param name="joystick">The joystick to query</param>
/// <returns>SDL_TRUE if the joystick has trigger rumble, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_JoystickRumbleTriggers</remarks>
SDL_JoystickHasRumbleTriggers: function(joystick: PSDL_Joystick): SDL_bool; cdecl;

/// <summary>Update a joystick's LED color.</summary>
/// <remarks>An example of a joystick LED is the light on the back of a PlayStation 4's
/// DualShock 4 controller.</remarks>
/// <param name="joystick">The joystick to update</param>
/// <param name="red">The intensity of the red LED</param>
/// <param name="green">The intensity of the green LED</param>
/// <param name="blue">The intensity of the blue LED</param>
/// <returns>0 on success, -1 if this joystick does not have a modifiable LED</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_JoystickSetLED: function(joystick: PSDL_Joystick; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;

/// <summary>Send a joystick specific effect packet</summary>
/// <param name="joystick">The joystick to affect</param>
/// <param name="data">The data to send to the joystick</param>
/// <param name="size">The size of the data to send to the joystick</param>
/// <returns>0, or -1 if this joystick or driver doesn't support effect packets</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_JoystickSendEffect: function(joystick: PSDL_Joystick; const data: Pointer; size: Integer): Integer; cdecl;

/// <summary>Close a joystick previously opened with SDL_JoystickOpen().</summary>
/// <param name="joystick">The joystick device to close</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickOpen</remarks>
SDL_JoystickClose: procedure(joystick: PSDL_Joystick); cdecl;

/// <summary>Get the battery level of a joystick as SDL_JoystickPowerLevel.</summary>
/// <param name="joystick">the SDL_Joystick to query</param>
/// <returns>the current battery level as SDL_JoystickPowerLevel on success or
///   `SDL_JOYSTICK_POWER_UNKNOWN` if it is unknown</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.</remarks>
SDL_JoystickCurrentPowerLevel: function(joystick: PSDL_Joystick): SDL_JoystickPowerLevel; cdecl;

/// <summary>Locking for multi-threaded access to the sensor API</summary>
/// <remarks>If you are using the sensor API or handling events from multiple threads
/// you should use these locking functions to protect access to the sensors.
/// 
/// In particular, you are guaranteed that the sensor list won't change, so the
/// API functions that take a sensor index will be valid, and sensor events
/// will not be delivered.
/// This function is available since SDL 2.0.14.</remarks>
SDL_LockSensors: procedure(); cdecl;

SDL_UnlockSensors: procedure(); cdecl;

/// <summary>Count the number of sensors attached to the system right now.</summary>
/// <returns>the number of sensors detected.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_NumSensors: function(): Integer; cdecl;

/// <summary>Get the implementation dependent name of a sensor.</summary>
/// <param name="device_index">The sensor to obtain name from</param>
/// <returns>the sensor name, or NULL if `device_index` is out of range.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetDeviceName: function(device_index: Integer): PUTF8Char; cdecl;

/// <summary>Get the type of a sensor.</summary>
/// <param name="device_index">The sensor to get the type from</param>
/// <returns>the SDL_SensorType, or `SDL_SENSOR_INVALID` if `device_index` is
///   out of range.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetDeviceType: function(device_index: Integer): SDL_SensorType; cdecl;

/// <summary>Get the platform dependent type of a sensor.</summary>
/// <param name="device_index">The sensor to check</param>
/// <returns>the sensor platform dependent type, or -1 if `device_index` is out
///   of range.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetDeviceNonPortableType: function(device_index: Integer): Integer; cdecl;

/// <summary>Get the instance ID of a sensor.</summary>
/// <param name="device_index">The sensor to get instance id from</param>
/// <returns>the sensor instance ID, or -1 if `device_index` is out of range.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetDeviceInstanceID: function(device_index: Integer): SDL_SensorID; cdecl;

/// <summary>Open a sensor for use.</summary>
/// <param name="device_index">The sensor to open</param>
/// <returns>an SDL_Sensor sensor object, or NULL if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorOpen: function(device_index: Integer): PSDL_Sensor; cdecl;

/// <summary>Return the SDL_Sensor associated with an instance id.</summary>
/// <param name="instance_id">The sensor from instance id</param>
/// <returns>an SDL_Sensor object.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorFromInstanceID: function(instance_id: SDL_SensorID): PSDL_Sensor; cdecl;

/// <summary>Get the implementation dependent name of a sensor</summary>
/// <param name="sensor">The SDL_Sensor object</param>
/// <returns>the sensor name, or NULL if `sensor` is NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetName: function(sensor: PSDL_Sensor): PUTF8Char; cdecl;

/// <summary>Get the type of a sensor.</summary>
/// <param name="sensor">The SDL_Sensor object to inspect</param>
/// <returns>the SDL_SensorType type, or `SDL_SENSOR_INVALID` if `sensor` is
///   NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetType: function(sensor: PSDL_Sensor): SDL_SensorType; cdecl;

/// <summary>Get the platform dependent type of a sensor.</summary>
/// <param name="sensor">The SDL_Sensor object to inspect</param>
/// <returns>the sensor platform dependent type, or -1 if `sensor` is NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetNonPortableType: function(sensor: PSDL_Sensor): Integer; cdecl;

/// <summary>Get the instance ID of a sensor.</summary>
/// <param name="sensor">The SDL_Sensor object to inspect</param>
/// <returns>the sensor instance ID, or -1 if `sensor` is NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetInstanceID: function(sensor: PSDL_Sensor): SDL_SensorID; cdecl;

/// <summary>Get the current state of an opened sensor.</summary>
/// <remarks>The number of values and interpretation of the data is sensor dependent.</remarks>
/// <param name="sensor">The SDL_Sensor object to query</param>
/// <param name="data">A pointer filled with the current sensor state</param>
/// <param name="num_values">The number of values to write to data</param>
/// <returns>0 or -1 if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorGetData: function(sensor: PSDL_Sensor; data: PSingle; num_values: Integer): Integer; cdecl;

/// <summary>Close a sensor previously opened with SDL_SensorOpen().</summary>
/// <param name="sensor">The SDL_Sensor object to close</param></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_SensorClose: procedure(sensor: PSDL_Sensor); cdecl;

/// <summary>Update the current state of the open sensors.</summary>
/// <remarks>This is called automatically by the event loop if sensor events are
/// enabled.
/// 
/// This needs to be called from the thread that initialized the sensor
/// subsystem.
/// This function is available since SDL 2.0.9.</remarks>
SDL_SensorUpdate: procedure(); cdecl;

/// <summary>Load a set of Game Controller mappings from a seekable SDL data stream.</summary>
/// <remarks>You can call this function several times, if needed, to load different
/// database files.
/// 
/// If a new mapping is loaded for an already known controller GUID, the later
/// version will overwrite the one currently loaded.
/// 
/// Mappings not belonging to the current platform or with no platform field
/// specified will be ignored (i.e. mappings for Linux will be ignored in
/// Windows, etc).
/// 
/// This function will load the text database entirely in memory before
/// processing it, so take this into consideration if you are in a memory
/// constrained environment.</remarks>
/// <param name="rw">the data stream for the mappings to be added</param>
/// <param name="freerw">non-zero to close the stream after being read</param>
/// <returns>the number of mappings added or -1 on error; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.
/// SDL_GameControllerAddMapping
/// 
/// SDL_GameControllerAddMappingsFromFile
/// 
/// SDL_GameControllerMappingForGUID</remarks>
SDL_GameControllerAddMappingsFromRW: function(rw: PSDL_RWops; freerw: Integer): Integer; cdecl;

/// <summary>Add support for controllers that SDL is unaware of or to cause an existing
/// controller to have a different binding.</summary>
/// <remarks>The mapping string has the format "GUID,name,mapping", where GUID is the
/// string value from SDL_JoystickGetGUIDString(), name is the human readable
/// string for the device and mappings are controller mappings to joystick
/// ones. Under Windows there is a reserved GUID of "xinput" that covers all
/// XInput devices. The mapping format for joystick is: {| |bX |a joystick
/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick
/// |} Buttons can be used as a controller axes and vice versa.
/// 
/// This string shows an example of a valid mapping for a controller:
/// 
/// ```c
/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"
/// ```</remarks>
/// <param name="mappingString">the mapping string</param>
/// <returns>1 if a new mapping is added, 0 if an existing mapping is updated,
///   -1 on error; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerMapping
/// 
/// SDL_GameControllerMappingForGUID</remarks>
SDL_GameControllerAddMapping: function(const mappingString: PUTF8Char): Integer; cdecl;

/// <summary>Get the number of mappings installed.</summary>
/// <returns>the number of mappings.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_GameControllerNumMappings: function(): Integer; cdecl;

/// <summary>Get the mapping at a particular index.</summary>
/// <returns>the mapping string. Must be freed with SDL_free(). Returns NULL if
///   the index is out of range.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_GameControllerMappingForIndex: function(mapping_index: Integer): PUTF8Char; cdecl;

/// <summary>Get the game controller mapping string for a given GUID.</summary>
/// <remarks>The returned string must be freed with SDL_free().</remarks>
/// <param name="guid">a structure containing the GUID for which a mapping is desired</param>
/// <returns>a mapping string or NULL on error; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickGetDeviceGUID
/// 
/// SDL_JoystickGetGUID</remarks>
SDL_GameControllerMappingForGUID: function(guid: SDL_JoystickGUID): PUTF8Char; cdecl;

/// <summary>Get the current mapping of a Game Controller.</summary>
/// <remarks>The returned string must be freed with SDL_free().
/// 
/// Details about mappings are discussed with SDL_GameControllerAddMapping().</remarks>
/// <param name="gamecontroller">the game controller you want to get the current
///   mapping for</param>
/// <returns>a string that has the controller's mapping or NULL if no mapping
///   is available; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerAddMapping
/// 
/// SDL_GameControllerMappingForGUID</remarks>
SDL_GameControllerMapping: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;

/// <summary>Check if the given joystick is supported by the game controller interface.</summary>
/// <remarks>`joystick_index` is the same as the `device_index` passed to
/// SDL_JoystickOpen().</remarks>
/// <param name="joystick_index">the device_index of a device, up to
///   SDL_NumJoysticks()</param>
/// <returns>SDL_TRUE if the given joystick is supported by the game controller
///   interface, SDL_FALSE if it isn't or it's an invalid index.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerNameForIndex
/// 
/// SDL_GameControllerOpen</remarks>
SDL_IsGameController: function(joystick_index: Integer): SDL_bool; cdecl;

/// <summary>Get the implementation dependent name for the game controller.</summary>
/// <remarks>This function can be called before any controllers are opened.
/// 
/// `joystick_index` is the same as the `device_index` passed to
/// SDL_JoystickOpen().</remarks>
/// <param name="joystick_index">the device_index of a device, from zero to
///   SDL_NumJoysticks()-1</param>
/// <returns>the implementation-dependent name for the game controller, or NULL
///   if there is no name or the index is invalid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerName
/// 
/// SDL_GameControllerOpen
/// 
/// SDL_IsGameController</remarks>
SDL_GameControllerNameForIndex: function(joystick_index: Integer): PUTF8Char; cdecl;

/// <summary>Get the type of a game controller.</summary>
/// <remarks>This can be called before any controllers are opened.</remarks>
/// <param name="joystick_index">the device_index of a device, from zero to
///   SDL_NumJoysticks()-1</param>
/// <returns>the controller type.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.</remarks>
SDL_GameControllerTypeForIndex: function(joystick_index: Integer): SDL_GameControllerType; cdecl;

/// <summary>Get the mapping of a game controller.</summary>
/// <remarks>This can be called before any controllers are opened.</remarks>
/// <param name="joystick_index">the device_index of a device, from zero to
///   SDL_NumJoysticks()-1</param>
/// <returns>the mapping string. Must be freed with SDL_free(). Returns NULL if
///   no mapping is available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_GameControllerMappingForDeviceIndex: function(joystick_index: Integer): PUTF8Char; cdecl;

/// <summary>Open a game controller for use.</summary>
/// <remarks>`joystick_index` is the same as the `device_index` passed to
/// SDL_JoystickOpen().
/// 
/// The index passed as an argument refers to the N'th game controller on the
/// system. This index is not the value which will identify this controller in
/// future controller events. The joystick's instance id (SDL_JoystickID) will
/// be used there instead.</remarks>
/// <param name="joystick_index">the device_index of a device, up to
///   SDL_NumJoysticks()</param>
/// <returns>a gamecontroller identifier or NULL if an error occurred; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerClose
/// 
/// SDL_GameControllerNameForIndex
/// 
/// SDL_IsGameController</remarks>
SDL_GameControllerOpen: function(joystick_index: Integer): PSDL_GameController; cdecl;

/// <summary>Get the SDL_GameController associated with an instance id.</summary>
/// <param name="joyid">the instance id to get the SDL_GameController for</param>
/// <returns>an SDL_GameController on success or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.</remarks>
SDL_GameControllerFromInstanceID: function(joyid: SDL_JoystickID): PSDL_GameController; cdecl;

/// <summary>Get the SDL_GameController associated with a player index.</summary>
/// <remarks>Please note that the player index is _not_ the device index, nor is it the
/// instance id!</remarks>
/// <param name="player_index">the player index, which is not the device index or the
///   instance id!</param>
/// <returns>the SDL_GameController associated with a player index.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.
/// SDL_GameControllerGetPlayerIndex
/// 
/// SDL_GameControllerSetPlayerIndex</remarks>
SDL_GameControllerFromPlayerIndex: function(player_index: Integer): PSDL_GameController; cdecl;

/// <summary>Get the implementation-dependent name for an opened game controller.</summary>
/// <remarks>This is the same name as returned by SDL_GameControllerNameForIndex(), but
/// it takes a controller identifier instead of the (unstable) device index.</remarks>
/// <param name="gamecontroller">a game controller identifier previously returned by
///   SDL_GameControllerOpen()</param>
/// <returns>the implementation dependent name for the game controller, or NULL
///   if there is no name or the identifier passed is invalid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerNameForIndex
/// 
/// SDL_GameControllerOpen</remarks>
SDL_GameControllerName: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;

/// <summary>Get the type of this currently opened controller</summary>
/// <remarks>This is the same name as returned by SDL_GameControllerTypeForIndex(), but
/// it takes a controller identifier instead of the (unstable) device index.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the controller type.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.</remarks>
SDL_GameControllerGetType: function(gamecontroller: PSDL_GameController): SDL_GameControllerType; cdecl;

/// <summary>Get the player index of an opened game controller.</summary>
/// <remarks>For XInput controllers this returns the XInput user index.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the player index for controller, or -1 if it's not available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_GameControllerGetPlayerIndex: function(gamecontroller: PSDL_GameController): Integer; cdecl;

/// <summary>Set the player index of an opened game controller.</summary>
/// <param name="gamecontroller">the game controller object to adjust.</param>
/// <param name="player_index">Player index to assign to this controller.</param></summary>
/// <remarks>This function is available since SDL 2.0.12.</remarks>
SDL_GameControllerSetPlayerIndex: procedure(gamecontroller: PSDL_GameController; player_index: Integer); cdecl;

/// <summary>Get the USB vendor ID of an opened controller, if available.</summary>
/// <remarks>If the vendor ID isn't available this function returns 0.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the USB vendor ID, or zero if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_GameControllerGetVendor: function(gamecontroller: PSDL_GameController): Uint16; cdecl;

/// <summary>Get the USB product ID of an opened controller, if available.</summary>
/// <remarks>If the product ID isn't available this function returns 0.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the USB product ID, or zero if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_GameControllerGetProduct: function(gamecontroller: PSDL_GameController): Uint16; cdecl;

/// <summary>Get the product version of an opened controller, if available.</summary>
/// <remarks>If the product version isn't available this function returns 0.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the USB product version, or zero if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.6.</remarks>
SDL_GameControllerGetProductVersion: function(gamecontroller: PSDL_GameController): Uint16; cdecl;

/// <summary>Get the serial number of an opened controller, if available.</summary>
/// <remarks>Returns the serial number of the controller, or NULL if it is not
/// available.</remarks>
/// <param name="gamecontroller">the game controller object to query.</param>
/// <returns>the serial number, or NULL if unavailable.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerGetSerial: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;

/// <summary>Check if a controller has been opened and is currently connected.</summary>
/// <param name="gamecontroller">a game controller identifier previously returned by
///   SDL_GameControllerOpen()</param>
/// <returns>SDL_TRUE if the controller has been opened and is currently
///   connected, or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerClose
/// 
/// SDL_GameControllerOpen</remarks>
SDL_GameControllerGetAttached: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;

/// <summary>Get the Joystick ID from a Game Controller.</summary>
/// <remarks>This function will give you a SDL_Joystick object, which allows you to use
/// the SDL_Joystick functions with a SDL_GameController object. This would be
/// useful for getting a joystick's position at any given time, even if it
/// hasn't moved (moving it would produce an event, which would have the axis'
/// value).
/// 
/// The pointer returned is owned by the SDL_GameController. You should not
/// call SDL_JoystickClose() on it, for example, since doing so will likely
/// cause SDL to crash.</remarks>
/// <param name="gamecontroller">the game controller object that you want to get a
///   joystick from</param>
/// <returns>a SDL_Joystick object; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GameControllerGetJoystick: function(gamecontroller: PSDL_GameController): PSDL_Joystick; cdecl;

/// <summary>Query or change current state of Game Controller events.</summary>
/// <remarks>If controller events are disabled, you must call SDL_GameControllerUpdate()
/// yourself and check the state of the controller when you want controller
/// information.
/// 
/// Any number can be passed to SDL_GameControllerEventState(), but only -1, 0,
/// and 1 will have any effect. Other numbers will just be returned.</remarks>
/// <param name="state">can be one of `SDL_QUERY`, `SDL_IGNORE`, or `SDL_ENABLE`</param>
/// <returns>the same value passed to the function, with exception to -1
///   (SDL_QUERY), which will return the current state.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_JoystickEventState</remarks>
SDL_GameControllerEventState: function(state: Integer): Integer; cdecl;

/// <summary>Manually pump game controller updates if not using the loop.</summary>
/// <remarks>This function is called automatically by the event loop if events are
/// enabled. Under such circumstances, it will not be necessary to call this
/// function.
/// This function is available since SDL 2.0.0.</remarks>
SDL_GameControllerUpdate: procedure(); cdecl;

/// <summary>Convert a string into SDL_GameControllerAxis enum.</summary>
/// <remarks>This function is called internally to translate SDL_GameController mapping
/// strings for the underlying joystick device into the consistent
/// SDL_GameController mapping. You do not normally need to call this function
/// unless you are parsing SDL_GameController mappings in your own code.
/// 
/// Note specially that "righttrigger" and "lefttrigger" map to
/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,
/// respectively.</remarks>
/// <param name="str">string representing a SDL_GameController axis</param>
/// <returns>the SDL_GameControllerAxis enum corresponding to the input string,
///   or `SDL_CONTROLLER_AXIS_INVALID` if no match was found.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetStringForAxis</remarks>
SDL_GameControllerGetAxisFromString: function(const str: PUTF8Char): SDL_GameControllerAxis; cdecl;

/// <summary>Convert from an SDL_GameControllerAxis enum to a string.</summary>
/// <remarks>The caller should not SDL_free() the returned string.</remarks>
/// <param name="axis">an enum value for a given SDL_GameControllerAxis</param>
/// <returns>a string for the given axis, or NULL if an invalid axis is
///   specified. The string returned is of the format used by
///   SDL_GameController mapping strings.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetAxisFromString</remarks>
SDL_GameControllerGetStringForAxis: function(axis: SDL_GameControllerAxis): PUTF8Char; cdecl;

/// <summary>Get the SDL joystick layer binding for a controller axis mapping.</summary>
/// <param name="gamecontroller">a game controller</param>
/// <param name="axis">an axis enum value (one of the SDL_GameControllerAxis values)</param>
/// <returns>a SDL_GameControllerButtonBind describing the bind. On failure
///   (like the given Controller axis doesn't exist on the device), its
///   `.bindType` will be `SDL_CONTROLLER_BINDTYPE_NONE`.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetBindForButton</remarks>
SDL_GameControllerGetBindForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_GameControllerButtonBind; cdecl;

/// <summary>Query whether a game controller has a given axis.</summary>
/// <remarks>This merely reports whether the controller's mapping defined this axis, as
/// that is all the information SDL has about the physical device.</remarks>
/// <param name="gamecontroller">a game controller</param>
/// <param name="axis">an axis enum value (an SDL_GameControllerAxis value)</param>
/// <returns>SDL_TRUE if the controller has this axis, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerHasAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_bool; cdecl;

/// <summary>Get the current state of an axis control on a game controller.</summary>
/// <remarks>The axis indices start at index 0.
/// 
/// The state is a value ranging from -32768 to 32767. Triggers, however, range
/// from 0 to 32767 (they never return a negative value).</remarks>
/// <param name="gamecontroller">a game controller</param>
/// <param name="axis">an axis index (one of the SDL_GameControllerAxis values)</param>
/// <returns>axis state (including 0) on success or 0 (also) on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetButton</remarks>
SDL_GameControllerGetAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): Sint16; cdecl;

/// <summary>Convert a string into an SDL_GameControllerButton enum.</summary>
/// <remarks>This function is called internally to translate SDL_GameController mapping
/// strings for the underlying joystick device into the consistent
/// SDL_GameController mapping. You do not normally need to call this function
/// unless you are parsing SDL_GameController mappings in your own code.</remarks>
/// <param name="str">string representing a SDL_GameController axis</param>
/// <returns>the SDL_GameControllerButton enum corresponding to the input
///   string, or `SDL_CONTROLLER_AXIS_INVALID` if no match was found.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GameControllerGetButtonFromString: function(const str: PUTF8Char): SDL_GameControllerButton; cdecl;

/// <summary>Convert from an SDL_GameControllerButton enum to a string.</summary>
/// <remarks>The caller should not SDL_free() the returned string.</remarks>
/// <param name="button">an enum value for a given SDL_GameControllerButton</param>
/// <returns>a string for the given button, or NULL if an invalid axis is
///   specified. The string returned is of the format used by
///   SDL_GameController mapping strings.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetButtonFromString</remarks>
SDL_GameControllerGetStringForButton: function(button: SDL_GameControllerButton): PUTF8Char; cdecl;

/// <summary>Get the SDL joystick layer binding for a controller button mapping.</summary>
/// <param name="gamecontroller">a game controller</param>
/// <param name="button">an button enum value (an SDL_GameControllerButton value)</param>
/// <returns>a SDL_GameControllerButtonBind describing the bind. On failure
///   (like the given Controller button doesn't exist on the device),
///   its `.bindType` will be `SDL_CONTROLLER_BINDTYPE_NONE`.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetBindForAxis</remarks>
SDL_GameControllerGetBindForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_GameControllerButtonBind; cdecl;

/// <summary>Query whether a game controller has a given button.</summary>
/// <remarks>This merely reports whether the controller's mapping defined this button,
/// as that is all the information SDL has about the physical device.</remarks>
/// <param name="gamecontroller">a game controller</param>
/// <param name="button">a button enum value (an SDL_GameControllerButton value)</param>
/// <returns>SDL_TRUE if the controller has this button, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerHasButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_bool; cdecl;

/// <summary>Get the current state of a button on a game controller.</summary>
/// <param name="gamecontroller">a game controller</param>
/// <param name="button">a button index (one of the SDL_GameControllerButton values)</param>
/// <returns>1 for pressed state or 0 for not pressed state or error; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerGetAxis</remarks>
SDL_GameControllerGetButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): Uint8; cdecl;

/// <summary>Get the number of touchpads on a game controller.</summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerGetNumTouchpads: function(gamecontroller: PSDL_GameController): Integer; cdecl;

/// <summary>Get the number of supported simultaneous fingers on a touchpad on a game
/// controller.</summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerGetNumTouchpadFingers: function(gamecontroller: PSDL_GameController; touchpad: Integer): Integer; cdecl;

/// <summary>Get the current state of a finger on a touchpad on a game controller.</summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerGetTouchpadFinger: function(gamecontroller: PSDL_GameController; touchpad: Integer; finger: Integer; state: PUint8; x: PSingle; y: PSingle; pressure: PSingle): Integer; cdecl;

/// <summary>Return whether a game controller has a particular sensor.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <param name="type">The type of sensor to query</param>
/// <returns>SDL_TRUE if the sensor exists, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerHasSensor: function(gamecontroller: PSDL_GameController; &type: SDL_SensorType): SDL_bool; cdecl;

/// <summary>Set whether data reporting for a game controller sensor is enabled.</summary>
/// <param name="gamecontroller">The controller to update</param>
/// <param name="type">The type of sensor to enable/disable</param>
/// <param name="enabled">Whether data reporting should be enabled</param>
/// <returns>0 or -1 if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerSetSensorEnabled: function(gamecontroller: PSDL_GameController; &type: SDL_SensorType; enabled: SDL_bool): Integer; cdecl;

/// <summary>Query whether sensor data reporting is enabled for a game controller.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <param name="type">The type of sensor to query</param>
/// <returns>SDL_TRUE if the sensor is enabled, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerIsSensorEnabled: function(gamecontroller: PSDL_GameController; &type: SDL_SensorType): SDL_bool; cdecl;

/// <summary>Get the data rate (number of events per second) of a game controller
/// sensor.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <param name="type">The type of sensor to query</param>
/// <returns>the data rate, or 0.0f if the data rate is not available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_GameControllerGetSensorDataRate: function(gamecontroller: PSDL_GameController; &type: SDL_SensorType): Single; cdecl;

/// <summary>Get the current state of a game controller sensor.</summary>
/// <remarks>The number of values and interpretation of the data is sensor dependent.
/// See SDL_sensor.h for the details for each type of sensor.</remarks>
/// <param name="gamecontroller">The controller to query</param>
/// <param name="type">The type of sensor to query</param>
/// <param name="data">A pointer filled with the current sensor state</param>
/// <param name="num_values">The number of values to write to data</param>
/// <returns>0 or -1 if an error occurred.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerGetSensorData: function(gamecontroller: PSDL_GameController; &type: SDL_SensorType; data: PSingle; num_values: Integer): Integer; cdecl;

/// <summary>Start a rumble effect on a game controller.</summary>
/// <remarks>Each call to this function cancels any previous rumble effect, and calling
/// it with 0 intensity stops any rumbling.</remarks>
/// <param name="gamecontroller">The controller to vibrate</param>
/// <param name="low_frequency_rumble">The intensity of the low frequency (left)
///   rumble motor, from 0 to 0xFFFF</param>
/// <param name="high_frequency_rumble">The intensity of the high frequency (right)
///   rumble motor, from 0 to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if rumble isn't supported on this controller</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.
/// SDL_GameControllerHasRumble</remarks>
SDL_GameControllerRumble: function(gamecontroller: PSDL_GameController; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;

/// <summary>Start a rumble effect in the game controller's triggers.</summary>
/// <remarks>Each call to this function cancels any previous trigger rumble effect, and
/// calling it with 0 intensity stops any rumbling.
/// 
/// Note that this is rumbling of the _triggers_ and not the game controller as
/// a whole. The first controller to offer this feature was the PlayStation 5's
/// DualShock 5.</remarks>
/// <param name="gamecontroller">The controller to vibrate</param>
/// <param name="left_rumble">The intensity of the left trigger rumble motor, from 0
///   to 0xFFFF</param>
/// <param name="right_rumble">The intensity of the right trigger rumble motor, from 0
///   to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if trigger rumble isn't supported on this controller</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_GameControllerHasRumbleTriggers</remarks>
SDL_GameControllerRumbleTriggers: function(gamecontroller: PSDL_GameController; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;

/// <summary>Query whether a game controller has an LED.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <returns>SDL_TRUE, or SDL_FALSE if this controller does not have a
///   modifiable LED</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerHasLED: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;

/// <summary>Query whether a game controller has rumble support.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <returns>SDL_TRUE, or SDL_FALSE if this controller does not have rumble
///   support</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GameControllerRumble</remarks>
SDL_GameControllerHasRumble: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;

/// <summary>Query whether a game controller has rumble support on triggers.</summary>
/// <param name="gamecontroller">The controller to query</param>
/// <returns>SDL_TRUE, or SDL_FALSE if this controller does not have trigger
///   rumble support</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GameControllerRumbleTriggers</remarks>
SDL_GameControllerHasRumbleTriggers: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;

/// <summary>Update a game controller's LED color.</summary>
/// <param name="gamecontroller">The controller to update</param>
/// <param name="red">The intensity of the red LED</param>
/// <param name="green">The intensity of the green LED</param>
/// <param name="blue">The intensity of the blue LED</param>
/// <returns>0, or -1 if this controller does not have a modifiable LED</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GameControllerSetLED: function(gamecontroller: PSDL_GameController; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;

/// <summary>Send a controller specific effect packet</summary>
/// <param name="gamecontroller">The controller to affect</param>
/// <param name="data">The data to send to the controller</param>
/// <param name="size">The size of the data to send to the controller</param>
/// <returns>0, or -1 if this controller or driver doesn't support effect
///   packets</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_GameControllerSendEffect: function(gamecontroller: PSDL_GameController; const data: Pointer; size: Integer): Integer; cdecl;

/// <summary>Close a game controller previously opened with SDL_GameControllerOpen().</summary>
/// <param name="gamecontroller">a game controller identifier previously returned by
///   SDL_GameControllerOpen()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GameControllerOpen</remarks>
SDL_GameControllerClose: procedure(gamecontroller: PSDL_GameController); cdecl;

/// <summary>Return the sfSymbolsName for a given button on a game controller on Apple
/// platforms.</summary>
/// <param name="gamecontroller">the controller to query</param>
/// <param name="button">a button on the game controller</param>
/// <returns>the sfSymbolsName or NULL if the name can't be found</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GameControllerGetAppleSFSymbolsNameForAxis</remarks>
SDL_GameControllerGetAppleSFSymbolsNameForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): PUTF8Char; cdecl;

/// <summary>Return the sfSymbolsName for a given axis on a game controller on Apple
/// platforms.</summary>
/// <param name="gamecontroller">the controller to query</param>
/// <param name="axis">an axis on the game controller</param>
/// <returns>the sfSymbolsName or NULL if the name can't be found</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GameControllerGetAppleSFSymbolsNameForButton</remarks>
SDL_GameControllerGetAppleSFSymbolsNameForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): PUTF8Char; cdecl;

/// <summary>Get the number of registered touch devices.</summary>
/// <remarks>On some platforms SDL first sees the touch device if it was actually used.
/// Therefore SDL_GetNumTouchDevices() may return 0 although devices are
/// available. After using all devices at least once the number will be
/// correct.
/// 
/// This was fixed for Android in SDL 2.0.1.</remarks>
/// <returns>the number of registered touch devices.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTouchDevice</remarks>
SDL_GetNumTouchDevices: function(): Integer; cdecl;

/// <summary>Get the touch ID with the given index.</summary>
/// <param name="index">the touch device index</param>
/// <returns>the touch ID with the given index on success or 0 if the index is
///   invalid; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetNumTouchDevices</remarks>
SDL_GetTouchDevice: function(index: Integer): SDL_TouchID; cdecl;

/// <summary>Get the type of the given touch device.</summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_GetTouchDeviceType: function(touchID: SDL_TouchID): SDL_TouchDeviceType; cdecl;

/// <summary>Get the number of active fingers for a given touch device.</summary>
/// <param name="touchID">the ID of a touch device</param>
/// <returns>the number of active fingers for a given touch device on success
///   or 0 on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTouchFinger</remarks>
SDL_GetNumTouchFingers: function(touchID: SDL_TouchID): Integer; cdecl;

/// <summary>Get the finger object for specified touch device ID and finger index.</summary>
/// <remarks>The returned resource is owned by SDL and should not be deallocated.</remarks>
/// <param name="touchID">the ID of the requested touch device</param>
/// <param name="index">the index of the requested finger</param>
/// <returns>a pointer to the SDL_Finger object or NULL if no object at the
///   given ID and index could be found.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RecordGesture</remarks>
SDL_GetTouchFinger: function(touchID: SDL_TouchID; index: Integer): PSDL_Finger; cdecl;

/// <summary>Begin recording a gesture on a specified touch device or all touch devices.</summary>
/// <remarks>If the parameter `touchId` is -1 (i.e., all devices), this function will
/// always return 1, regardless of whether there actually are any devices.</remarks>
/// <param name="touchId">the touch device id, or -1 for all touch devices</param>
/// <returns>1 on success or 0 if the specified device could not be found.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTouchDevice</remarks>
SDL_RecordGesture: function(touchId: SDL_TouchID): Integer; cdecl;

/// <summary>Save all currently loaded Dollar Gesture templates.</summary>
/// <param name="dst">a SDL_RWops to save to</param>
/// <returns>the number of saved templates on success or 0 on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadDollarTemplates
/// 
/// SDL_SaveDollarTemplate</remarks>
SDL_SaveAllDollarTemplates: function(dst: PSDL_RWops): Integer; cdecl;

/// <summary>Save a currently loaded Dollar Gesture template.</summary>
/// <param name="gestureId">a gesture id</param>
/// <param name="dst">a SDL_RWops to save to</param>
/// <returns>1 on success or 0 on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadDollarTemplates
/// 
/// SDL_SaveAllDollarTemplates</remarks>
SDL_SaveDollarTemplate: function(gestureId: SDL_GestureID; dst: PSDL_RWops): Integer; cdecl;

/// <summary>Load Dollar Gesture templates from a file.</summary>
/// <param name="touchId">a touch id</param>
/// <param name="src">a SDL_RWops to load from</param>
/// <returns>the number of loaded templates on success or a negative error code
///   (or 0) on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SaveAllDollarTemplates
/// 
/// SDL_SaveDollarTemplate</remarks>
SDL_LoadDollarTemplates: function(touchId: SDL_TouchID; src: PSDL_RWops): Integer; cdecl;

/// <summary>Pump the event loop, gathering events from the input devices.</summary>
/// <remarks>This function updates the event queue and internal input device state.
/// 
/// **WARNING**: This should only be run in the thread that initialized the
/// video subsystem, and for extra safety, you should consider only doing those
/// things on the main thread in any case.
/// 
/// SDL_PumpEvents() gathers all the pending input information from devices and
/// places it in the event queue. Without calls to SDL_PumpEvents() no events
/// would ever be placed on the queue. Often the need for calls to
/// SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and
/// SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not
/// polling or waiting for events (e.g. you are filtering them), then you must
/// call SDL_PumpEvents() to force an event queue update.
/// This function is available since SDL 2.0.0.
/// SDL_PollEvent
/// 
/// SDL_WaitEvent</remarks>
SDL_PumpEvents: procedure(); cdecl;

/// <summary>Check the event queue for messages and optionally return them.</summary>
/// <remarks>`action` may be any of the following:
/// 
/// - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the
/// event queue.
/// - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,
/// within the specified minimum and maximum type, will be returned to the
/// caller and will _not_ be removed from the queue.
/// - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,
/// within the specified minimum and maximum type, will be returned to the
/// caller and will be removed from the queue.
/// 
/// You may have to call SDL_PumpEvents() before calling this function.
/// Otherwise, the events may not be ready to be filtered when you call
/// SDL_PeepEvents().
/// 
/// This function is thread-safe.</remarks>
/// <param name="events">destination buffer for the retrieved events</param>
/// <param name="numevents">if action is SDL_ADDEVENT, the number of events to add
///   back to the event queue; if action is SDL_PEEKEVENT or
///   SDL_GETEVENT, the maximum number of events to retrieve</param>
/// <param name="action">action to take; see [[#action|Remarks]] for details</param>
/// <param name="minType">minimum value of the event type to be considered;
///   SDL_FIRSTEVENT is a safe choice</param>
/// <param name="maxType">maximum value of the event type to be considered;
///   SDL_LASTEVENT is a safe choice</param>
/// <returns>the number of events actually stored or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PollEvent
/// 
/// SDL_PumpEvents
/// 
/// SDL_PushEvent</remarks>
SDL_PeepEvents: function(events: PSDL_Event; numevents: Integer; action: SDL_eventaction; minType: Uint32; maxType: Uint32): Integer; cdecl;

/// <summary>Check for the existence of a certain event type in the event queue.</summary>
/// <remarks>If you need to check for a range of event types, use SDL_HasEvents()
/// instead.</remarks>
/// <param name="type">the type of event to be queried; see SDL_EventType for details</param>
/// <returns>SDL_TRUE if events matching `type` are present, or SDL_FALSE if
///   events matching `type` are not present.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasEvents</remarks>
SDL_HasEvent: function(&type: Uint32): SDL_bool; cdecl;

/// <summary>Check for the existence of certain event types in the event queue.</summary>
/// <remarks>If you need to check for a single event type, use SDL_HasEvent() instead.</remarks>
/// <param name="minType">the low end of event type to be queried, inclusive; see
///   SDL_EventType for details</param>
/// <param name="maxType">the high end of event type to be queried, inclusive; see
///   SDL_EventType for details</param>
/// <returns>SDL_TRUE if events with type >= `minType` and <= `maxType` are
///   present, or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HasEvents</remarks>
SDL_HasEvents: function(minType: Uint32; maxType: Uint32): SDL_bool; cdecl;

/// <summary>Clear events of a specific type from the event queue.</summary>
/// <remarks>This will unconditionally remove any events from the queue that match
/// `type`. If you need to remove a range of event types, use SDL_FlushEvents()
/// instead.
/// 
/// It's also normal to just ignore events you don't care about in your event
/// loop without calling this function.
/// 
/// This function only affects currently queued events. If you want to make
/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()
/// on the main thread immediately before the flush call.</remarks>
/// <param name="type">the type of event to be cleared; see SDL_EventType for details</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FlushEvents</remarks>
SDL_FlushEvent: procedure(&type: Uint32); cdecl;

/// <summary>Clear events of a range of types from the event queue.</summary>
/// <remarks>This will unconditionally remove any events from the queue that are in the
/// range of `minType` to `maxType`, inclusive. If you need to remove a single
/// event type, use SDL_FlushEvent() instead.
/// 
/// It's also normal to just ignore events you don't care about in your event
/// loop without calling this function.
/// 
/// This function only affects currently queued events. If you want to make
/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()
/// on the main thread immediately before the flush call.</remarks>
/// <param name="minType">the low end of event type to be cleared, inclusive; see
///   SDL_EventType for details</param>
/// <param name="maxType">the high end of event type to be cleared, inclusive; see
///   SDL_EventType for details</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_FlushEvent</remarks>
SDL_FlushEvents: procedure(minType: Uint32; maxType: Uint32); cdecl;

/// <summary>Poll for currently pending events.</summary>
/// <remarks>If `event` is not NULL, the next event is removed from the queue and stored
/// in the SDL_Event structure pointed to by `event`. The 1 returned refers to
/// this event, immediately stored in the SDL Event structure -- not an event
/// to follow.
/// 
/// If `event` is NULL, it simply returns 1 if there is an event in the queue,
/// but will not remove it from the queue.
/// 
/// As this function may implicitly call SDL_PumpEvents(), you can only call
/// this function in the thread that set the video mode.
/// 
/// SDL_PollEvent() is the favored way of receiving system events since it can
/// be done from the main loop and does not suspend the main loop while waiting
/// on an event to be posted.
/// 
/// The common practice is to fully process the event queue once every frame,
/// usually as a first step before updating the game's state:
/// 
/// ```c
/// while (game_is_still_running) {
/// SDL_Event event;
/// while (SDL_PollEvent(&event)) {  // poll until all events are handled!
/// // decide what to do with this event.
/// }
/// 
/// // update game state, draw the current frame
/// }
/// ```</remarks>
/// <param name="event">the SDL_Event structure to be filled with the next event from
///   the queue, or NULL</param>
/// <returns>1 if there is a pending event or 0 if there are none available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetEventFilter
/// 
/// SDL_PeepEvents
/// 
/// SDL_PushEvent
/// 
/// SDL_SetEventFilter
/// 
/// SDL_WaitEvent
/// 
/// SDL_WaitEventTimeout</remarks>
SDL_PollEvent: function(event: PSDL_Event): Integer; cdecl;

/// <summary>Wait indefinitely for the next available event.</summary>
/// <remarks>If `event` is not NULL, the next event is removed from the queue and stored
/// in the SDL_Event structure pointed to by `event`.
/// 
/// As this function may implicitly call SDL_PumpEvents(), you can only call
/// this function in the thread that initialized the video subsystem.</remarks>
/// <param name="event">the SDL_Event structure to be filled in with the next event
///   from the queue, or NULL</param>
/// <returns>1 on success or 0 if there was an error while waiting for events;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PollEvent
/// 
/// SDL_PumpEvents
/// 
/// SDL_WaitEventTimeout</remarks>
SDL_WaitEvent: function(event: PSDL_Event): Integer; cdecl;

/// <summary>Wait until the specified timeout (in milliseconds) for the next available
/// event.</summary>
/// <remarks>If `event` is not NULL, the next event is removed from the queue and stored
/// in the SDL_Event structure pointed to by `event`.
/// 
/// As this function may implicitly call SDL_PumpEvents(), you can only call
/// this function in the thread that initialized the video subsystem.</remarks>
/// <param name="event">the SDL_Event structure to be filled in with the next event
///   from the queue, or NULL</param>
/// <param name="timeout">the maximum number of milliseconds to wait for the next
///   available event</param>
/// <returns>1 on success or 0 if there was an error while waiting for events;
///   call SDL_GetError() for more information. This also returns 0 if
///   the timeout elapsed without an event arriving.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PollEvent
/// 
/// SDL_PumpEvents
/// 
/// SDL_WaitEvent</remarks>
SDL_WaitEventTimeout: function(event: PSDL_Event; timeout: Integer): Integer; cdecl;

/// <summary>Add an event to the event queue.</summary>
/// <remarks>The event queue can actually be used as a two way communication channel.
/// Not only can events be read from the queue, but the user can also push
/// their own events onto it. `event` is a pointer to the event structure you
/// wish to push onto the queue. The event is copied into the queue, and the
/// caller may dispose of the memory pointed to after SDL_PushEvent() returns.
/// 
/// Note: Pushing device input events onto the queue doesn't modify the state
/// of the device within SDL.
/// 
/// This function is thread-safe, and can be called from other threads safely.
/// 
/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through
/// the event filter but events added with SDL_PeepEvents() do not.
/// 
/// For pushing application-specific events, please use SDL_RegisterEvents() to
/// get an event type that does not conflict with other code that also wants
/// its own custom event types.</remarks>
/// <param name="event">the SDL_Event to be added to the queue</param>
/// <returns>1 on success, 0 if the event was filtered, or a negative error
///   code on failure; call SDL_GetError() for more information. A
///   common reason for error is the event queue being full.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PeepEvents
/// 
/// SDL_PollEvent
/// 
/// SDL_RegisterEvents</remarks>
SDL_PushEvent: function(event: PSDL_Event): Integer; cdecl;

/// <summary>Set up a filter to process all events before they change internal state and
/// are posted to the internal event queue.</summary>
/// <remarks>If the filter function returns 1 when called, then the event will be added
/// to the internal queue. If it returns 0, then the event will be dropped from
/// the queue, but the internal state will still be updated. This allows
/// selective filtering of dynamically arriving events.
/// 
/// **WARNING**: Be very careful of what you do in the event filter function,
/// as it may run in a different thread!
/// 
/// On platforms that support it, if the quit event is generated by an
/// interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the
/// application at the next event poll.
/// 
/// There is one caveat when dealing with the ::SDL_QuitEvent event type. The
/// event filter is only called when the window manager desires to close the
/// application window. If the event filter returns 1, then the window will be
/// closed, otherwise the window will remain open if possible.
/// 
/// Note: Disabled events never make it to the event filter function; see
/// SDL_EventState().
/// 
/// Note: If you just want to inspect events without filtering, you should use
/// SDL_AddEventWatch() instead.
/// 
/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through
/// the event filter, but events pushed onto the queue with SDL_PeepEvents() do
/// not.</remarks>
/// <param name="filter">An SDL_EventFilter function to call when an event happens</param>
/// <param name="userdata">a pointer that is passed to `filter`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AddEventWatch
/// 
/// SDL_EventState
/// 
/// SDL_GetEventFilter
/// 
/// SDL_PeepEvents
/// 
/// SDL_PushEvent</remarks>
SDL_SetEventFilter: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;

/// <summary>Query the current event filter.</summary>
/// <remarks>This function can be used to "chain" filters, by saving the existing filter
/// before replacing it with a function that will call that saved filter.</remarks>
/// <param name="filter">the current callback function will be stored here</param>
/// <param name="userdata">the pointer that is passed to the current event filter will
///   be stored here</param>
/// <returns>SDL_TRUE on success or SDL_FALSE if there is no event filter set.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetEventFilter</remarks>
SDL_GetEventFilter: function(filter: PSDL_EventFilter; userdata: PPointer): SDL_bool; cdecl;

/// <summary>Add a callback to be triggered when an event is added to the event queue.</summary>
/// <remarks>`filter` will be called when an event happens, and its return value is
/// ignored.
/// 
/// **WARNING**: Be very careful of what you do in the event filter function,
/// as it may run in a different thread!
/// 
/// If the quit event is generated by a signal (e.g. SIGINT), it will bypass
/// the internal queue and be delivered to the watch callback immediately, and
/// arrive at the next event poll.
/// 
/// Note: the callback is called for events posted by the user through
/// SDL_PushEvent(), but not for disabled events, nor for events by a filter
/// callback set with SDL_SetEventFilter(), nor for events posted by the user
/// through SDL_PeepEvents().</remarks>
/// <param name="filter">an SDL_EventFilter function to call when an event happens.</param>
/// <param name="userdata">a pointer that is passed to `filter`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DelEventWatch
/// 
/// SDL_SetEventFilter</remarks>
SDL_AddEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;

/// <summary>Remove an event watch callback added with SDL_AddEventWatch().</summary>
/// <remarks>This function takes the same input as SDL_AddEventWatch() to identify and
/// delete the corresponding callback.</remarks>
/// <param name="filter">the function originally passed to SDL_AddEventWatch()</param>
/// <param name="userdata">the pointer originally passed to SDL_AddEventWatch()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AddEventWatch</remarks>
SDL_DelEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;

/// <summary>Run a specific filter function on the current event queue, removing any
/// events for which the filter returns 0.</summary>
/// <remarks>See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),
/// this function does not change the filter permanently, it only uses the
/// supplied filter until this function returns.</remarks>
/// <param name="filter">the SDL_EventFilter function to call when an event happens</param>
/// <param name="userdata">a pointer that is passed to `filter`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetEventFilter
/// 
/// SDL_SetEventFilter</remarks>
SDL_FilterEvents: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;

/// <summary>Set the state of processing events by type.</summary>
/// <remarks>`state` may be any of the following:
/// 
/// - `SDL_QUERY`: returns the current processing state of the specified event
/// - `SDL_IGNORE` (aka `SDL_DISABLE`): the event will automatically be dropped
/// from the event queue and will not be filtered
/// - `SDL_ENABLE`: the event will be processed normally</remarks>
/// <param name="type">the type of event; see SDL_EventType for details</param>
/// <param name="state">how to process the event</param>
/// <returns>`SDL_DISABLE` or `SDL_ENABLE`, representing the processing state
///   of the event before this function makes any changes to it.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetEventState</remarks>
SDL_EventState: function(&type: Uint32; state: Integer): Uint8; cdecl;

/// <summary>Allocate a set of user-defined events, and return the beginning event
/// number for that set of events.</summary>
/// <remarks>Calling this function with `numevents` <= 0 is an error and will return
/// (Uint32)-1.
/// 
/// Note, (Uint32)-1 means the maximum unsigned 32-bit integer value (or
/// 0xFFFFFFFF), but is clearer to write.</remarks>
/// <param name="numevents">the number of events to be allocated</param>
/// <returns>the beginning event number, or (Uint32)-1 if there are not enough
///   user-defined events left.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_PushEvent</remarks>
SDL_RegisterEvents: function(numevents: Integer): Uint32; cdecl;

/// <summary>Get the directory where the application was run from.</summary>
/// <remarks>This is not necessarily a fast call, so you should call this once near
/// startup and save the string if you need it.
/// 
/// **Mac OS X and iOS Specific Functionality**: If the application is in a
/// ".app" bundle, this function returns the Resource directory (e.g.
/// MyApp.app/Contents/Resources/). This behaviour can be overridden by adding
/// a property to the Info.plist file. Adding a string key with the name
/// SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the
/// behaviour.
/// 
/// Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an
/// application in /Applications/SDLApp/MyApp.app):
/// 
/// - `resource`: bundle resource directory (the default). For example:
/// `/Applications/SDLApp/MyApp.app/Contents/Resources`
/// - `bundle`: the Bundle directory. For example:
/// `/Applications/SDLApp/MyApp.app/`
/// - `parent`: the containing directory of the bundle. For example:
/// `/Applications/SDLApp/`
/// 
/// The returned path is guaranteed to end with a path separator ('\' on
/// Windows, '/' on most other platforms).
/// 
/// The pointer returned is owned by the caller. Please call SDL_free() on the
/// pointer when done with it.</remarks>
/// <returns>an absolute path in UTF-8 encoding to the application data
///   directory. NULL will be returned on error or when the platform
///   doesn't implement this functionality, call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.
/// SDL_GetPrefPath</remarks>
SDL_GetBasePath: function(): PUTF8Char; cdecl;

/// <summary>Get the user-and-app-specific path where files can be written.</summary>
/// <remarks>Get the "pref dir". This is meant to be where users can write personal
/// files (preferences and save games, etc) that are specific to your
/// application. This directory is unique per user, per application.
/// 
/// This function will decide the appropriate location in the native
/// filesystem, create the directory if necessary, and return a string of the
/// absolute path to the directory in UTF-8 encoding.
/// 
/// On Windows, the string might look like:
/// 
/// `C:\Users\bob\AppData\Roaming\My Company\My Program Name\`
/// 
/// On Linux, the string might look like"
/// 
/// `/home/bob/.local/share/My Program Name/`
/// 
/// On Mac OS X, the string might look like:
/// 
/// `/Users/bob/Library/Application Support/My Program Name/`
/// 
/// You should assume the path returned by this function is the only safe place
/// to write files (and that SDL_GetBasePath(), while it might be writable, or
/// even the parent of the returned path, isn't where you should be writing
/// things).
/// 
/// Both the org and app strings may become part of a directory name, so please
/// follow these rules:
/// 
/// - Try to use the same org string (_including case-sensitivity_) for all
/// your applications that use this function.
/// - Always use a unique app string for each one, and make sure it never
/// changes for an app once you've decided on it.
/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...
/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game
/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.
/// 
/// The returned path is guaranteed to end with a path separator ('\' on
/// Windows, '/' on most other platforms).
/// 
/// The pointer returned is owned by the caller. Please call SDL_free() on the
/// pointer when done with it.</remarks>
/// <param name="org">the name of your organization</param>
/// <param name="app">the name of your application</param>
/// <returns>a UTF-8 string of the user directory in platform-dependent
///   notation. NULL if there's a problem (creating directory failed,
///   etc.).</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.
/// SDL_GetBasePath</remarks>
SDL_GetPrefPath: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;

/// <summary>Count the number of haptic devices attached to the system.</summary>
/// <returns>the number of haptic devices detected on the system or a negative
///   error code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticName</remarks>
SDL_NumHaptics: function(): Integer; cdecl;

/// <summary>Get the implementation dependent name of a haptic device.</summary>
/// <remarks>This can be called before any joysticks are opened. If no name can be
/// found, this function returns NULL.</remarks>
/// <param name="device_index">index of the device to query.</param>
/// <returns>the name of the device or NULL on failure; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_NumHaptics</remarks>
SDL_HapticName: function(device_index: Integer): PUTF8Char; cdecl;

/// <summary>Open a haptic device for use.</summary>
/// <remarks>The index passed as an argument refers to the N'th haptic device on this
/// system.
/// 
/// When opening a haptic device, its gain will be set to maximum and
/// autocenter will be disabled. To modify these values use SDL_HapticSetGain()
/// and SDL_HapticSetAutocenter().</remarks>
/// <param name="device_index">index of the device to open</param>
/// <returns>the device identifier or NULL on failure; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticClose
/// 
/// SDL_HapticIndex
/// 
/// SDL_HapticOpenFromJoystick
/// 
/// SDL_HapticOpenFromMouse
/// 
/// SDL_HapticPause
/// 
/// SDL_HapticSetAutocenter
/// 
/// SDL_HapticSetGain
/// 
/// SDL_HapticStopAll</remarks>
SDL_HapticOpen: function(device_index: Integer): PSDL_Haptic; cdecl;

/// <summary>Check if the haptic device at the designated index has been opened.</summary>
/// <param name="device_index">the index of the device to query</param>
/// <returns>1 if it has been opened, 0 if it hasn't or on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticIndex
/// 
/// SDL_HapticOpen</remarks>
SDL_HapticOpened: function(device_index: Integer): Integer; cdecl;

/// <summary>Get the index of a haptic device.</summary>
/// <param name="haptic">the SDL_Haptic device to query</param>
/// <returns>the index of the specified haptic device or a negative error code
///   on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpen
/// 
/// SDL_HapticOpened</remarks>
SDL_HapticIndex: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Query whether or not the current mouse has haptic capabilities.</summary>
/// <returns>SDL_TRUE if the mouse is haptic or SDL_FALSE if it isn't.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpenFromMouse</remarks>
SDL_MouseIsHaptic: function(): Integer; cdecl;

/// <summary>Try to open a haptic device from the current mouse.</summary>
/// <returns>the haptic device identifier or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpen
/// 
/// SDL_MouseIsHaptic</remarks>
SDL_HapticOpenFromMouse: function(): PSDL_Haptic; cdecl;

/// <summary>Query if a joystick has haptic features.</summary>
/// <param name="joystick">the SDL_Joystick to test for haptic capabilities</param>
/// <returns>SDL_TRUE if the joystick is haptic, SDL_FALSE if it isn't, or a
///   negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpenFromJoystick</remarks>
SDL_JoystickIsHaptic: function(joystick: PSDL_Joystick): Integer; cdecl;

/// <summary>Open a haptic device for use from a joystick device.</summary>
/// <remarks>You must still close the haptic device separately. It will not be closed
/// with the joystick.
/// 
/// When opened from a joystick you should first close the haptic device before
/// closing the joystick device. If not, on some implementations the haptic
/// device will also get unallocated and you'll be unable to use force feedback
/// on that device.</remarks>
/// <param name="joystick">the SDL_Joystick to create a haptic device from</param>
/// <returns>a valid haptic device identifier on success or NULL on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticClose
/// 
/// SDL_HapticOpen
/// 
/// SDL_JoystickIsHaptic</remarks>
SDL_HapticOpenFromJoystick: function(joystick: PSDL_Joystick): PSDL_Haptic; cdecl;

/// <summary>Close a haptic device previously opened with SDL_HapticOpen().</summary>
/// <param name="haptic">the SDL_Haptic device to close</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpen</remarks>
SDL_HapticClose: procedure(haptic: PSDL_Haptic); cdecl;

/// <summary>Get the number of effects a haptic device can store.</summary>
/// <remarks>On some platforms this isn't fully supported, and therefore is an
/// approximation. Always check to see if your created effect was actually
/// created and do not rely solely on SDL_HapticNumEffects().</remarks>
/// <param name="haptic">the SDL_Haptic device to query</param>
/// <returns>the number of effects the haptic device can store or a negative
///   error code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticNumEffectsPlaying
/// 
/// SDL_HapticQuery</remarks>
SDL_HapticNumEffects: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Get the number of effects a haptic device can play at the same time.</summary>
/// <remarks>This is not supported on all platforms, but will always return a value.</remarks>
/// <param name="haptic">the SDL_Haptic device to query maximum playing effects</param>
/// <returns>the number of effects the haptic device can play at the same time
///   or a negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticNumEffects
/// 
/// SDL_HapticQuery</remarks>
SDL_HapticNumEffectsPlaying: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Get the haptic device's supported features in bitwise manner.</summary>
/// <param name="haptic">the SDL_Haptic device to query</param>
/// <returns>a list of supported haptic features in bitwise manner (OR'd), or 0
///   on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticEffectSupported
/// 
/// SDL_HapticNumEffects</remarks>
SDL_HapticQuery: function(haptic: PSDL_Haptic): Cardinal; cdecl;

/// <summary>Get the number of haptic axes the device has.</summary>
/// <remarks>The number of haptic axes might be useful if working with the
/// SDL_HapticDirection effect.</remarks>
/// <param name="haptic">the SDL_Haptic device to query</param>
/// <returns>the number of axes on success or a negative error code on failure;
///   call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_HapticNumAxes: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Check to see if an effect is supported by a haptic device.</summary>
/// <param name="haptic">the SDL_Haptic device to query</param>
/// <param name="effect">the desired effect to query</param>
/// <returns>SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a
///   negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticNewEffect
/// 
/// SDL_HapticQuery</remarks>
SDL_HapticEffectSupported: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;

/// <summary>Create a new haptic effect on a specified device.</summary>
/// <param name="haptic">an SDL_Haptic device to create the effect on</param>
/// <param name="effect">an SDL_HapticEffect structure containing the properties of
///   the effect to create</param>
/// <returns>the ID of the effect on success or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticDestroyEffect
/// 
/// SDL_HapticRunEffect
/// 
/// SDL_HapticUpdateEffect</remarks>
SDL_HapticNewEffect: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;

/// <summary>Update the properties of an effect.</summary>
/// <remarks>Can be used dynamically, although behavior when dynamically changing
/// direction may be strange. Specifically the effect may re-upload itself and
/// start playing from the start. You also cannot change the type either when
/// running SDL_HapticUpdateEffect().</remarks>
/// <param name="haptic">the SDL_Haptic device that has the effect</param>
/// <param name="effect">the identifier of the effect to update</param>
/// <param name="data">an SDL_HapticEffect structure containing the new effect
///   properties to use</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticDestroyEffect
/// 
/// SDL_HapticNewEffect
/// 
/// SDL_HapticRunEffect</remarks>
SDL_HapticUpdateEffect: function(haptic: PSDL_Haptic; effect: Integer; data: PSDL_HapticEffect): Integer; cdecl;

/// <summary>Run the haptic effect on its associated haptic device.</summary>
/// <remarks>To repeat the effect over and over indefinitely, set `iterations` to
/// `SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make
/// one instance of the effect last indefinitely (so the effect does not fade),
/// set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`
/// instead.</remarks>
/// <param name="haptic">the SDL_Haptic device to run the effect on</param>
/// <param name="effect">the ID of the haptic effect to run</param>
/// <param name="iterations">the number of iterations to run the effect; use
///   `SDL_HAPTIC_INFINITY` to repeat forever</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticDestroyEffect
/// 
/// SDL_HapticGetEffectStatus
/// 
/// SDL_HapticStopEffect</remarks>
SDL_HapticRunEffect: function(haptic: PSDL_Haptic; effect: Integer; iterations: Uint32): Integer; cdecl;

/// <summary>Stop the haptic effect on its associated haptic device.</summary>
/// <remarks>*</remarks>
/// <param name="haptic">the SDL_Haptic device to stop the effect on</param>
/// <param name="effect">the ID of the haptic effect to stop</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticDestroyEffect
/// 
/// SDL_HapticRunEffect</remarks>
SDL_HapticStopEffect: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;

/// <summary>Destroy a haptic effect on the device.</summary>
/// <remarks>This will stop the effect if it's running. Effects are automatically
/// destroyed when the device is closed.</remarks>
/// <param name="haptic">the SDL_Haptic device to destroy the effect on</param>
/// <param name="effect">the ID of the haptic effect to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticNewEffect</remarks>
SDL_HapticDestroyEffect: procedure(haptic: PSDL_Haptic; effect: Integer); cdecl;

/// <summary>Get the status of the current effect on the specified haptic device.</summary>
/// <remarks>Device must support the SDL_HAPTIC_STATUS feature.</remarks>
/// <param name="haptic">the SDL_Haptic device to query for the effect status on</param>
/// <param name="effect">the ID of the haptic effect to query its status</param>
/// <returns>0 if it isn't playing, 1 if it is playing, or a negative error
///   code on failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticRunEffect
/// 
/// SDL_HapticStopEffect</remarks>
SDL_HapticGetEffectStatus: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;

/// <summary>Set the global gain of the specified haptic device.</summary>
/// <remarks>Device must support the SDL_HAPTIC_GAIN feature.
/// 
/// The user may specify the maximum gain by setting the environment variable
/// `SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to
/// SDL_HapticSetGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the
/// maximum.</remarks>
/// <param name="haptic">the SDL_Haptic device to set the gain on</param>
/// <param name="gain">value to set the gain to, should be between 0 and 100 (0 - 100)</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticQuery</remarks>
SDL_HapticSetGain: function(haptic: PSDL_Haptic; gain: Integer): Integer; cdecl;

/// <summary>Set the global autocenter of the device.</summary>
/// <remarks>Autocenter should be between 0 and 100. Setting it to 0 will disable
/// autocentering.
/// 
/// Device must support the SDL_HAPTIC_AUTOCENTER feature.</remarks>
/// <param name="haptic">the SDL_Haptic device to set autocentering on</param>
/// <param name="autocenter">value to set autocenter to (0-100)</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticQuery</remarks>
SDL_HapticSetAutocenter: function(haptic: PSDL_Haptic; autocenter: Integer): Integer; cdecl;

/// <summary>Pause a haptic device.</summary>
/// <remarks>Device must support the `SDL_HAPTIC_PAUSE` feature. Call
/// SDL_HapticUnpause() to resume playback.
/// 
/// Do not modify the effects nor add new ones while the device is paused. That
/// can cause all sorts of weird errors.</remarks>
/// <param name="haptic">the SDL_Haptic device to pause</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticUnpause</remarks>
SDL_HapticPause: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Unpause a haptic device.</summary>
/// <remarks>Call to unpause after SDL_HapticPause().</remarks>
/// <param name="haptic">the SDL_Haptic device to unpause</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticPause</remarks>
SDL_HapticUnpause: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Stop all the currently playing effects on a haptic device.</summary>
/// <param name="haptic">the SDL_Haptic device to stop</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_HapticStopAll: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Check whether rumble is supported on a haptic device.</summary>
/// <param name="haptic">haptic device to check for rumble support</param>
/// <returns>SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a
///   negative error code on failure; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticRumbleInit
/// 
/// SDL_HapticRumblePlay
/// 
/// SDL_HapticRumbleStop</remarks>
SDL_HapticRumbleSupported: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Initialize a haptic device for simple rumble playback.</summary>
/// <param name="haptic">the haptic device to initialize for simple rumble playback</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticOpen
/// 
/// SDL_HapticRumblePlay
/// 
/// SDL_HapticRumbleStop
/// 
/// SDL_HapticRumbleSupported</remarks>
SDL_HapticRumbleInit: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Run a simple rumble effect on a haptic device.</summary>
/// <param name="haptic">the haptic device to play the rumble effect on</param>
/// <param name="strength">strength of the rumble to play as a 0-1 float value</param>
/// <param name="length">length of the rumble to play in milliseconds</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticRumbleInit
/// 
/// SDL_HapticRumbleStop
/// 
/// SDL_HapticRumbleSupported</remarks>
SDL_HapticRumblePlay: function(haptic: PSDL_Haptic; strength: Single; length: Uint32): Integer; cdecl;

/// <summary>Stop the simple rumble on a haptic device.</summary>
/// <param name="haptic">the haptic device to stop the rumble effect on</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_HapticRumbleInit
/// 
/// SDL_HapticRumblePlay
/// 
/// SDL_HapticRumbleSupported</remarks>
SDL_HapticRumbleStop: function(haptic: PSDL_Haptic): Integer; cdecl;

/// <summary>Initialize the HIDAPI library.</summary>
/// <remarks>This function initializes the HIDAPI library. Calling it is not strictly
/// necessary, as it will be called automatically by SDL_hid_enumerate() and
/// any of the SDL_hid_open_*() functions if it is needed. This function should
/// be called at the beginning of execution however, if there is a chance of
/// HIDAPI handles being opened by different threads simultaneously.
/// 
/// Each call to this function should have a matching call to SDL_hid_exit()</remarks>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_hid_exit</remarks>
SDL_hid_init: function(): Integer; cdecl;

/// <summary>Finalize the HIDAPI library.</summary>
/// <remarks>This function frees all of the static data associated with HIDAPI. It
/// should be called at the end of execution to avoid memory leaks.</remarks>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_hid_init</remarks>
SDL_hid_exit: function(): Integer; cdecl;

/// <summary>Check to see if devices may have been added or removed.</summary>
/// <remarks>Enumerating the HID devices is an expensive operation, so you can call this
/// to see if there have been any system device changes since the last call to
/// this function. A change in the counter returned doesn't necessarily mean
/// that anything has changed, but you can call SDL_hid_enumerate() to get an
/// updated device list.
/// 
/// Calling this function for the first time may cause a thread or other system
/// resource to be allocated to track device change notifications.</remarks>
/// <returns>a change counter that is incremented with each potential device
///   change, or 0 if device change detection isn't available.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_hid_enumerate</remarks>
SDL_hid_device_change_count: function(): Uint32; cdecl;

/// <summary>Enumerate the HID Devices.</summary>
/// <remarks>This function returns a linked list of all the HID devices attached to the
/// system which match vendor_id and product_id. If `vendor_id` is set to 0
/// then any vendor matches. If `product_id` is set to 0 then any product
/// matches. If `vendor_id` and `product_id` are both set to 0, then all HID
/// devices will be returned.</remarks>
/// <param name="vendor_id">The Vendor ID (VID) of the types of device to open.</param>
/// <param name="product_id">The Product ID (PID) of the types of device to open.</param>
/// <returns>a pointer to a linked list of type SDL_hid_device_info, containing
///   information about the HID devices attached to the system, or NULL
///   in the case of failure. Free this linked list by calling
///   SDL_hid_free_enumeration().</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_hid_device_change_count</remarks>
SDL_hid_enumerate: function(vendor_id: Word; product_id: Word): PSDL_hid_device_info; cdecl;

/// <summary>Free an enumeration Linked List</summary>
/// <remarks>This function frees a linked list created by SDL_hid_enumerate().</remarks>
/// <param name="devs">Pointer to a list of struct_device returned from
///   SDL_hid_enumerate().</param></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_free_enumeration: procedure(devs: PSDL_hid_device_info); cdecl;

/// <summary>Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally
/// a serial number.</summary>
/// <remarks>If `serial_number` is NULL, the first device with the specified VID and PID
/// is opened.</remarks>
/// <param name="vendor_id">The Vendor ID (VID) of the device to open.</param>
/// <param name="product_id">The Product ID (PID) of the device to open.</param>
/// <param name="serial_number">The Serial Number of the device to open (Optionally
///   NULL).</param>
/// <returns>a pointer to a SDL_hid_device object on success or NULL on
///   failure.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_open: function(vendor_id: Word; product_id: Word; const serial_number: PWideChar): PSDL_hid_device; cdecl;

/// <summary>Open a HID device by its path name.</summary>
/// <remarks>The path name be determined by calling SDL_hid_enumerate(), or a
/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).</remarks>
/// <param name="path">The path name of the device to open</param>
/// <returns>a pointer to a SDL_hid_device object on success or NULL on
///   failure.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_open_path: function(const path: PUTF8Char; bExclusive: Integer): PSDL_hid_device; cdecl;

/// <summary>Write an Output report to a HID device.</summary>
/// <remarks>The first byte of `data` must contain the Report ID. For devices which only
/// support a single report, this must be set to 0x0. The remaining bytes
/// contain the report data. Since the Report ID is mandatory, calls to
/// SDL_hid_write() will always contain one more byte than the report contains.
/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to
/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),
/// followed by the report data (16 bytes). In this example, the length passed
/// in would be 17.
/// 
/// SDL_hid_write() will send the data on the first OUT endpoint, if one
/// exists. If it does not, it will send the data through the Control Endpoint
/// (Endpoint 0).</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="data">The data to send, including the report number as the first
///   byte.</param>
/// <param name="length">The length in bytes of the data to send.</param>
/// <returns>the actual number of bytes written and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_write: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;

/// <summary>Read an Input report from a HID device with timeout.</summary>
/// <remarks>Input reports are returned to the host through the INTERRUPT IN endpoint.
/// The first byte will contain the Report number if the device uses numbered
/// reports.</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="data">A buffer to put the read data into.</param>
/// <param name="length">The number of bytes to read. For devices with multiple
///   reports, make sure to read an extra byte for the report
///   number.</param>
/// <param name="milliseconds">timeout in milliseconds or -1 for blocking wait.</param>
/// <returns>the actual number of bytes read and -1 on error. If no packet was
///   available to be read within the timeout period, this function
///   returns 0.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_read_timeout: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt; milliseconds: Integer): Integer; cdecl;

/// <summary>Read an Input report from a HID device.</summary>
/// <remarks>Input reports are returned to the host through the INTERRUPT IN endpoint.
/// The first byte will contain the Report number if the device uses numbered
/// reports.</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="data">A buffer to put the read data into.</param>
/// <param name="length">The number of bytes to read. For devices with multiple
///   reports, make sure to read an extra byte for the report
///   number.</param>
/// <returns>the actual number of bytes read and -1 on error. If no packet was
///   available to be read and the handle is in non-blocking mode, this
///   function returns 0.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_read: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;

/// <summary>Set the device handle to be non-blocking.</summary>
/// <remarks>In non-blocking mode calls to SDL_hid_read() will return immediately with a
/// value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()
/// will wait (block) until there is data to read before returning.
/// 
/// Nonblocking can be turned on and off at any time.</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="nonblock">enable or not the nonblocking reads - 1 to enable
///   nonblocking - 0 to disable nonblocking.</param>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_set_nonblocking: function(dev: PSDL_hid_device; nonblock: Integer): Integer; cdecl;

/// <summary>Send a Feature report to the device.</summary>
/// <remarks>Feature reports are sent over the Control endpoint as a Set_Report
/// transfer. The first byte of `data` must contain the Report ID. For devices
/// which only support a single report, this must be set to 0x0. The remaining
/// bytes contain the report data. Since the Report ID is mandatory, calls to
/// SDL_hid_send_feature_report() will always contain one more byte than the
/// report contains. For example, if a hid report is 16 bytes long, 17 bytes
/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for
/// devices which do not use numbered reports), followed by the report data (16
/// bytes). In this example, the length passed in would be 17.</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="data">The data to send, including the report number as the first
///   byte.</param>
/// <param name="length">The length in bytes of the data to send, including the report
///   number.</param>
/// <returns>the actual number of bytes written and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_send_feature_report: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;

/// <summary>Get a feature report from a HID device.</summary>
/// <remarks>Set the first byte of `data` to the Report ID of the report to be read.
/// Make sure to allow space for this extra byte in `data`. Upon return, the
/// first byte will still contain the Report ID, and the report data will start
/// in data[1].</remarks>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="data">A buffer to put the read data into, including the Report ID.
///   Set the first byte of `data` to the Report ID of the report to
///   be read, or set it to zero if your device does not use numbered
///   reports.</param>
/// <param name="length">The number of bytes to read, including an extra byte for the
///   report ID. The buffer can be longer than the actual report.</param>
/// <returns>the number of bytes read plus one for the report ID (which is
///   still in the first byte), or -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_get_feature_report: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;

/// <summary>Close a HID device.</summary>
/// <param name="dev">A device handle returned from SDL_hid_open().</param></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_close: procedure(dev: PSDL_hid_device); cdecl;

/// <summary>Get The Manufacturer String from a HID device.</summary>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="string">A wide string buffer to put the data into.</param>
/// <param name="maxlen">The length of the buffer in multiples of wchar_t.</param>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_get_manufacturer_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;

/// <summary>Get The Product String from a HID device.</summary>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="string">A wide string buffer to put the data into.</param>
/// <param name="maxlen">The length of the buffer in multiples of wchar_t.</param>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_get_product_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;

/// <summary>Get The Serial Number String from a HID device.</summary>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="string">A wide string buffer to put the data into.</param>
/// <param name="maxlen">The length of the buffer in multiples of wchar_t.</param>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_get_serial_number_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;

/// <summary>Get a string from a HID device, based on its string index.</summary>
/// <param name="dev">A device handle returned from SDL_hid_open().</param>
/// <param name="string_index">The index of the string to get.</param>
/// <param name="string">A wide string buffer to put the data into.</param>
/// <param name="maxlen">The length of the buffer in multiples of wchar_t.</param>
/// <returns>0 on success and -1 on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_get_indexed_string: function(dev: PSDL_hid_device; string_index: Integer; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;

/// <summary>Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers</summary>
/// <param name="active">SDL_TRUE to start the scan, SDL_FALSE to stop the scan</param></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_hid_ble_scan: procedure(active: SDL_bool); cdecl;

/// <summary>Set a hint with a specific priority.</summary>
/// <remarks>The priority controls the behavior when setting a hint that already has a
/// value. Hints will replace existing hints of their priority and lower.
/// Environment variables are considered to have override priority.</remarks>
/// <param name="name">the hint to set</param>
/// <param name="value">the value of the hint variable</param>
/// <param name="priority">the SDL_HintPriority level for the hint</param>
/// <returns>SDL_TRUE if the hint was set, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetHint
/// 
/// SDL_SetHint</remarks>
SDL_SetHintWithPriority: function(const name: PUTF8Char; const value: PUTF8Char; priority: SDL_HintPriority): SDL_bool; cdecl;

/// <summary>Set a hint with normal priority.</summary>
/// <remarks>Hints will not be set if there is an existing override hint or environment
/// variable that takes precedence. You can use SDL_SetHintWithPriority() to
/// set the hint with override priority instead.</remarks>
/// <param name="name">the hint to set</param>
/// <param name="value">the value of the hint variable</param>
/// <returns>SDL_TRUE if the hint was set, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetHint
/// 
/// SDL_SetHintWithPriority</remarks>
SDL_SetHint: function(const name: PUTF8Char; const value: PUTF8Char): SDL_bool; cdecl;

/// <summary>Get the value of a hint.</summary>
/// <param name="name">the hint to query</param>
/// <returns>the string value of a hint or NULL if the hint isn't set.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetHint
/// 
/// SDL_SetHintWithPriority</remarks>
SDL_GetHint: function(const name: PUTF8Char): PUTF8Char; cdecl;

/// <summary>Get the boolean value of a hint variable.</summary>
/// <param name="name">the name of the hint to get the boolean value from</param>
/// <param name="default_value">the value to return if the hint does not exist</param>
/// <returns>the boolean value of a hint or the provided default value if the
///   hint does not exist.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_GetHint
/// 
/// SDL_SetHint</remarks>
SDL_GetHintBoolean: function(const name: PUTF8Char; default_value: SDL_bool): SDL_bool; cdecl;

/// <summary>Add a function to watch a particular hint.</summary>
/// <param name="name">the hint to watch</param>
/// <param name="callback">An SDL_HintCallback function that will be called when the
///   hint value changes</param>
/// <param name="userdata">a pointer to pass to the callback function</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DelHintCallback</remarks>
SDL_AddHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;

/// <summary>Remove a function watching a particular hint.</summary>
/// <param name="name">the hint being watched</param>
/// <param name="callback">An SDL_HintCallback function that will be called when the
///   hint value changes</param>
/// <param name="userdata">a pointer being passed to the callback function</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AddHintCallback</remarks>
SDL_DelHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;

/// <summary>Clear all hints.</summary>
/// <remarks>This function is automatically called during SDL_Quit().
/// This function is available since SDL 2.0.0.</remarks>
SDL_ClearHints: procedure(); cdecl;

/// <summary>Dynamically load a shared object.</summary>
/// <param name="sofile">a system-dependent name of the object file</param>
/// <returns>an opaque pointer to the object handle or NULL if there was an
///   error; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadFunction
/// 
/// SDL_UnloadObject</remarks>
SDL_LoadObject: function(const sofile: PUTF8Char): Pointer; cdecl;

/// <summary>Look up the address of the named function in a shared object.</summary>
/// <remarks>This function pointer is no longer valid after calling SDL_UnloadObject().
/// 
/// This function can only look up C function names. Other languages may have
/// name mangling and intrinsic language support that varies from compiler to
/// compiler.
/// 
/// Make sure you declare your function pointers with the same calling
/// convention as the actual library function. Your code will crash
/// mysteriously if you do not do this.
/// 
/// If the requested function doesn't exist, NULL is returned.</remarks>
/// <param name="handle">a valid shared object handle returned by SDL_LoadObject()</param>
/// <param name="name">the name of the function to look up</param>
/// <returns>a pointer to the function or NULL if there was an error; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadObject
/// 
/// SDL_UnloadObject</remarks>
SDL_LoadFunction: function(handle: Pointer; const name: PUTF8Char): Pointer; cdecl;

/// <summary>Unload a shared object from memory.</summary>
/// <param name="handle">a valid shared object handle returned by SDL_LoadObject()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LoadFunction
/// 
/// SDL_LoadObject</remarks>
SDL_UnloadObject: procedure(handle: Pointer); cdecl;

/// <summary>Set the priority of all log categories.</summary>
/// <param name="priority">the SDL_LogPriority to assign</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogSetPriority</remarks>
SDL_LogSetAllPriority: procedure(priority: SDL_LogPriority); cdecl;

/// <summary>Set the priority of a particular log category.</summary>
/// <param name="category">the category to assign a priority to</param>
/// <param name="priority">the SDL_LogPriority to assign</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogGetPriority
/// 
/// SDL_LogSetAllPriority</remarks>
SDL_LogSetPriority: procedure(category: Integer; priority: SDL_LogPriority); cdecl;

/// <summary>Get the priority of a particular log category.</summary>
/// <param name="category">the category to query</param>
/// <returns>the SDL_LogPriority for the requested category</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogSetPriority</remarks>
SDL_LogGetPriority: function(category: Integer): SDL_LogPriority; cdecl;

/// <summary>Reset all priorities to default.</summary>
/// <remarks>This is called by SDL_Quit().
/// This function is available since SDL 2.0.0.
/// SDL_LogSetAllPriority
/// 
/// SDL_LogSetPriority</remarks>
SDL_LogResetPriorities: procedure(); cdecl;

/// <summary>Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.</summary>
/// <remarks>= *</remarks>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the `fmt` string, if
///   any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_Log_: procedure(const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_VERBOSE.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogWarn</remarks>
SDL_LogVerbose: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_DEBUG.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogDebug: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_INFO.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogInfo: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_WARN.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose</remarks>
SDL_LogWarn: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_ERROR.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogError: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with SDL_LOG_PRIORITY_CRITICAL.</summary>
/// <param name="category">the category of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogCritical: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with the specified category and priority.</summary>
/// <param name="category">the category of the message</param>
/// <param name="priority">the priority of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="...">additional parameters matching % tokens in the **fmt** string,
///   if any</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessageV
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogMessage: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char) varargs; cdecl;

/// <summary>Log a message with the specified category and priority.</summary>
/// <param name="category">the category of the message</param>
/// <param name="priority">the priority of the message</param>
/// <param name="fmt">a printf() style message format string</param>
/// <param name="ap">a variable argument list</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Log
/// 
/// SDL_LogCritical
/// 
/// SDL_LogDebug
/// 
/// SDL_LogError
/// 
/// SDL_LogInfo
/// 
/// SDL_LogMessage
/// 
/// SDL_LogVerbose
/// 
/// SDL_LogWarn</remarks>
SDL_LogMessageV: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char; ap: Pointer); cdecl;

/// <summary>Get the current log output function.</summary>
/// <param name="callback">an SDL_LogOutputFunction filled in with the current log
///   callback</param>
/// <param name="userdata">a pointer filled in with the pointer that is passed to
///   `callback`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogSetOutputFunction</remarks>
SDL_LogGetOutputFunction: procedure(callback: PSDL_LogOutputFunction; userdata: PPointer); cdecl;

/// <summary>Replace the default log output function with one of your own.</summary>
/// <param name="callback">an SDL_LogOutputFunction to call instead of the default</param>
/// <param name="userdata">a pointer that is passed to `callback`</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LogGetOutputFunction</remarks>
SDL_LogSetOutputFunction: procedure(callback: SDL_LogOutputFunction; userdata: Pointer); cdecl;

/// <summary>Create a modal message box.</summary>
/// <remarks>If your needs aren't complex, it might be easier to use
/// SDL_ShowSimpleMessageBox.
/// 
/// This function should be called on the thread that created the parent
/// window, or on the main thread if the messagebox has no parent. It will
/// block execution of that thread until the user clicks a button or closes the
/// messagebox.
/// 
/// This function may be called at any time, even before SDL_Init(). This makes
/// it useful for reporting errors like a failure to create a renderer or
/// OpenGL context.
/// 
/// On X11, SDL rolls its own dialog box with X11 primitives instead of a
/// formal toolkit like GTK+ or Qt.
/// 
/// Note that if SDL_Init() would fail because there isn't any available video
/// target, this function is likely to fail for the same reasons. If this is a
/// concern, check the return value from this function and fall back to writing
/// to stderr if you can.</remarks>
/// <param name="messageboxdata">the SDL_MessageBoxData structure with title, text and
///   other options</param>
/// <param name="buttonid">the pointer to which user id of hit button should be copied</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ShowSimpleMessageBox</remarks>
SDL_ShowMessageBox: function(const messageboxdata: PSDL_MessageBoxData; buttonid: PInteger): Integer; cdecl;

/// <summary>Display a simple modal message box.</summary>
/// <remarks>If your needs aren't complex, this function is preferred over
/// SDL_ShowMessageBox.
/// 
/// `flags` may be any of the following:
/// 
/// - `SDL_MESSAGEBOX_ERROR`: error dialog
/// - `SDL_MESSAGEBOX_WARNING`: warning dialog
/// - `SDL_MESSAGEBOX_INFORMATION`: informational dialog
/// 
/// This function should be called on the thread that created the parent
/// window, or on the main thread if the messagebox has no parent. It will
/// block execution of that thread until the user clicks a button or closes the
/// messagebox.
/// 
/// This function may be called at any time, even before SDL_Init(). This makes
/// it useful for reporting errors like a failure to create a renderer or
/// OpenGL context.
/// 
/// On X11, SDL rolls its own dialog box with X11 primitives instead of a
/// formal toolkit like GTK+ or Qt.
/// 
/// Note that if SDL_Init() would fail because there isn't any available video
/// target, this function is likely to fail for the same reasons. If this is a
/// concern, check the return value from this function and fall back to writing
/// to stderr if you can.</remarks>
/// <param name="flags">an SDL_MessageBoxFlags value</param>
/// <param name="title">UTF-8 title text</param>
/// <param name="message">UTF-8 message text</param>
/// <param name="window">the parent window, or NULL for no parent</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_ShowMessageBox</remarks>
SDL_ShowSimpleMessageBox: function(flags: Uint32; const title: PUTF8Char; const &message: PUTF8Char; window: PSDL_Window): Integer; cdecl;

/// <summary>Create a CAMetalLayer-backed NSView/UIView and attach it to the specified
/// window.</summary>
/// <remarks>On macOS, this does *not* associate a MTLDevice with the CAMetalLayer on
/// its own. It is up to user code to do that.
/// 
/// The returned handle can be casted directly to a NSView or UIView. To access
/// the backing CAMetalLayer, call SDL_Metal_GetLayer().
/// This function is available since SDL 2.0.12.
/// SDL_Metal_DestroyView
/// 
/// SDL_Metal_GetLayer</remarks>
SDL_Metal_CreateView: function(window: PSDL_Window): SDL_MetalView; cdecl;

/// <summary>Destroy an existing SDL_MetalView object.</summary>
/// <remarks>This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was
/// called after SDL_CreateWindow.
/// This function is available since SDL 2.0.12.
/// SDL_Metal_CreateView</remarks>
SDL_Metal_DestroyView: procedure(view: SDL_MetalView); cdecl;

/// <summary>Get a pointer to the backing CAMetalLayer for the given view.</summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_MetalCreateView</remarks>
SDL_Metal_GetLayer: function(view: SDL_MetalView): Pointer; cdecl;

/// <summary>Get the size of a window's underlying drawable in pixels (for use with
/// setting viewport, scissor & etc).</summary>
/// <param name="window">SDL_Window from which the drawable size should be queried</param>
/// <param name="w">Pointer to variable for storing the width in pixels, may be NULL</param></summary>
/// <remarks>This function is available since SDL 2.0.14.
/// SDL_GetWindowSize
/// 
/// SDL_CreateWindow</remarks>
SDL_Metal_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;

/// <summary>Get the current power supply details.</summary>
/// <remarks>You should never take a battery status as absolute truth. Batteries
/// (especially failing batteries) are delicate hardware, and the values
/// reported here are best estimates based on what that hardware reports. It's
/// not uncommon for older batteries to lose stored power much faster than it
/// reports, or completely drain when reporting it has 20 percent left, etc.
/// 
/// Battery status can change at any time; if you are concerned with power
/// state, you should call this function frequently, and perhaps ignore changes
/// until they seem to be stable for a few seconds.
/// 
/// It's possible a platform can only report battery percentage or time left
/// but not both.</remarks>
/// <param name="secs">seconds of battery life left, you can pass a NULL here if you
///   don't care, will return -1 if we can't determine a value, or
///   we're not running on a battery</param>
/// <param name="pct">percentage of battery life left, between 0 and 100, you can pass
///   a NULL here if you don't care, will return -1 if we can't
///   determine a value, or we're not running on a battery</param>
/// <returns>an SDL_PowerState enum representing the current battery state.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_GetPowerInfo: function(secs: PInteger; pct: PInteger): SDL_PowerState; cdecl;

/// <summary>Get the number of 2D rendering drivers available for the current display.</summary>
/// <remarks>A render driver is a set of code that handles rendering and texture
/// management on a particular display. Normally there is only one, but some
/// drivers may have several available with different capabilities.
/// 
/// There may be none if SDL was compiled without render support.</remarks>
/// <returns>a number >= 0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer
/// 
/// SDL_GetRenderDriverInfo</remarks>
SDL_GetNumRenderDrivers: function(): Integer; cdecl;

/// <summary>Get info about a specific 2D rendering driver for the current display.</summary>
/// <param name="index">the index of the driver to query information about</param>
/// <param name="info">an SDL_RendererInfo structure to be filled with information on
///   the rendering driver</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer
/// 
/// SDL_GetNumRenderDrivers</remarks>
SDL_GetRenderDriverInfo: function(index: Integer; info: PSDL_RendererInfo): Integer; cdecl;

/// <summary>Create a window and default renderer.</summary>
/// <param name="width">the width of the window</param>
/// <param name="height">the height of the window</param>
/// <param name="window_flags">the flags used to create the window (see
///   SDL_CreateWindow())</param>
/// <param name="window">a pointer filled with the window, or NULL on error</param>
/// <param name="renderer">a pointer filled with the renderer, or NULL on error</param>
/// <returns>0 on success, or -1 on error; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer
/// 
/// SDL_CreateWindow</remarks>
SDL_CreateWindowAndRenderer: function(width: Integer; height: Integer; window_flags: Uint32; window: PPSDL_Window; renderer: PPSDL_Renderer): Integer; cdecl;

/// <summary>Create a 2D rendering context for a window.</summary>
/// <param name="window">the window where rendering is displayed</param>
/// <param name="index">the index of the rendering driver to initialize, or -1 to
///   initialize the first one supporting the requested flags</param>
/// <param name="flags">0, or one or more SDL_RendererFlags OR'd together</param>
/// <returns>a valid rendering context or NULL if there was an error; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateSoftwareRenderer
/// 
/// SDL_DestroyRenderer
/// 
/// SDL_GetNumRenderDrivers
/// 
/// SDL_GetRendererInfo</remarks>
SDL_CreateRenderer: function(window: PSDL_Window; index: Integer; flags: Uint32): PSDL_Renderer; cdecl;

/// <summary>Create a 2D software rendering context for a surface.</summary>
/// <remarks>Two other API which can be used to create SDL_Renderer:
/// SDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_
/// create a software renderer, but they are intended to be used with an
/// SDL_Window as the final destination and not an SDL_Surface.</remarks>
/// <param name="surface">the SDL_Surface structure representing the surface where
///   rendering is done</param>
/// <returns>a valid rendering context or NULL if there was an error; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer
/// 
/// SDL_CreateWindowRenderer
/// 
/// SDL_DestroyRenderer</remarks>
SDL_CreateSoftwareRenderer: function(surface: PSDL_Surface): PSDL_Renderer; cdecl;

/// <summary>Get the renderer associated with a window.</summary>
/// <param name="window">the window to query</param>
/// <returns>the rendering context on success or NULL on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer</remarks>
SDL_GetRenderer: function(window: PSDL_Window): PSDL_Renderer; cdecl;

/// <summary>Get information about a rendering context.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="info">an SDL_RendererInfo structure filled with information about the
///   current renderer</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer</remarks>
SDL_GetRendererInfo: function(renderer: PSDL_Renderer; info: PSDL_RendererInfo): Integer; cdecl;

/// <summary>Get the output size in pixels of a rendering context.</summary>
/// <remarks>Due to high-dpi displays, you might end up with a rendering context that
/// has more pixels than the window that contains it, so use this instead of
/// SDL_GetWindowSize() to decide how much drawing area you have.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="w">an int filled with the width</param>
/// <param name="h">an int filled with the height</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRenderer</remarks>
SDL_GetRendererOutputSize: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger): Integer; cdecl;

/// <summary>Create a texture for a rendering context.</summary>
/// <remarks>You can set the texture scaling method by setting
/// `SDL_HINT_RENDER_SCALE_QUALITY` before creating the texture.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="format">one of the enumerated values in SDL_PixelFormatEnum</param>
/// <param name="access">one of the enumerated values in SDL_TextureAccess</param>
/// <param name="w">the width of the texture in pixels</param>
/// <param name="h">the height of the texture in pixels</param>
/// <returns>a pointer to the created texture or NULL if no rendering context
///   was active, the format was unsupported, or the width or height
///   were out of range; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateTextureFromSurface
/// 
/// SDL_DestroyTexture
/// 
/// SDL_QueryTexture
/// 
/// SDL_UpdateTexture</remarks>
SDL_CreateTexture: function(renderer: PSDL_Renderer; format: Uint32; access: Integer; w: Integer; h: Integer): PSDL_Texture; cdecl;

/// <summary>Create a texture from an existing surface.</summary>
/// <remarks>The surface is not modified or freed by this function.
/// 
/// The SDL_TextureAccess hint for the created texture is
/// `SDL_TEXTUREACCESS_STATIC`.
/// 
/// The pixel format of the created texture may be different from the pixel
/// format of the surface. Use SDL_QueryTexture() to query the pixel format of
/// the texture.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="surface">the SDL_Surface structure containing pixel data used to fill
///   the texture</param>
/// <returns>the created texture or NULL on failure; call SDL_GetError() for
///   more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateTexture
/// 
/// SDL_DestroyTexture
/// 
/// SDL_QueryTexture</remarks>
SDL_CreateTextureFromSurface: function(renderer: PSDL_Renderer; surface: PSDL_Surface): PSDL_Texture; cdecl;

/// <summary>Query the attributes of a texture.</summary>
/// <param name="texture">the texture to query</param>
/// <param name="format">a pointer filled in with the raw format of the texture; the
///   actual format may differ, but pixel transfers will use this
///   format (one of the SDL_PixelFormatEnum values)</param>
/// <param name="access">a pointer filled in with the actual access to the texture
///   (one of the SDL_TextureAccess values)</param>
/// <param name="w">a pointer filled in with the width of the texture in pixels</param>
/// <param name="h">a pointer filled in with the height of the texture in pixels</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateTexture</remarks>
SDL_QueryTexture: function(texture: PSDL_Texture; format: PUint32; access: PInteger; w: PInteger; h: PInteger): Integer; cdecl;

/// <summary>Set an additional color value multiplied into render copy operations.</summary>
/// <remarks>When this texture is rendered, during the copy operation each source color
/// channel is modulated by the appropriate color value according to the
/// following formula:
/// 
/// `srcC = srcC * (color / 255)`
/// 
/// Color modulation is not always supported by the renderer; it will return -1
/// if color modulation is not supported.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="r">the red color value multiplied into copy operations</param>
/// <param name="g">the green color value multiplied into copy operations</param>
/// <param name="b">the blue color value multiplied into copy operations</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTextureColorMod
/// 
/// SDL_SetTextureAlphaMod</remarks>
SDL_SetTextureColorMod: function(texture: PSDL_Texture; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;

/// <summary>Get the additional color value multiplied into render copy operations.</summary>
/// <param name="texture">the texture to query</param>
/// <param name="r">a pointer filled in with the current red color value</param>
/// <param name="g">a pointer filled in with the current green color value</param>
/// <param name="b">a pointer filled in with the current blue color value</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTextureAlphaMod
/// 
/// SDL_SetTextureColorMod</remarks>
SDL_GetTextureColorMod: function(texture: PSDL_Texture; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;

/// <summary>Set an additional alpha value multiplied into render copy operations.</summary>
/// <remarks>When this texture is rendered, during the copy operation the source alpha
/// value is modulated by this alpha value according to the following formula:
/// 
/// `srcA = srcA * (alpha / 255)`
/// 
/// Alpha modulation is not always supported by the renderer; it will return -1
/// if alpha modulation is not supported.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="alpha">the source alpha value multiplied into copy operations</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTextureAlphaMod
/// 
/// SDL_SetTextureColorMod</remarks>
SDL_SetTextureAlphaMod: function(texture: PSDL_Texture; alpha: Uint8): Integer; cdecl;

/// <summary>Get the additional alpha value multiplied into render copy operations.</summary>
/// <param name="texture">the texture to query</param>
/// <param name="alpha">a pointer filled in with the current alpha value</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTextureColorMod
/// 
/// SDL_SetTextureAlphaMod</remarks>
SDL_GetTextureAlphaMod: function(texture: PSDL_Texture; alpha: PUint8): Integer; cdecl;

/// <summary>Set the blend mode for a texture, used by SDL_RenderCopy().</summary>
/// <remarks>If the blend mode is not supported, the closest supported mode is chosen
/// and this function returns -1.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="blendMode">the SDL_BlendMode to use for texture blending</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetTextureBlendMode
/// 
/// SDL_RenderCopy</remarks>
SDL_SetTextureBlendMode: function(texture: PSDL_Texture; blendMode: SDL_BlendMode): Integer; cdecl;

/// <summary>Get the blend mode used for texture copy operations.</summary>
/// <param name="texture">the texture to query</param>
/// <param name="blendMode">a pointer filled in with the current SDL_BlendMode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetTextureBlendMode</remarks>
SDL_GetTextureBlendMode: function(texture: PSDL_Texture; blendMode: PSDL_BlendMode): Integer; cdecl;

/// <summary>Set the scale mode used for texture scale operations.</summary>
/// <remarks>If the scale mode is not supported, the closest supported mode is chosen.</remarks>
/// <param name="texture">The texture to update.</param>
/// <param name="scaleMode">the SDL_ScaleMode to use for texture scaling.</param>
/// <returns>0 on success, or -1 if the texture is not valid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.
/// SDL_GetTextureScaleMode</remarks>
SDL_SetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: SDL_ScaleMode): Integer; cdecl;

/// <summary>Get the scale mode used for texture scale operations.</summary>
/// <param name="texture">the texture to query.</param>
/// <param name="scaleMode">a pointer filled in with the current scale mode.</param>
/// <returns>0 on success, or -1 if the texture is not valid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.
/// SDL_SetTextureScaleMode</remarks>
SDL_GetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: PSDL_ScaleMode): Integer; cdecl;

/// <summary>Associate a user-specified pointer with a texture.</summary>
/// <param name="texture">the texture to update.</param>
/// <param name="userdata">the pointer to associate with the texture.</param>
/// <returns>0 on success, or -1 if the texture is not valid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_GetTextureUserData</remarks>
SDL_SetTextureUserData: function(texture: PSDL_Texture; userdata: Pointer): Integer; cdecl;

/// <summary>Get the user-specified pointer associated with a texture</summary>
/// <param name="texture">the texture to query.</param>
/// <returns>the pointer associated with the texture, or NULL if the texture is
///   not valid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_SetTextureUserData</remarks>
SDL_GetTextureUserData: function(texture: PSDL_Texture): Pointer; cdecl;

/// <summary>Update the given texture rectangle with new pixel data.</summary>
/// <remarks>The pixel data must be in the pixel format of the texture. Use
/// SDL_QueryTexture() to query the pixel format of the texture.
/// 
/// This is a fairly slow function, intended for use with static textures that
/// do not change often.
/// 
/// If the texture is intended to be updated often, it is preferred to create
/// the texture as streaming and use the locking functions referenced below.
/// While this function will work with streaming textures, for optimization
/// reasons you may not get the pixels back if you lock the texture afterward.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="rect">an SDL_Rect structure representing the area to update, or NULL
///   to update the entire texture</param>
/// <param name="pixels">the raw pixel data in the format of the texture</param>
/// <param name="pitch">the number of bytes in a row of pixel data, including padding
///   between lines</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateTexture
/// 
/// SDL_LockTexture
/// 
/// SDL_UnlockTexture</remarks>
SDL_UpdateTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const pixels: Pointer; pitch: Integer): Integer; cdecl;

/// <summary>Update a rectangle within a planar YV12 or IYUV texture with new pixel
/// data.</summary>
/// <remarks>You can use SDL_UpdateTexture() as long as your pixel data is a contiguous
/// block of Y and U/V planes in the proper order, but this function is
/// available if your pixel data is not contiguous.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="rect">a pointer to the rectangle of pixels to update, or NULL to
///   update the entire texture</param>
/// <param name="Yplane">the raw pixel data for the Y plane</param>
/// <param name="Ypitch">the number of bytes between rows of pixel data for the Y
///   plane</param>
/// <param name="Uplane">the raw pixel data for the U plane</param>
/// <param name="Upitch">the number of bytes between rows of pixel data for the U
///   plane</param>
/// <param name="Vplane">the raw pixel data for the V plane</param>
/// <param name="Vpitch">the number of bytes between rows of pixel data for the V
///   plane</param>
/// <returns>0 on success or -1 if the texture is not valid; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.
/// SDL_UpdateTexture</remarks>
SDL_UpdateYUVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const Uplane: PUint8; Upitch: Integer; const Vplane: PUint8; Vpitch: Integer): Integer; cdecl;

/// <summary>Update a rectangle within a planar NV12 or NV21 texture with new pixels.</summary>
/// <remarks>You can use SDL_UpdateTexture() as long as your pixel data is a contiguous
/// block of NV12/21 planes in the proper order, but this function is available
/// if your pixel data is not contiguous.</remarks>
/// <param name="texture">the texture to update</param>
/// <param name="rect">a pointer to the rectangle of pixels to update, or NULL to
///   update the entire texture.</param>
/// <param name="Yplane">the raw pixel data for the Y plane.</param>
/// <param name="Ypitch">the number of bytes between rows of pixel data for the Y
///   plane.</param>
/// <param name="UVplane">the raw pixel data for the UV plane.</param>
/// <param name="UVpitch">the number of bytes between rows of pixel data for the UV
///   plane.</param>
/// <returns>0 on success, or -1 if the texture is not valid.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_UpdateNVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const UVplane: PUint8; UVpitch: Integer): Integer; cdecl;

/// <summary>Lock a portion of the texture for **write-only** pixel access.</summary>
/// <remarks>As an optimization, the pixels made available for editing don't necessarily
/// contain the old texture data. This is a write-only operation, and if you
/// need to keep a copy of the texture data you should do that at the
/// application level.
/// 
/// You must use SDL_UnlockTexture() to unlock the pixels and apply any
/// changes.</remarks>
/// <param name="texture">the texture to lock for access, which was created with
///   `SDL_TEXTUREACCESS_STREAMING`</param>
/// <param name="rect">an SDL_Rect structure representing the area to lock for access;
///   NULL to lock the entire texture</param>
/// <param name="pixels">this is filled in with a pointer to the locked pixels,
///   appropriately offset by the locked area</param>
/// <param name="pitch">this is filled in with the pitch of the locked pixels; the
///   pitch is the length of one row in bytes</param>
/// <returns>0 on success or a negative error code if the texture is not valid
///   or was not created with `SDL_TEXTUREACCESS_STREAMING`; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_UnlockTexture</remarks>
SDL_LockTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; pixels: PPointer; pitch: PInteger): Integer; cdecl;

/// <summary>Lock a portion of the texture for **write-only** pixel access, and expose
/// it as a SDL surface.</summary>
/// <remarks>Besides providing an SDL_Surface instead of raw pixel data, this function
/// operates like SDL_LockTexture.
/// 
/// As an optimization, the pixels made available for editing don't necessarily
/// contain the old texture data. This is a write-only operation, and if you
/// need to keep a copy of the texture data you should do that at the
/// application level.
/// 
/// You must use SDL_UnlockTexture() to unlock the pixels and apply any
/// changes.
/// 
/// The returned surface is freed internally after calling SDL_UnlockTexture()
/// or SDL_DestroyTexture(). The caller should not free it.</remarks>
/// <param name="texture">the texture to lock for access, which was created with
///   `SDL_TEXTUREACCESS_STREAMING`</param>
/// <param name="rect">a pointer to the rectangle to lock for access. If the rect is
///   NULL, the entire texture will be locked</param>
/// <param name="surface">this is filled in with an SDL surface representing the
///   locked area</param>
/// <returns>0 on success, or -1 if the texture is not valid or was not created
///   with `SDL_TEXTUREACCESS_STREAMING`</returns></summary>
/// <remarks>This function is available since SDL 2.0.12.
/// SDL_LockTexture
/// 
/// SDL_UnlockTexture</remarks>
SDL_LockTextureToSurface: function(texture: PSDL_Texture; const rect: PSDL_Rect; surface: PPSDL_Surface): Integer; cdecl;

/// <summary>Unlock a texture, uploading the changes to video memory, if needed.</summary>
/// <remarks>**Warning**: Please note that SDL_LockTexture() is intended to be
/// write-only; it will not guarantee the previous contents of the texture will
/// be provided. You must fully initialize any area of a texture that you lock
/// before unlocking it, as the pixels might otherwise be uninitialized memory.
/// 
/// Which is to say: locking and immediately unlocking a texture can result in
/// corrupted textures, depending on the renderer in use.</remarks>
/// <param name="texture">a texture locked by SDL_LockTexture()</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_LockTexture</remarks>
SDL_UnlockTexture: procedure(texture: PSDL_Texture); cdecl;

/// <summary>Determine whether a renderer supports the use of render targets.</summary>
/// <param name="renderer">the renderer that will be checked</param>
/// <returns>SDL_TRUE if supported or SDL_FALSE if not.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRenderTarget</remarks>
SDL_RenderTargetSupported: function(renderer: PSDL_Renderer): SDL_bool; cdecl;

/// <summary>Set a texture as the current rendering target.</summary>
/// <remarks>Before using this function, you should check the
/// `SDL_RENDERER_TARGETTEXTURE` bit in the flags of SDL_RendererInfo to see if
/// render targets are supported.
/// 
/// The default render target is the window for which the renderer was created.
/// To stop rendering to a texture and render to the window again, call this
/// function with a NULL `texture`.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="texture">the targeted texture, which must be created with the
///   `SDL_TEXTUREACCESS_TARGET` flag, or NULL to render to the
///   window instead of a texture.</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRenderTarget</remarks>
SDL_SetRenderTarget: function(renderer: PSDL_Renderer; texture: PSDL_Texture): Integer; cdecl;

/// <summary>Get the current render target.</summary>
/// <remarks>The default render target is the window for which the renderer was created,
/// and is reported a NULL here.</remarks>
/// <param name="renderer">the rendering context</param>
/// <returns>the current render target or NULL for the default render target.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRenderTarget</remarks>
SDL_GetRenderTarget: function(renderer: PSDL_Renderer): PSDL_Texture; cdecl;

/// <summary>Set a device independent resolution for rendering.</summary>
/// <remarks>This function uses the viewport and scaling functionality to allow a fixed
/// logical resolution for rendering, regardless of the actual output
/// resolution. If the actual output resolution doesn't have the same aspect
/// ratio the output rendering will be centered within the output display.
/// 
/// If the output display is a window, mouse and touch events in the window
/// will be filtered and scaled so they seem to arrive within the logical
/// resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether
/// relative motion events are also scaled.
/// 
/// If this function results in scaling or subpixel drawing by the rendering
/// backend, it will be handled using the appropriate quality hints.</remarks>
/// <param name="renderer">the renderer for which resolution should be set</param>
/// <param name="w">the width of the logical resolution</param>
/// <param name="h">the height of the logical resolution</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderGetLogicalSize</remarks>
SDL_RenderSetLogicalSize: function(renderer: PSDL_Renderer; w: Integer; h: Integer): Integer; cdecl;

/// <summary>Get device independent resolution for rendering.</summary>
/// <remarks>This may return 0 for `w` and `h` if the SDL_Renderer has never had its
/// logical size set by SDL_RenderSetLogicalSize() and never had a render
/// target set.</remarks>
/// <param name="renderer">a rendering context</param>
/// <param name="w">an int to be filled with the width</param>
/// <param name="h">an int to be filled with the height</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderSetLogicalSize</remarks>
SDL_RenderGetLogicalSize: procedure(renderer: PSDL_Renderer; w: PInteger; h: PInteger); cdecl;

/// <summary>Set whether to force integer scales for resolution-independent rendering.</summary>
/// <remarks>This function restricts the logical viewport to integer values - that is,
/// when a resolution is between two multiples of a logical size, the viewport
/// size is rounded down to the lower multiple.</remarks>
/// <param name="renderer">the renderer for which integer scaling should be set</param>
/// <param name="enable">enable or disable the integer scaling for rendering</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_RenderGetIntegerScale
/// 
/// SDL_RenderSetLogicalSize</remarks>
SDL_RenderSetIntegerScale: function(renderer: PSDL_Renderer; enable: SDL_bool): Integer; cdecl;

/// <summary>Get whether integer scales are forced for resolution-independent rendering.</summary>
/// <param name="renderer">the renderer from which integer scaling should be queried</param>
/// <returns>SDL_TRUE if integer scales are forced or SDL_FALSE if not and on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.5.
/// SDL_RenderSetIntegerScale</remarks>
SDL_RenderGetIntegerScale: function(renderer: PSDL_Renderer): SDL_bool; cdecl;

/// <summary>Set the drawing area for rendering on the current target.</summary>
/// <remarks>When the window is resized, the viewport is reset to fill the entire new
/// window size.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="rect">the SDL_Rect structure representing the drawing area, or NULL
///   to set the viewport to the entire target</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderGetViewport</remarks>
SDL_RenderSetViewport: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;

/// <summary>Get the drawing area for the current target.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="rect">an SDL_Rect structure filled in with the current drawing area</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderSetViewport</remarks>
SDL_RenderGetViewport: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;

/// <summary>Set the clip rectangle for rendering on the specified target.</summary>
/// <param name="renderer">the rendering context for which clip rectangle should be
///   set</param>
/// <param name="rect">an SDL_Rect structure representing the clip area, relative to
///   the viewport, or NULL to disable clipping</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderGetClipRect
/// 
/// SDL_RenderIsClipEnabled</remarks>
SDL_RenderSetClipRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;

/// <summary>Get the clip rectangle for the current target.</summary>
/// <param name="renderer">the rendering context from which clip rectangle should be
///   queried</param>
/// <param name="rect">an SDL_Rect structure filled in with the current clipping area
///   or an empty rectangle if clipping is disabled</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderIsClipEnabled
/// 
/// SDL_RenderSetClipRect</remarks>
SDL_RenderGetClipRect: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;

/// <summary>Get whether clipping is enabled on the given renderer.</summary>
/// <param name="renderer">the renderer from which clip state should be queried</param>
/// <returns>SDL_TRUE if clipping is enabled or SDL_FALSE if not; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.4.
/// SDL_RenderGetClipRect
/// 
/// SDL_RenderSetClipRect</remarks>
SDL_RenderIsClipEnabled: function(renderer: PSDL_Renderer): SDL_bool; cdecl;

/// <summary>Set the drawing scale for rendering on the current target.</summary>
/// <remarks>The drawing coordinates are scaled by the x/y scaling factors before they
/// are used by the renderer. This allows resolution independent drawing with a
/// single coordinate system.
/// 
/// If this results in scaling or subpixel drawing by the rendering backend, it
/// will be handled using the appropriate quality hints. For best results use
/// integer scaling factors.</remarks>
/// <param name="renderer">a rendering context</param>
/// <param name="scaleX">the horizontal scaling factor</param>
/// <param name="scaleY">the vertical scaling factor</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderGetScale
/// 
/// SDL_RenderSetLogicalSize</remarks>
SDL_RenderSetScale: function(renderer: PSDL_Renderer; scaleX: Single; scaleY: Single): Integer; cdecl;

/// <summary>Get the drawing scale for the current target.</summary>
/// <param name="renderer">the renderer from which drawing scale should be queried</param>
/// <param name="scaleX">a pointer filled in with the horizontal scaling factor</param>
/// <param name="scaleY">a pointer filled in with the vertical scaling factor</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderSetScale</remarks>
SDL_RenderGetScale: procedure(renderer: PSDL_Renderer; scaleX: PSingle; scaleY: PSingle); cdecl;

/// <summary>Get logical coordinates of point in renderer when given real coordinates of
/// point in window.</summary>
/// <remarks>Logical coordinates will differ from real coordinates when render is scaled
/// and logical renderer size set</remarks>
/// <param name="renderer">the renderer from which the logical coordinates should be
///   calcualted</param>
/// <param name="windowX">the real X coordinate in the window</param>
/// <param name="windowY">the real Y coordinate in the window</param>
/// <param name="logicalX">the pointer filled with the logical x coordinate</param>
/// <param name="logicalY">the pointer filled with the logical y coordinate</param></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_RenderGetScale
/// 
/// SDL_RenderSetScale
/// 
/// SDL_RenderGetLogicalSize
/// 
/// SDL_RenderSetLogicalSize</remarks>
SDL_RenderWindowToLogical: procedure(renderer: PSDL_Renderer; windowX: Integer; windowY: Integer; logicalX: PSingle; logicalY: PSingle); cdecl;

/// <summary>Get real coordinates of point in window when given logical coordinates of point in renderer.
/// Logical coordinates will differ from real coordinates when render is scaled and logical renderer size set</summary>
/// <param name="renderer">the renderer from which the window coordinates should be calculated</param>
/// <param name="logicalX">the logical x coordinate</param>
/// <param name="logicalY">the logical y coordinate</param>
/// <param name="windowX">the pointer filled with the real X coordinate in the window</param>
/// <param name="windowY">the pointer filled with the real Y coordinate in the window</param></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_RenderGetScale
/// 
/// SDL_RenderSetScale
/// 
/// SDL_RenderGetLogicalSize
/// 
/// SDL_RenderSetLogicalSize</remarks>
SDL_RenderLogicalToWindow: procedure(renderer: PSDL_Renderer; logicalX: Single; logicalY: Single; windowX: PInteger; windowY: PInteger); cdecl;

/// <summary>Set the color used for drawing operations (Rect, Line and Clear).</summary>
/// <remarks>Set the color for drawing or filling rectangles, lines, and points, and for
/// SDL_RenderClear().</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="r">the red value used to draw on the rendering target</param>
/// <param name="g">the green value used to draw on the rendering target</param>
/// <param name="b">the blue value used to draw on the rendering target</param>
/// <param name="a">the alpha value used to draw on the rendering target; usually
///   `SDL_ALPHA_OPAQUE` (255). Use SDL_SetRenderDrawBlendMode to
///   specify how the alpha channel is used</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRenderDrawColor
/// 
/// SDL_RenderClear
/// 
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects</remarks>
SDL_SetRenderDrawColor: function(renderer: PSDL_Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;

/// <summary>Get the color used for drawing operations (Rect, Line and Clear).</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="r">a pointer filled in with the red value used to draw on the
///   rendering target</param>
/// <param name="g">a pointer filled in with the green value used to draw on the
///   rendering target</param>
/// <param name="b">a pointer filled in with the blue value used to draw on the
///   rendering target</param>
/// <param name="a">a pointer filled in with the alpha value used to draw on the
///   rendering target; usually `SDL_ALPHA_OPAQUE` (255)</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRenderDrawColor</remarks>
SDL_GetRenderDrawColor: function(renderer: PSDL_Renderer; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Integer; cdecl;

/// <summary>Set the blend mode used for drawing operations (Fill and Line).</summary>
/// <remarks>If the blend mode is not supported, the closest supported mode is chosen.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="blendMode">the SDL_BlendMode to use for blending</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRenderDrawBlendMode
/// 
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects</remarks>
SDL_SetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: SDL_BlendMode): Integer; cdecl;

/// <summary>Get the blend mode used for drawing operations.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="blendMode">a pointer filled in with the current SDL_BlendMode</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRenderDrawBlendMode</remarks>
SDL_GetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: PSDL_BlendMode): Integer; cdecl;

/// <summary>Clear the current rendering target with the drawing color.</summary>
/// <remarks>This function clears the entire rendering target, ignoring the viewport and
/// the clip rectangle.</remarks>
/// <param name="renderer">the rendering context</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderClear: function(renderer: PSDL_Renderer): Integer; cdecl;

/// <summary>Draw a point on the current rendering target.</summary>
/// <remarks>SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,
/// use SDL_RenderDrawPoints() instead.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="x">the x coordinate of the point</param>
/// <param name="y">the y coordinate of the point</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawPoint: function(renderer: PSDL_Renderer; x: Integer; y: Integer): Integer; cdecl;

/// <summary>Draw multiple points on the current rendering target.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="points">an array of SDL_Point structures that represent the points to
///   draw</param>
/// <param name="count">the number of points to draw</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawPoints: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;

/// <summary>Draw a line on the current rendering target.</summary>
/// <remarks>SDL_RenderDrawLine() draws the line to include both end points. If you want
/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="x1">the x coordinate of the start point</param>
/// <param name="y1">the y coordinate of the start point</param>
/// <param name="x2">the x coordinate of the end point</param>
/// <param name="y2">the y coordinate of the end point</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawLine: function(renderer: PSDL_Renderer; x1: Integer; y1: Integer; x2: Integer; y2: Integer): Integer; cdecl;

/// <summary>Draw a series of connected lines on the current rendering target.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="points">an array of SDL_Point structures representing points along
///   the lines</param>
/// <param name="count">the number of points, drawing count-1 lines</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawLines: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;

/// <summary>Draw a rectangle on the current rendering target.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="rect">an SDL_Rect structure representing the rectangle to draw, or
///   NULL to outline the entire rendering target</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;

/// <summary>Draw some number of rectangles on the current rendering target.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="rects">an array of SDL_Rect structures representing the rectangles to
///   be drawn</param>
/// <param name="count">the number of rectangles</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderDrawRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;

/// <summary>Fill a rectangle on the current rendering target with the drawing color.</summary>
/// <remarks>The current drawing color is set by SDL_SetRenderDrawColor(), and the
/// color's alpha value is ignored unless blending is enabled with the
/// appropriate call to SDL_SetRenderDrawBlendMode().</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="rect">the SDL_Rect structure representing the rectangle to fill, or
///   NULL for the entire rendering target</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRects
/// 
/// SDL_RenderPresent
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderFillRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;

/// <summary>Fill some number of rectangles on the current rendering target with the
/// drawing color.</summary>
/// <param name="renderer">the rendering context</param>
/// <param name="rects">an array of SDL_Rect structures representing the rectangles to
///   be filled</param>
/// <param name="count">the number of rectangles</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderPresent</remarks>
SDL_RenderFillRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;

/// <summary>Copy a portion of the texture to the current rendering target.</summary>
/// <remarks>The texture is blended with the destination based on its blend mode set
/// with SDL_SetTextureBlendMode().
/// 
/// The texture color is affected based on its color modulation set by
/// SDL_SetTextureColorMod().
/// 
/// The texture alpha is affected based on its alpha modulation set by
/// SDL_SetTextureAlphaMod().</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="texture">the source texture</param>
/// <param name="srcrect">the source SDL_Rect structure or NULL for the entire texture</param>
/// <param name="dstrect">the destination SDL_Rect structure or NULL for the entire
///   rendering target; the texture will be stretched to fill the
///   given rectangle</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderCopyEx
/// 
/// SDL_SetTextureAlphaMod
/// 
/// SDL_SetTextureBlendMode
/// 
/// SDL_SetTextureColorMod</remarks>
SDL_RenderCopy: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect): Integer; cdecl;

/// <summary>Copy a portion of the texture to the current rendering, with optional
/// rotation and flipping.</summary>
/// <remarks>Copy a portion of the texture to the current rendering target, optionally
/// rotating it by angle around the given center and also flipping it
/// top-bottom and/or left-right.
/// 
/// The texture is blended with the destination based on its blend mode set
/// with SDL_SetTextureBlendMode().
/// 
/// The texture color is affected based on its color modulation set by
/// SDL_SetTextureColorMod().
/// 
/// The texture alpha is affected based on its alpha modulation set by
/// SDL_SetTextureAlphaMod().</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="texture">the source texture</param>
/// <param name="srcrect">the source SDL_Rect structure or NULL for the entire texture</param>
/// <param name="dstrect">the destination SDL_Rect structure or NULL for the entire
///   rendering target</param>
/// <param name="angle">an angle in degrees that indicates the rotation that will be
///   applied to dstrect, rotating it in a clockwise direction</param>
/// <param name="center">a pointer to a point indicating the point around which
///   dstrect will be rotated (if NULL, rotation will be done
///   around `dstrect.w / 2`, `dstrect.h / 2`)</param>
/// <param name="flip">a SDL_RendererFlip value stating which flipping actions should
///   be performed on the texture</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderCopy
/// 
/// SDL_SetTextureAlphaMod
/// 
/// SDL_SetTextureBlendMode
/// 
/// SDL_SetTextureColorMod</remarks>
SDL_RenderCopyEx: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect; const angle: Double; const center: PSDL_Point; const flip: SDL_RendererFlip): Integer; cdecl;

/// <summary>Draw a point on the current rendering target at subpixel precision.</summary>
/// <param name="renderer">The renderer which should draw a point.</param>
/// <param name="x">The x coordinate of the point.</param>
/// <param name="y">The y coordinate of the point.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawPointF: function(renderer: PSDL_Renderer; x: Single; y: Single): Integer; cdecl;

/// <summary>Draw multiple points on the current rendering target at subpixel precision.</summary>
/// <param name="renderer">The renderer which should draw multiple points.</param>
/// <param name="points">The points to draw</param>
/// <param name="count">The number of points to draw</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawPointsF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;

/// <summary>Draw a line on the current rendering target at subpixel precision.</summary>
/// <param name="renderer">The renderer which should draw a line.</param>
/// <param name="x1">The x coordinate of the start point.</param>
/// <param name="y1">The y coordinate of the start point.</param>
/// <param name="x2">The x coordinate of the end point.</param>
/// <param name="y2">The y coordinate of the end point.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawLineF: function(renderer: PSDL_Renderer; x1: Single; y1: Single; x2: Single; y2: Single): Integer; cdecl;

/// <summary>Draw a series of connected lines on the current rendering target at
/// subpixel precision.</summary>
/// <param name="renderer">The renderer which should draw multiple lines.</param>
/// <param name="points">The points along the lines</param>
/// <param name="count">The number of points, drawing count-1 lines</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawLinesF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;

/// <summary>Draw a rectangle on the current rendering target at subpixel precision.</summary>
/// <param name="renderer">The renderer which should draw a rectangle.</param>
/// <param name="rect">A pointer to the destination rectangle, or NULL to outline the
///   entire rendering target.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;

/// <summary>Draw some number of rectangles on the current rendering target at subpixel
/// precision.</summary>
/// <param name="renderer">The renderer which should draw multiple rectangles.</param>
/// <param name="rects">A pointer to an array of destination rectangles.</param>
/// <param name="count">The number of rectangles.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderDrawRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;

/// <summary>Fill a rectangle on the current rendering target with the drawing color at
/// subpixel precision.</summary>
/// <param name="renderer">The renderer which should fill a rectangle.</param>
/// <param name="rect">A pointer to the destination rectangle, or NULL for the entire
///   rendering target.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderFillRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;

/// <summary>Fill some number of rectangles on the current rendering target with the
/// drawing color at subpixel precision.</summary>
/// <param name="renderer">The renderer which should fill multiple rectangles.</param>
/// <param name="rects">A pointer to an array of destination rectangles.</param>
/// <param name="count">The number of rectangles.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderFillRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;

/// <summary>Copy a portion of the texture to the current rendering target at subpixel
/// precision.</summary>
/// <param name="renderer">The renderer which should copy parts of a texture.</param>
/// <param name="texture">The source texture.</param>
/// <param name="srcrect">A pointer to the source rectangle, or NULL for the entire
///   texture.</param>
/// <param name="dstrect">A pointer to the destination rectangle, or NULL for the
///   entire rendering target.</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderCopyF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect): Integer; cdecl;

/// <summary>Copy a portion of the source texture to the current rendering target, with
/// rotation and flipping, at subpixel precision.</summary>
/// <param name="renderer">The renderer which should copy parts of a texture.</param>
/// <param name="texture">The source texture.</param>
/// <param name="srcrect">A pointer to the source rectangle, or NULL for the entire
///   texture.</param>
/// <param name="dstrect">A pointer to the destination rectangle, or NULL for the
///   entire rendering target.</param>
/// <param name="angle">An angle in degrees that indicates the rotation that will be
///   applied to dstrect, rotating it in a clockwise direction</param>
/// <param name="center">A pointer to a point indicating the point around which
///   dstrect will be rotated (if NULL, rotation will be done
///   around dstrect.w/2, dstrect.h/2).</param>
/// <param name="flip">An SDL_RendererFlip value stating which flipping actions should
///   be performed on the texture</param>
/// <returns>0 on success, or -1 on error</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderCopyExF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect; const angle: Double; const center: PSDL_FPoint; const flip: SDL_RendererFlip): Integer; cdecl;

/// <summary>Render a list of triangles, optionally using a texture and indices into the
/// vertex array Color and alpha modulation is done per vertex
/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</summary>
/// <param name="texture">(optional) The SDL texture to use.</param>
/// <param name="vertices">Vertices.</param>
/// <param name="num_vertices">Number of vertices.</param>
/// <param name="indices">(optional) An array of integer indices into the 'vertices'
///   array, if NULL all vertices will be rendered in sequential
///   order.</param>
/// <param name="num_indices">Number of indices.</param>
/// <returns>0 on success, or -1 if the operation is not supported</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.
/// SDL_Vertex</remarks>
SDL_RenderGeometry: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const vertices: PSDL_Vertex; num_vertices: Integer; const indices: PInteger; num_indices: Integer): Integer; cdecl;

/// <summary>Render a list of triangles, optionally using a texture and indices into the
/// vertex arrays Color and alpha modulation is done per vertex
/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</summary>
/// <param name="texture">(optional) The SDL texture to use.</param>
/// <param name="xy">Vertex positions</param>
/// <param name="xy_stride">Byte size to move from one element to the next element</param>
/// <param name="color">Vertex colors (as SDL_Color)</param>
/// <param name="color_stride">Byte size to move from one element to the next element</param>
/// <param name="uv">Vertex normalized texture coordinates</param>
/// <param name="uv_stride">Byte size to move from one element to the next element</param>
/// <param name="num_vertices">Number of vertices.</param>
/// <param name="indices">(optional) An array of indices into the 'vertices' arrays,
///   if NULL all vertices will be rendered in sequential order.</param>
/// <param name="num_indices">Number of indices.</param>
/// <param name="size_indices">Index size: 1 (byte), 2 (short), 4 (int)</param>
/// <returns>0 on success, or -1 if the operation is not supported</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_RenderGeometryRaw: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const xy: PSingle; xy_stride: Integer; const color: PInteger; color_stride: Integer; const uv: PSingle; uv_stride: Integer; num_vertices: Integer; const indices: Pointer; num_indices: Integer; size_indices: Integer): Integer; cdecl;

/// <summary>Read pixels from the current rendering target to an array of pixels.</summary>
/// <remarks>**WARNING**: This is a very slow operation, and should not be used
/// frequently.
/// 
/// `pitch` specifies the number of bytes between rows in the destination
/// `pixels` data. This allows you to write to a subrectangle or have padded
/// rows in the destination. Generally, `pitch` should equal the number of
/// pixels per row in the `pixels` data times the number of bytes per pixel,
/// but it might contain additional padding (for example, 24bit RGB Windows
/// Bitmap data pads all rows to multiples of 4 bytes).</remarks>
/// <param name="renderer">the rendering context</param>
/// <param name="rect">an SDL_Rect structure representing the area to read, or NULL
///   for the entire render target</param>
/// <param name="format">an SDL_PixelFormatEnum value of the desired format of the
///   pixel data, or 0 to use the format of the rendering target</param>
/// <param name="pixels">a pointer to the pixel data to copy into</param>
/// <param name="pitch">the pitch of the `pixels` parameter</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_RenderReadPixels: function(renderer: PSDL_Renderer; const rect: PSDL_Rect; format: Uint32; pixels: Pointer; pitch: Integer): Integer; cdecl;

/// <summary>Update the screen with any rendering performed since the previous call.</summary>
/// <remarks>SDL's rendering functions operate on a backbuffer; that is, calling a
/// rendering function such as SDL_RenderDrawLine() does not directly put a
/// line on the screen, but rather updates the backbuffer. As such, you compose
/// your entire scene and *present* the composed backbuffer to the screen as a
/// complete picture.
/// 
/// Therefore, when using SDL's rendering API, one does all drawing intended
/// for the frame, and then calls this function once per frame to present the
/// final drawing to the user.
/// 
/// The backbuffer should be considered invalidated after each present; do not
/// assume that previous contents will exist between frames. You are strongly
/// encouraged to call SDL_RenderClear() to initialize the backbuffer before
/// starting each new frame's drawing, even if you plan to overwrite every
/// pixel.</remarks>
/// <param name="renderer">the rendering context</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RenderClear
/// 
/// SDL_RenderDrawLine
/// 
/// SDL_RenderDrawLines
/// 
/// SDL_RenderDrawPoint
/// 
/// SDL_RenderDrawPoints
/// 
/// SDL_RenderDrawRect
/// 
/// SDL_RenderDrawRects
/// 
/// SDL_RenderFillRect
/// 
/// SDL_RenderFillRects
/// 
/// SDL_SetRenderDrawBlendMode
/// 
/// SDL_SetRenderDrawColor</remarks>
SDL_RenderPresent: procedure(renderer: PSDL_Renderer); cdecl;

/// <summary>Destroy the specified texture.</summary>
/// <remarks>Passing NULL or an otherwise invalid texture will set the SDL error message
/// to "Invalid texture".</remarks>
/// <param name="texture">the texture to destroy</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateTexture
/// 
/// SDL_CreateTextureFromSurface</remarks>
SDL_DestroyTexture: procedure(texture: PSDL_Texture); cdecl;

/// <summary>Destroy the rendering context for a window and free associated textures.</summary>
/// <param name="renderer">the rendering context</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateRenderer</remarks>
SDL_DestroyRenderer: procedure(renderer: PSDL_Renderer); cdecl;

/// <summary>Force the rendering context to flush any pending commands to the underlying
/// rendering API.</summary>
/// <remarks>You do not need to (and in fact, shouldn't) call this function unless you
/// are planning to call into OpenGL/Direct3D/Metal/whatever directly in
/// addition to using an SDL_Renderer.
/// 
/// This is for a very-specific case: if you are using SDL's render API, you
/// asked for a specific renderer backend (OpenGL, Direct3D, etc), you set
/// SDL_HINT_RENDER_BATCHING to "1", and you plan to make OpenGL/D3D/whatever
/// calls in addition to SDL render API calls. If all of this applies, you
/// should call SDL_RenderFlush() between calls to SDL's render API and the
/// low-level API you're using in cooperation.
/// 
/// In all other cases, you can ignore this function. This is only here to get
/// maximum performance out of a specific situation. In all other cases, SDL
/// will do the right thing, perhaps at a performance loss.
/// 
/// This function is first available in SDL 2.0.10, and is not needed in 2.0.9
/// and earlier, as earlier versions did not queue rendering commands at all,
/// instead flushing them to the OS immediately.</remarks>
/// <param name="renderer">the rendering context</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.10.</remarks>
SDL_RenderFlush: function(renderer: PSDL_Renderer): Integer; cdecl;

/// <summary>Bind an OpenGL/ES/ES2 texture to the current context.</summary>
/// <remarks>This is for use with OpenGL instructions when rendering OpenGL primitives
/// directly.
/// 
/// If not NULL, `texw` and `texh` will be filled with the width and height
/// values suitable for the provided texture. In most cases, both will be 1.0,
/// however, on systems that support the GL_ARB_texture_rectangle extension,
/// these values will actually be the pixel width and height used to create the
/// texture, so this factor needs to be taken into account when providing
/// texture coordinates to OpenGL.
/// 
/// You need a renderer to create an SDL_Texture, therefore you can only use
/// this function with an implicit OpenGL context from SDL_CreateRenderer(),
/// not with your own OpenGL context. If you need control over your OpenGL
/// context, you need to write your own texture-loading methods.
/// 
/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and
/// re-order the color channels in the shaders phase, so the uploaded texture
/// may have swapped color channels.</remarks>
/// <param name="texture">the texture to bind to the current OpenGL/ES/ES2 context</param>
/// <param name="texw">a pointer to a float value which will be filled with the
///   texture width or NULL if you don't need that value</param>
/// <param name="texh">a pointer to a float value which will be filled with the
///   texture height or NULL if you don't need that value</param>
/// <returns>0 on success, or -1 if the operation is not supported; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_MakeCurrent
/// 
/// SDL_GL_UnbindTexture</remarks>
SDL_GL_BindTexture: function(texture: PSDL_Texture; texw: PSingle; texh: PSingle): Integer; cdecl;

/// <summary>Unbind an OpenGL/ES/ES2 texture from the current context.</summary>
/// <remarks>See SDL_GL_BindTexture() for examples on how to use these functions</remarks>
/// <param name="texture">the texture to unbind from the current OpenGL/ES/ES2 context</param>
/// <returns>0 on success, or -1 if the operation is not supported</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GL_BindTexture
/// 
/// SDL_GL_MakeCurrent</remarks>
SDL_GL_UnbindTexture: function(texture: PSDL_Texture): Integer; cdecl;

/// <summary>Get the CAMetalLayer associated with the given Metal renderer.</summary>
/// <remarks>This function returns `void *`, so SDL doesn't have to include Metal's
/// headers, but it can be safely cast to a `CAMetalLayer *`.</remarks>
/// <param name="renderer">The renderer to query</param>
/// <returns>a `CAMetalLayer *` on success, or NULL if the renderer isn't a
///   Metal renderer</returns></summary>
/// <remarks>This function is available since SDL 2.0.8.
/// SDL_RenderGetMetalCommandEncoder</remarks>
SDL_RenderGetMetalLayer: function(renderer: PSDL_Renderer): Pointer; cdecl;

/// <summary>Get the Metal command encoder for the current frame</summary>
/// <remarks>This function returns `void *`, so SDL doesn't have to include Metal's
/// headers, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.
/// 
/// Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give
/// SDL a drawable to render to, which might happen if the window is
/// hidden/minimized/offscreen. This doesn't apply to command encoders for
/// render targets, just the window's backbacker. Check your return values!</remarks>
/// <param name="renderer">The renderer to query</param>
/// <returns>an `id<MTLRenderCommandEncoder>` on success, or NULL if the
///   renderer isn't a Metal renderer or there was an error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.8.
/// SDL_RenderGetMetalLayer</remarks>
SDL_RenderGetMetalCommandEncoder: function(renderer: PSDL_Renderer): Pointer; cdecl;

/// <summary>Toggle VSync of the given renderer.</summary>
/// <param name="renderer">The renderer to toggle</param>
/// <param name="vsync">1 for on, 0 for off. All other values are reserved</param>
/// <returns>a 0 int on success, or non-zero on failure</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_RenderSetVSync: function(renderer: PSDL_Renderer; vsync: Integer): Integer; cdecl;

/// <summary>Create a window that can be shaped with the specified position, dimensions,
/// and flags.</summary>
/// <param name="title">The title of the window, in UTF-8 encoding.</param>
/// <param name="x">The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
///   ::SDL_WINDOWPOS_UNDEFINED.</param>
/// <param name="y">The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
///   ::SDL_WINDOWPOS_UNDEFINED.</param>
/// <param name="w">The width of the window.</param>
/// <param name="h">The height of the window.</param>
/// <param name="flags">The flags for the window, a mask of SDL_WINDOW_BORDERLESS with
///   any of the following: ::SDL_WINDOW_OPENGL,
///   ::SDL_WINDOW_INPUT_GRABBED, ::SDL_WINDOW_HIDDEN,
///   ::SDL_WINDOW_RESIZABLE, ::SDL_WINDOW_MAXIMIZED,
///   ::SDL_WINDOW_MINIMIZED, ::SDL_WINDOW_BORDERLESS is always set,
///   and ::SDL_WINDOW_FULLSCREEN is always unset.</param>
/// <returns>the window created, or NULL if window creation failed.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_DestroyWindow</remarks>
SDL_CreateShapedWindow: function(const title: PUTF8Char; x: Cardinal; y: Cardinal; w: Cardinal; h: Cardinal; flags: Uint32): PSDL_Window; cdecl;

/// <summary>Return whether the given window is a shaped window.</summary>
/// <param name="window">The window to query for being shaped.</param>
/// <returns>SDL_TRUE if the window is a window that can be shaped, SDL_FALSE if
///   the window is unshaped or NULL.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_CreateShapedWindow</remarks>
SDL_IsShapedWindow: function(const window: PSDL_Window): SDL_bool; cdecl;

/// <summary>Set the shape and parameters of a shaped window.</summary>
/// <param name="window">The shaped window whose parameters should be set.</param>
/// <param name="shape">A surface encoding the desired shape for the window.</param>
/// <param name="shape_mode">The parameters to set for the shaped window.</param>
/// <returns>0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape
///   argument, or SDL_NONSHAPEABLE_WINDOW if the SDL_Window given does
///   not reference a valid shaped window.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WindowShapeMode
/// 
/// SDL_GetShapedWindowMode</remarks>
SDL_SetWindowShape: function(window: PSDL_Window; shape: PSDL_Surface; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;

/// <summary>Get the shape parameters of a shaped window.</summary>
/// <param name="window">The shaped window whose parameters should be retrieved.</param>
/// <param name="shape_mode">An empty shape-mode structure to fill, or NULL to check
///   whether the window has a shape.</param>
/// <returns>0 if the window has a shape and, provided shape_mode was not NULL,
///   shape_mode has been filled with the mode data,
///   SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped
///   window, or SDL_WINDOW_LACKS_SHAPE if the SDL_Window given is a
///   shapeable window currently lacking a shape.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_WindowShapeMode
/// 
/// SDL_SetWindowShape</remarks>
SDL_GetShapedWindowMode: function(window: PSDL_Window; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;

/// <summary>Set a callback for every Windows message, run before TranslateMessage().</summary>
/// <param name="callback">The SDL_WindowsMessageHook function to call.</param>
/// <param name="userdata">a pointer to pass to every iteration of `callback`</param></summary>
/// <remarks>This function is available since SDL 2.0.4.</remarks>
SDL_SetWindowsMessageHook: procedure(callback: SDL_WindowsMessageHook; userdata: Pointer); cdecl;

/// <summary>Get the D3D9 adapter index that matches the specified display index.</summary>
/// <remarks>The returned adapter index can be passed to `IDirect3D9::CreateDevice` and
/// controls on which monitor a full screen application will appear.</remarks>
/// <param name="displayIndex">the display index for which to get the D3D9 adapter
///   index</param>
/// <returns>the D3D9 adapter index on success or a negative error code on
///   failure; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.</remarks>
SDL_Direct3D9GetAdapterIndex: function(displayIndex: Integer): Integer; cdecl;

/// <summary>Get the D3D9 device associated with a renderer.</summary>
/// <remarks>Once you are done using the device, you should release it to avoid a
/// resource leak.</remarks>
/// <param name="renderer">the renderer from which to get the associated D3D device</param>
/// <returns>the D3D9 device associated with given renderer or NULL if it is
///   not a D3D9 renderer; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.1.</remarks>
SDL_RenderGetD3D9Device: function(renderer: PSDL_Renderer): PIDirect3DDevice9; cdecl;

/// <summary>Get the D3D11 device associated with a renderer.</summary>
/// <remarks>Once you are done using the device, you should release it to avoid a
/// resource leak.</remarks>
/// <param name="renderer">the renderer from which to get the associated D3D11 device</param>
/// <returns>the D3D11 device associated with given renderer or NULL if it is
///   not a D3D11 renderer; call SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.16.</remarks>
SDL_RenderGetD3D11Device: function(renderer: PSDL_Renderer): PID3D11Device; cdecl;

/// <summary>Get the DXGI Adapter and Output indices for the specified display index.</summary>
/// <remarks>The DXGI Adapter and Output indices can be passed to `EnumAdapters` and
/// `EnumOutputs` respectively to get the objects required to create a DX10 or
/// DX11 device and swap chain.
/// 
/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it
/// returns an SDL_bool.</remarks>
/// <param name="displayIndex">the display index for which to get both indices</param>
/// <param name="adapterIndex">a pointer to be filled in with the adapter index</param>
/// <param name="outputIndex">a pointer to be filled in with the output index</param>
/// <returns>SDL_TRUE on success or SDL_FALSE on failure; call SDL_GetError()
///   for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.2.</remarks>
SDL_DXGIGetOutputInfo: function(displayIndex: Integer; adapterIndex: PInteger; outputIndex: PInteger): SDL_bool; cdecl;

/// <summary>Query if the current device is a tablet.</summary>
/// <remarks>If SDL can't determine this, it will return SDL_FALSE.</remarks>
/// <returns>SDL_TRUE if the device is a tablet, SDL_FALSE otherwise.</returns></summary>
/// <remarks>This function is available since SDL 2.0.9.</remarks>
SDL_IsTablet: function(): SDL_bool; cdecl;

SDL_OnApplicationWillTerminate: procedure(); cdecl;

SDL_OnApplicationDidReceiveMemoryWarning: procedure(); cdecl;

SDL_OnApplicationWillResignActive: procedure(); cdecl;

SDL_OnApplicationDidEnterBackground: procedure(); cdecl;

SDL_OnApplicationWillEnterForeground: procedure(); cdecl;

SDL_OnApplicationDidBecomeActive: procedure(); cdecl;

/// <summary>Get the number of milliseconds since SDL library initialization.</summary>
/// <remarks>This value wraps if the program runs for more than ~49 days.
/// 
/// This function is not recommended as of SDL 2.0.18; use SDL_GetTicks64()
/// instead, where the value doesn't wrap every ~49 days. There are places in
/// SDL where we provide a 32-bit timestamp that can not change without
/// breaking binary compatibility, though, so this function isn't officially
/// deprecated.</remarks>
/// <returns>an unsigned 32-bit value representing the number of milliseconds
///   since the SDL library initialized.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_TICKS_PASSED</remarks>
SDL_GetTicks: function(): Uint32; cdecl;

/// <summary>Get the number of milliseconds since SDL library initialization.</summary>
/// <remarks>Note that you should not use the SDL_TICKS_PASSED macro with values
/// returned by this function, as that macro does clever math to compensate for
/// the 32-bit overflow every ~49 days that SDL_GetTicks() suffers from. 64-bit
/// values from this function can be safely compared directly.
/// 
/// For example, if you want to wait 100 ms, you could do this:
/// 
/// ```c
/// const Uint64 timeout = SDL_GetTicks64() + 100;
/// while (SDL_GetTicks64() < timeout) {
/// // ... do work until timeout has elapsed
/// }
/// ```</remarks>
/// <returns>an unsigned 64-bit value representing the number of milliseconds
///   since the SDL library initialized.</returns></summary>
/// <remarks>This function is available since SDL 2.0.18.</remarks>
SDL_GetTicks64: function(): Uint64; cdecl;

/// <summary>Get the current value of the high resolution counter.</summary>
/// <remarks>This function is typically used for profiling.
/// 
/// The counter values are only meaningful relative to each other. Differences
/// between values can be converted to times by using
/// SDL_GetPerformanceFrequency().</remarks>
/// <returns>the current counter value.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetPerformanceFrequency</remarks>
SDL_GetPerformanceCounter: function(): Uint64; cdecl;

/// <summary>Get the count per second of the high resolution counter.</summary>
/// <returns>a platform-specific count per second.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetPerformanceCounter</remarks>
SDL_GetPerformanceFrequency: function(): Uint64; cdecl;

/// <summary>Wait a specified number of milliseconds before returning.</summary>
/// <remarks>This function waits a specified number of milliseconds before returning. It
/// waits at least the specified time, but possibly longer due to OS
/// scheduling.</remarks>
/// <param name="ms">the number of milliseconds to delay</param></summary>
/// <remarks>This function is available since SDL 2.0.0.</remarks>
SDL_Delay: procedure(ms: Uint32); cdecl;

/// <summary>Call a callback function at a future time.</summary>
/// <remarks>If you use this function, you must pass `SDL_INIT_TIMER` to SDL_Init().
/// 
/// The callback function is passed the current timer interval and the user
/// supplied parameter from the SDL_AddTimer() call and should return the next
/// timer interval. If the value returned from the callback is 0, the timer is
/// canceled.
/// 
/// The callback is run on a separate thread.
/// 
/// Timers take into account the amount of time it took to execute the
/// callback. For example, if the callback took 250 ms to execute and returned
/// 1000 (ms), the timer would only wait another 750 ms before its next
/// iteration.
/// 
/// Timing may be inexact due to OS scheduling. Be sure to note the current
/// time with SDL_GetTicks() or SDL_GetPerformanceCounter() in case your
/// callback needs to adjust for variances.</remarks>
/// <param name="interval">the timer delay, in milliseconds, passed to `callback`</param>
/// <param name="callback">the SDL_TimerCallback function to call when the specified
///   `interval` elapses</param>
/// <param name="param">a pointer that is passed to `callback`</param>
/// <returns>a timer ID or 0 if an error occurs; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_RemoveTimer</remarks>
SDL_AddTimer: function(interval: Uint32; callback: SDL_TimerCallback; param: Pointer): SDL_TimerID; cdecl;

/// <summary>Remove a timer created with SDL_AddTimer().</summary>
/// <param name="id">the ID of the timer to remove</param>
/// <returns>SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn't
///   found.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_AddTimer</remarks>
SDL_RemoveTimer: function(id: SDL_TimerID): SDL_bool; cdecl;

/// <summary>Get the version of SDL that is linked against your program.</summary>
/// <remarks>If you are linking to SDL dynamically, then it is possible that the current
/// version will be different than the version you compiled against. This
/// function returns the current version, while SDL_VERSION() is a macro that
/// tells you what version you compiled with.
/// 
/// This function may be called safely at any time, even before SDL_Init().</remarks>
/// <param name="ver">the SDL_version structure that contains the version information</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRevision</remarks>
SDL_GetVersion: procedure(ver: PSDL_version); cdecl;

/// <summary>Get the code revision of SDL that is linked against your program.</summary>
/// <remarks>This value is the revision of the code you are linked with and may be
/// different from the code you are compiling with, which is found in the
/// constant SDL_REVISION.
/// 
/// The revision is arbitrary string (a hash value) uniquely identifying the
/// exact revision of the SDL library in use, and is only useful in comparing
/// against other revisions. It is NOT an incrementing number.
/// 
/// If SDL wasn't built from a git repository with the appropriate tools, this
/// will return an empty string.
/// 
/// Prior to SDL 2.0.16, before development moved to GitHub, this returned a
/// hash for a Mercurial repository.
/// 
/// You shouldn't use this function for anything but logging it for debugging
/// purposes. The string is not intended to be reliable in any way.</remarks>
/// <returns>an arbitrary string, uniquely identifying the exact revision of
///   the SDL library in use.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetVersion</remarks>
SDL_GetRevision: function(): PUTF8Char; cdecl;

/// <summary>Obsolete function, do not use.</summary>
/// <remarks>When SDL was hosted in a Mercurial repository, and was built carefully,
/// this would return the revision number that the build was created from. This
/// number was not reliable for several reasons, but more importantly, SDL is
/// now hosted in a git repository, which does not offer numbers at all, only
/// hashes. This function only ever returns zero now. Don't use it.
/// 
/// Before SDL 2.0.16, this might have returned an unreliable, but non-zero
/// number.
/// Use SDL_GetRevision() instead; if SDL was carefully built, it
/// will return a git hash.</remarks>
/// <returns>zero, always, in modern SDL releases.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_GetRevision</remarks>
SDL_GetRevisionNumber: function(): Integer; cdecl;

/// <summary>Report the user's preferred locale.</summary>
/// <remarks>This returns an array of SDL_Locale structs, the final item zeroed out.
/// When the caller is done with this array, it should call SDL_free() on the
/// returned value; all the memory involved is allocated in a single block, so
/// a single SDL_free() will suffice.
/// 
/// Returned language strings are in the format xx, where 'xx' is an ISO-639
/// language specifier (such as "en" for English, "de" for German, etc).
/// Country strings are in the format YY, where "YY" is an ISO-3166 country
/// code (such as "US" for the United States, "CA" for Canada, etc). Country
/// might be NULL if there's no specific guidance on them (so you might get {
/// "en", "US" } for American English, but { "en", NULL } means "English
/// language, generically"). Language strings are never NULL, except to
/// terminate the array.
/// 
/// Please note that not all of these strings are 2 characters; some are three
/// or more.
/// 
/// The returned list of locales are in the order of the user's preference. For
/// example, a German citizen that is fluent in US English and knows enough
/// Japanese to navigate around Tokyo might have a list like: { "de", "en_US",
/// "jp", NULL }. Someone from England might prefer British English (where
/// "color" is spelled "colour", etc), but will settle for anything like it: {
/// "en_GB", "en", NULL }.
/// 
/// This function returns NULL on error, including when the platform does not
/// supply this information at all.
/// 
/// This might be a "slow" call that has to query the operating system. It's
/// best to ask for this once and save the results. However, this list can
/// change, usually because the user has changed a system preference outside of
/// your program; SDL will send an SDL_LOCALECHANGED event in this case, if
/// possible, and you can call this function again to get an updated copy of
/// preferred locales.</remarks>
/// <returns>array of locales, terminated with a locale with a NULL language
///   field. Will return NULL on error.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_GetPreferredLocales: function(): PSDL_Locale; cdecl;

/// <summary>Open a URL/URI in the browser or other appropriate external application.</summary>
/// <remarks>Open a URL in a separate, system-provided application. How this works will
/// vary wildly depending on the platform. This will likely launch what makes
/// sense to handle a specific URL's protocol (a web browser for `http://`,
/// etc), but it might also be able to launch file managers for directories and
/// other things.
/// 
/// What happens when you open a URL varies wildly as well: your game window
/// may lose focus (and may or may not lose focus if your game was fullscreen
/// or grabbing input at the time). On mobile devices, your app will likely
/// move to the background or your process might be paused. Any given platform
/// may or may not handle a given URL.
/// 
/// If this is unimplemented (or simply unavailable) for a platform, this will
/// fail with an error. A successful result does not mean the URL loaded, just
/// that we launched _something_ to handle it (or at least believe we did).
/// 
/// All this to say: this function can be useful, but you should definitely
/// test it on every platform you target.</remarks>
/// <param name="url">A valid URL/URI to open. Use `file:///full/path/to/file` for
///   local files, if supported.</param>
/// <returns>0 on success, or -1 on error; call SDL_GetError() for more
///   information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.14.</remarks>
SDL_OpenURL: function(const url: PUTF8Char): Integer; cdecl;

/// <summary>Initialize the SDL library.</summary>
/// <remarks>SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the
/// two may be used interchangeably. Though for readability of your code
/// SDL_InitSubSystem() might be preferred.
/// 
/// The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)
/// subsystems are initialized by default. Message boxes
/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the
/// video subsystem, in hopes of being useful in showing an error dialog when
/// SDL_Init fails. You must specifically initialize other subsystems if you
/// use them in your application.
/// 
/// Logging (such as SDL_Log) works without initialization, too.
/// 
/// `flags` may be any of the following OR'd together:
/// 
/// - `SDL_INIT_TIMER`: timer subsystem
/// - `SDL_INIT_AUDIO`: audio subsystem
/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events
/// subsystem
/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the
/// events subsystem
/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem
/// - `SDL_INIT_GAMECONTROLLER`: controller subsystem; automatically
/// initializes the joystick subsystem
/// - `SDL_INIT_EVENTS`: events subsystem
/// - `SDL_INIT_EVERYTHING`: all of the above subsystems
/// - `SDL_INIT_NOPARACHUTE`: compatibility; this flag is ignored
/// 
/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()
/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or
/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then
/// this call will increase the ref-count and return.</remarks>
/// <param name="flags">subsystem initialization flags</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_InitSubSystem
/// 
/// SDL_Quit
/// 
/// SDL_SetMainReady
/// 
/// SDL_WasInit</remarks>
SDL_Init: function(flags: Uint32): Integer; cdecl;

/// <summary>Compatibility function to initialize the SDL library.</summary>
/// <remarks>In SDL2, this function and SDL_Init() are interchangeable.</remarks>
/// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param>
/// <returns>0 on success or a negative error code on failure; call
///   SDL_GetError() for more information.</returns></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_Init
/// 
/// SDL_Quit
/// 
/// SDL_QuitSubSystem</remarks>
SDL_InitSubSystem: function(flags: Uint32): Integer; cdecl;

/// <summary>Shut down specific SDL subsystems.</summary>
/// <remarks>If you start a subsystem using a call to that subsystem's init function
/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),
/// SDL_QuitSubSystem() and SDL_WasInit() will not work. You will need to use
/// that subsystem's quit function (SDL_VideoQuit()) directly instead. But
/// generally, you should not be using those functions directly anyhow; use
/// SDL_Init() instead.
/// 
/// You still need to call SDL_Quit() even if you close all open subsystems
/// with SDL_QuitSubSystem().</remarks>
/// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param></summary>
/// <remarks>This function is available since SDL 2.0.0.
/// SDL_InitSubSystem
/// 
/// SDL_Quit</remarks>
SDL_QuitSubSystem: procedure(flags: Uint32); cdecl;

/// <summary>Get a mask of the specified subsystems which are currently initialized.</summary>
/// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param>
/// <returns>a mask of all initialized subsystems if `flags` is 0, otherwise it
///   returns the initialization status of the specified subsystems.</returns></summary>
/// <remarks>The return value does not include SDL_INIT_NOPARACHUTE.
/// This function is available since SDL 2.0.0.
/// SDL_Init
/// 
/// SDL_InitSubSystem</remarks>
SDL_WasInit: function(flags: Uint32): Uint32; cdecl;

/// <summary>Clean up all initialized subsystems.</summary>
/// <remarks>You should call this function even if you have already shutdown each
/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this
/// function even in the case of errors in initialization.
/// 
/// If you start a subsystem using a call to that subsystem's init function
/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),
/// then you must use that subsystem's quit function (SDL_VideoQuit()) to shut
/// it down before calling SDL_Quit(). But generally, you should not be using
/// those functions directly anyhow; use SDL_Init() instead.
/// 
/// You can use this function with atexit() to ensure that it is run when your
/// application is shutdown, but it is not wise to do this from a library or
/// other dynamically loaded code.
/// This function is available since SDL 2.0.0.
/// SDL_Init
/// 
/// SDL_QuitSubSystem</remarks>
SDL_Quit: procedure(); cdecl;

/// <summary>This function gets the version of the dynamically linked SDL_image library.
/// it should NOT be used to fill a version structure, instead you should
/// use the SDL_IMAGE_VERSION() macro.</summary>
IMG_Linked_Version: function(): PSDL_version; cdecl;

/// <summary>Loads dynamic libraries and prepares them for use.  Flags should be
/// one or more flags from IMG_InitFlags OR'd together.
/// It returns the flags successfully initialized, or 0 on failure.</summary>
IMG_Init: function(flags: Integer): Integer; cdecl;

/// <summary>Unloads libraries loaded with IMG_Init</summary>
IMG_Quit: procedure(); cdecl;

/// <summary>Load an image from an SDL data source.
/// The 'type' may be one of: "BMP", "GIF", "PNG", etc.</summary>
/// <remarks>If the image format supports a transparent pixel, SDL will set the
/// colorkey for the surface.  You can enable RLE acceleration on the
/// surface afterwards by calling:
/// SDL_SetColorKey(image, SDL_RLEACCEL, image->format->colorkey);</remarks>
IMG_LoadTyped_RW: function(src: PSDL_RWops; freesrc: Integer; const &type: PUTF8Char): PSDL_Surface; cdecl;

/// <summary>Convenience functions</summary>
IMG_Load: function(const &file: PUTF8Char): PSDL_Surface; cdecl;

IMG_Load_RW: function(src: PSDL_RWops; freesrc: Integer): PSDL_Surface; cdecl;

/// <summary>Load an image directly into a render texture.</summary>
IMG_LoadTexture: function(renderer: PSDL_Renderer; const &file: PUTF8Char): PSDL_Texture; cdecl;

IMG_LoadTexture_RW: function(renderer: PSDL_Renderer; src: PSDL_RWops; freesrc: Integer): PSDL_Texture; cdecl;

IMG_LoadTextureTyped_RW: function(renderer: PSDL_Renderer; src: PSDL_RWops; freesrc: Integer; const &type: PUTF8Char): PSDL_Texture; cdecl;

/// <summary>Functions to detect a file type, given a seekable source</summary>
IMG_isICO: function(src: PSDL_RWops): Integer; cdecl;

IMG_isCUR: function(src: PSDL_RWops): Integer; cdecl;

IMG_isBMP: function(src: PSDL_RWops): Integer; cdecl;

IMG_isGIF: function(src: PSDL_RWops): Integer; cdecl;

IMG_isJPG: function(src: PSDL_RWops): Integer; cdecl;

IMG_isLBM: function(src: PSDL_RWops): Integer; cdecl;

IMG_isPCX: function(src: PSDL_RWops): Integer; cdecl;

IMG_isPNG: function(src: PSDL_RWops): Integer; cdecl;

IMG_isPNM: function(src: PSDL_RWops): Integer; cdecl;

IMG_isSVG: function(src: PSDL_RWops): Integer; cdecl;

IMG_isTIF: function(src: PSDL_RWops): Integer; cdecl;

IMG_isXCF: function(src: PSDL_RWops): Integer; cdecl;

IMG_isXPM: function(src: PSDL_RWops): Integer; cdecl;

IMG_isXV: function(src: PSDL_RWops): Integer; cdecl;

IMG_isWEBP: function(src: PSDL_RWops): Integer; cdecl;

/// <summary>Individual loading functions</summary>
IMG_LoadICO_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadCUR_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadBMP_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadGIF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadJPG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadLBM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadPCX_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadPNG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadPNM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadSVG_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadTGA_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadTIF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadXCF_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadXPM_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadXV_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_LoadWEBP_RW: function(src: PSDL_RWops): PSDL_Surface; cdecl;

IMG_ReadXPMFromArray: function(xpm: PPUTF8Char): PSDL_Surface; cdecl;

/// <summary>Individual saving functions</summary>
IMG_SavePNG: function(surface: PSDL_Surface; const &file: PUTF8Char): Integer; cdecl;

IMG_SavePNG_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer): Integer; cdecl;

IMG_SaveJPG: function(surface: PSDL_Surface; const &file: PUTF8Char; quality: Integer): Integer; cdecl;

IMG_SaveJPG_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer; quality: Integer): Integer; cdecl;

/// <summary>This function gets the version of the dynamically linked SDL_mixer library.
/// it should NOT be used to fill a version structure, instead you should
/// use the SDL_MIXER_VERSION() macro.</summary>
Mix_Linked_Version: function(): PSDL_version; cdecl;

/// <summary>Loads dynamic libraries and prepares them for use.  Flags should be
/// one or more flags from MIX_InitFlags OR'd together.
/// It returns the flags successfully initialized, or 0 on failure.</summary>
Mix_Init: function(flags: Integer): Integer; cdecl;

/// <summary>Unloads libraries loaded with Mix_Init</summary>
Mix_Quit: procedure(); cdecl;

/// <summary>Open the mixer with a certain audio format</summary>
Mix_OpenAudio: function(frequency: Integer; format: Uint16; channels: Integer; chunksize: Integer): Integer; cdecl;

/// <summary>Open the mixer with specific device and certain audio format</summary>
Mix_OpenAudioDevice: function(frequency: Integer; format: Uint16; channels: Integer; chunksize: Integer; const device: PUTF8Char; allowed_changes: Integer): Integer; cdecl;

/// <summary>Dynamically change the number of channels managed by the mixer.
/// If decreasing the number of channels, the upper channels are
/// stopped.
/// This function returns the new number of allocated channels.</summary>
Mix_AllocateChannels: function(numchans: Integer): Integer; cdecl;

/// <summary>Find out what the actual audio device parameters are.
/// This function returns 1 if the audio has been opened, 0 otherwise.</summary>
Mix_QuerySpec: function(frequency: PInteger; format: PUint16; channels: PInteger): Integer; cdecl;

/// <summary>Load a wave file or a music (.mod .s3m .it .xm) file</summary>
Mix_LoadWAV_RW: function(src: PSDL_RWops; freesrc: Integer): PMix_Chunk; cdecl;

Mix_LoadMUS: function(const &file: PUTF8Char): PMix_Music; cdecl;

/// <summary>Load a music file from an SDL_RWop object (Ogg and MikMod specific currently)
/// Matt Campbell (matt.dhs.org) April 2000</summary>
Mix_LoadMUS_RW: function(src: PSDL_RWops; freesrc: Integer): PMix_Music; cdecl;

/// <summary>Load a music file from an SDL_RWop object assuming a specific format</summary>
Mix_LoadMUSType_RW: function(src: PSDL_RWops; &type: Mix_MusicType; freesrc: Integer): PMix_Music; cdecl;

/// <summary>Load a wave file of the mixer format from a memory buffer</summary>
Mix_QuickLoad_WAV: function(mem: PUint8): PMix_Chunk; cdecl;

/// <summary>Load raw audio data of the mixer format from a memory buffer</summary>
Mix_QuickLoad_RAW: function(mem: PUint8; len: Uint32): PMix_Chunk; cdecl;

/// <summary>Free an audio chunk previously loaded</summary>
Mix_FreeChunk: procedure(chunk: PMix_Chunk); cdecl;

Mix_FreeMusic: procedure(music: PMix_Music); cdecl;

/// <summary>Get a list of chunk/music decoders that this build of SDL_mixer provides.
/// This list can change between builds AND runs of the program, if external
/// libraries that add functionality become available.
/// You must successfully call Mix_OpenAudio() before calling these functions.
/// This API is only available in SDL_mixer 1.2.9 and later.</summary>
/// <remarks>// usage...
/// int i;
/// const int total = Mix_GetNumChunkDecoders();
/// for (i = 0; i < total; i++)
/// printf("Supported chunk decoder: [%s]", Mix_GetChunkDecoder(i));
/// 
/// Appearing in this list doesn't promise your specific audio file will
/// decode...but it's handy to know if you have, say, a functioning Timidity
/// install.
/// 
/// These return values are static, read-only data; do not modify or free it.
/// The pointers remain valid until you call Mix_CloseAudio().</remarks>
Mix_GetNumChunkDecoders: function(): Integer; cdecl;

Mix_GetChunkDecoder: function(index: Integer): PUTF8Char; cdecl;

Mix_HasChunkDecoder: function(const name: PUTF8Char): SDL_bool; cdecl;

Mix_GetNumMusicDecoders: function(): Integer; cdecl;

Mix_GetMusicDecoder: function(index: Integer): PUTF8Char; cdecl;

Mix_HasMusicDecoder: function(const name: PUTF8Char): SDL_bool; cdecl;

/// <summary>Find out the music format of a mixer music, or the currently playing
/// music, if 'music' is NULL.</summary>
Mix_GetMusicType: function(const music: PMix_Music): Mix_MusicType; cdecl;

/// <summary>Set a function that is called after all mixing is performed.
/// This can be used to provide real-time visual display of the audio stream
/// or add a custom mixer filter for the stream data.</summary>
Mix_SetPostMix: procedure(mix_func: Mix_SetPostMix_mix_func; arg: Pointer); cdecl;

/// <summary>Add your own music player or additional mixer function.
/// If 'mix_func' is NULL, the default music player is re-enabled.</summary>
Mix_HookMusic: procedure(mix_func: Mix_HookMusic_mix_func; arg: Pointer); cdecl;

/// <summary>Add your own callback for when the music has finished playing or when it is
/// stopped from a call to Mix_HaltMusic.</summary>
Mix_HookMusicFinished: procedure(music_finished: Mix_HookMusicFinished_music_finished); cdecl;

/// <summary>Get a pointer to the user data for the current music hook</summary>
Mix_GetMusicHookData: function(): Pointer; cdecl;

/// <summary>Add your own callback when a channel has finished playing. NULL
/// to disable callback. The callback may be called from the mixer's audio
/// callback or it could be called as a result of Mix_HaltChannel(), etc.
/// do not call SDL_LockAudio() from this callback; you will either be
/// inside the audio callback, or SDL_mixer will explicitly lock the audio
/// before calling your callback.</summary>
Mix_ChannelFinished: procedure(channel_finished: Mix_ChannelFinished_channel_finished); cdecl;

/// <summary>Register a special effect function. At mixing time, the channel data is
/// copied into a buffer and passed through each registered effect function.
/// After it passes through all the functions, it is mixed into the final
/// output stream. The copy to buffer is performed once, then each effect
/// function performs on the output of the previous effect. Understand that
/// this extra copy to a buffer is not performed if there are no effects
/// registered for a given chunk, which saves CPU cycles, and any given
/// effect will be extra cycles, too, so it is crucial that your code run
/// fast. Also note that the data that your function is given is in the
/// format of the sound device, and not the format you gave to Mix_OpenAudio(),
/// although they may in reality be the same. This is an unfortunate but
/// necessary speed concern. Use Mix_QuerySpec() to determine if you can
/// handle the data before you register your effect, and take appropriate
/// actions.
/// You may also specify a callback (Mix_EffectDone_t) that is called when
/// the channel finishes playing. This gives you a more fine-grained control
/// than Mix_ChannelFinished(), in case you need to free effect-specific
/// resources, etc. If you don't need this, you can specify NULL.
/// You may set the callbacks before or after calling Mix_PlayChannel().
/// Things like Mix_SetPanning() are just internal special effect functions,
/// so if you are using that, you've already incurred the overhead of a copy
/// to a separate buffer, and that these effects will be in the queue with
/// any functions you've registered. The list of registered effects for a
/// channel is reset when a chunk finishes playing, so you need to explicitly
/// set them with each call to Mix_PlayChannel*().
/// You may also register a special effect function that is to be run after
/// final mixing occurs. The rules for these callbacks are identical to those
/// in Mix_RegisterEffect, but they are run after all the channels and the
/// music have been mixed into a single stream, whereas channel-specific
/// effects run on a given channel before any other mixing occurs. These
/// global effect callbacks are call "posteffects". Posteffects only have
/// their Mix_EffectDone_t function called when they are unregistered (since
/// the main output stream is never "done" in the same sense as a channel).
/// You must unregister them manually when you've had enough. Your callback
/// will be told that the channel being mixed is (MIX_CHANNEL_POST) if the
/// processing is considered a posteffect.</summary>
/// <remarks>After all these effects have finished processing, the callback registered
/// through Mix_SetPostMix() runs, and then the stream goes to the audio
/// device.
/// 
/// DO NOT EVER call SDL_LockAudio() from your callback function!
/// 
/// returns zero if error (no such channel), nonzero if added.
/// Error messages can be retrieved from Mix_GetError().</remarks>
Mix_RegisterEffect: function(chan: Integer; f: Mix_EffectFunc_t; d: Mix_EffectDone_t; arg: Pointer): Integer; cdecl;

/// <summary>You may not need to call this explicitly, unless you need to stop an
/// effect from processing in the middle of a chunk's playback.
/// Posteffects are never implicitly unregistered as they are for channels,
/// but they may be explicitly unregistered through this function by
/// specifying MIX_CHANNEL_POST for a channel.
/// returns zero if error (no such channel or effect), nonzero if removed.
/// Error messages can be retrieved from Mix_GetError().</summary>
Mix_UnregisterEffect: function(channel: Integer; f: Mix_EffectFunc_t): Integer; cdecl;

/// <summary>You may not need to call this explicitly, unless you need to stop all
/// effects from processing in the middle of a chunk's playback. Note that
/// this will also shut off some internal effect processing, since
/// Mix_SetPanning() and others may use this API under the hood. This is
/// called internally when a channel completes playback.
/// Posteffects are never implicitly unregistered as they are for channels,
/// but they may be explicitly unregistered through this function by
/// specifying MIX_CHANNEL_POST for a channel.
/// returns zero if error (no such channel), nonzero if all effects removed.
/// Error messages can be retrieved from Mix_GetError().</summary>
Mix_UnregisterAllEffects: function(channel: Integer): Integer; cdecl;

/// <summary>Set the panning of a channel. The left and right channels are specified
/// as integers between 0 and 255, quietest to loudest, respectively.</summary>
/// <remarks>Technically, this is just individual volume control for a sample with
/// two (stereo) channels, so it can be used for more than just panning.
/// If you want real panning, call it like this:
/// 
/// Mix_SetPanning(channel, left, 255 - left);
/// 
/// ...which isn't so hard.
/// 
/// Setting (channel) to MIX_CHANNEL_POST registers this as a posteffect, and
/// the panning will be done to the final mixed stream before passing it on
/// to the audio device.
/// 
/// This uses the Mix_RegisterEffect() API internally, and returns without
/// registering the effect function if the audio device is not configured
/// for stereo output. Setting both (left) and (right) to 255 causes this
/// effect to be unregistered, since that is the data's normal state.
/// 
/// returns zero if error (no such channel or Mix_RegisterEffect() fails),
/// nonzero if panning effect enabled. Note that an audio device in mono
/// mode is a no-op, but this call will return successful in that case.
/// Error messages can be retrieved from Mix_GetError().</remarks>
Mix_SetPanning: function(channel: Integer; left: Uint8; right: Uint8): Integer; cdecl;

/// <summary>Set the position of a channel. (angle) is an integer from 0 to 360, that
/// specifies the location of the sound in relation to the listener. (angle)
/// will be reduced as neccesary (540 becomes 180 degrees, -100 becomes 260).
/// Angle 0 is due north, and rotates clockwise as the value increases.
/// For efficiency, the precision of this effect may be limited (angles 1
/// through 7 might all produce the same effect, 8 through 15 are equal, etc).
/// (distance) is an integer between 0 and 255 that specifies the space
/// between the sound and the listener. The larger the number, the further
/// away the sound is. Using 255 does not guarantee that the channel will be
/// culled from the mixing process or be completely silent. For efficiency,
/// the precision of this effect may be limited (distance 0 through 5 might
/// all produce the same effect, 6 through 10 are equal, etc). Setting (angle)
/// and (distance) to 0 unregisters this effect, since the data would be
/// unchanged.</summary>
/// <remarks>If you need more precise positional audio, consider using OpenAL for
/// spatialized effects instead of SDL_mixer. This is only meant to be a
/// basic effect for simple "3D" games.
/// 
/// If the audio device is configured for mono output, then you won't get
/// any effectiveness from the angle; however, distance attenuation on the
/// channel will still occur. While this effect will function with stereo
/// voices, it makes more sense to use voices with only one channel of sound,
/// so when they are mixed through this effect, the positioning will sound
/// correct. You can convert them to mono through SDL before giving them to
/// the mixer in the first place if you like.
/// 
/// Setting (channel) to MIX_CHANNEL_POST registers this as a posteffect, and
/// the positioning will be done to the final mixed stream before passing it
/// on to the audio device.
/// 
/// This is a convenience wrapper over Mix_SetDistance() and Mix_SetPanning().
/// 
/// returns zero if error (no such channel or Mix_RegisterEffect() fails),
/// nonzero if position effect is enabled.
/// Error messages can be retrieved from Mix_GetError().</remarks>
Mix_SetPosition: function(channel: Integer; angle: Sint16; distance: Uint8): Integer; cdecl;

/// <summary>Set the "distance" of a channel. (distance) is an integer from 0 to 255
/// that specifies the location of the sound in relation to the listener.
/// Distance 0 is overlapping the listener, and 255 is as far away as possible
/// A distance of 255 does not guarantee silence; in such a case, you might
/// want to try changing the chunk's volume, or just cull the sample from the
/// mixing process with Mix_HaltChannel().
/// For efficiency, the precision of this effect may be limited (distances 1
/// through 7 might all produce the same effect, 8 through 15 are equal, etc).
/// (distance) is an integer between 0 and 255 that specifies the space
/// between the sound and the listener. The larger the number, the further
/// away the sound is.
/// Setting (distance) to 0 unregisters this effect, since the data would be
/// unchanged.
/// If you need more precise positional audio, consider using OpenAL for
/// spatialized effects instead of SDL_mixer. This is only meant to be a
/// basic effect for simple "3D" games.</summary>
/// <remarks>Setting (channel) to MIX_CHANNEL_POST registers this as a posteffect, and
/// the distance attenuation will be done to the final mixed stream before
/// passing it on to the audio device.
/// 
/// This uses the Mix_RegisterEffect() API internally.
/// 
/// returns zero if error (no such channel or Mix_RegisterEffect() fails),
/// nonzero if position effect is enabled.
/// Error messages can be retrieved from Mix_GetError().</remarks>
Mix_SetDistance: function(channel: Integer; distance: Uint8): Integer; cdecl;

/// <summary>Causes a channel to reverse its stereo. This is handy if the user has his
/// speakers hooked up backwards, or you would like to have a minor bit of
/// psychedelia in your sound code.  :)  Calling this function with (flip)
/// set to non-zero reverses the chunks's usual channels. If (flip) is zero,
/// the effect is unregistered.</summary>
/// <remarks>This uses the Mix_RegisterEffect() API internally, and thus is probably
/// more CPU intensive than having the user just plug in his speakers
/// correctly. Mix_SetReverseStereo() returns without registering the effect
/// function if the audio device is not configured for stereo output.
/// 
/// If you specify MIX_CHANNEL_POST for (channel), then this the effect is used
/// on the final mixed stream before sending it on to the audio device (a
/// posteffect).
/// 
/// returns zero if error (no such channel or Mix_RegisterEffect() fails),
/// nonzero if reversing effect is enabled. Note that an audio device in mono
/// mode is a no-op, but this call will return successful in that case.
/// Error messages can be retrieved from Mix_GetError().</remarks>
Mix_SetReverseStereo: function(channel: Integer; flip: Integer): Integer; cdecl;

/// <summary>Reserve the first channels (0 -> n-1) for the application, i.e. don't allocate
/// them dynamically to the next sample if requested with a -1 value below.
/// Returns the number of reserved channels.</summary>
Mix_ReserveChannels: function(num: Integer): Integer; cdecl;

/// <summary>Attach a tag to a channel. A tag can be assigned to several mixer
/// channels, to form groups of channels.
/// If 'tag' is -1, the tag is removed (actually -1 is the tag used to
/// represent the group of all the channels).
/// Returns true if everything was OK.</summary>
Mix_GroupChannel: function(which: Integer; tag: Integer): Integer; cdecl;

/// <summary>Assign several consecutive channels to a group</summary>
Mix_GroupChannels: function(from: Integer; &to: Integer; tag: Integer): Integer; cdecl;

/// <summary>Finds the first available channel in a group of channels,
/// returning -1 if none are available.</summary>
Mix_GroupAvailable: function(tag: Integer): Integer; cdecl;

/// <summary>Returns the number of channels in a group. This is also a subtle
/// way to get the total number of channels when 'tag' is -1</summary>
Mix_GroupCount: function(tag: Integer): Integer; cdecl;

/// <summary>Finds the "oldest" sample playing in a group of channels</summary>
Mix_GroupOldest: function(tag: Integer): Integer; cdecl;

/// <summary>Finds the "most recent" (i.e. last) sample playing in a group of channels</summary>
Mix_GroupNewer: function(tag: Integer): Integer; cdecl;

/// <summary>The same as above, but the sound is played at most 'ticks' milliseconds</summary>
Mix_PlayChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ticks: Integer): Integer; cdecl;

Mix_PlayMusic: function(music: PMix_Music; loops: Integer): Integer; cdecl;

/// <summary>Fade in music or a channel over "ms" milliseconds, same semantics as the "Play" functions</summary>
Mix_FadeInMusic: function(music: PMix_Music; loops: Integer; ms: Integer): Integer; cdecl;

Mix_FadeInMusicPos: function(music: PMix_Music; loops: Integer; ms: Integer; position: Double): Integer; cdecl;

Mix_FadeInChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ms: Integer; ticks: Integer): Integer; cdecl;

/// <summary>Set the volume in the range of 0-128 of a specific channel or chunk.
/// If the specified channel is -1, set volume for all channels.
/// Returns the original volume.
/// If the specified volume is -1, just return the current volume.</summary>
Mix_Volume: function(channel: Integer; volume: Integer): Integer; cdecl;

Mix_VolumeChunk: function(chunk: PMix_Chunk; volume: Integer): Integer; cdecl;

Mix_VolumeMusic: function(volume: Integer): Integer; cdecl;

/// <summary>Halt playing of a particular channel</summary>
Mix_HaltChannel: function(channel: Integer): Integer; cdecl;

Mix_HaltGroup: function(tag: Integer): Integer; cdecl;

Mix_HaltMusic: function(): Integer; cdecl;

/// <summary>Change the expiration delay for a particular channel.
/// The sample will stop playing after the 'ticks' milliseconds have elapsed,
/// or remove the expiration if 'ticks' is -1</summary>
Mix_ExpireChannel: function(channel: Integer; ticks: Integer): Integer; cdecl;

/// <summary>Halt a channel, fading it out progressively till it's silent
/// The ms parameter indicates the number of milliseconds the fading
/// will take.</summary>
Mix_FadeOutChannel: function(which: Integer; ms: Integer): Integer; cdecl;

Mix_FadeOutGroup: function(tag: Integer; ms: Integer): Integer; cdecl;

Mix_FadeOutMusic: function(ms: Integer): Integer; cdecl;

/// <summary>Query the fading status of a channel</summary>
Mix_FadingMusic: function(): Mix_Fading; cdecl;

Mix_FadingChannel: function(which: Integer): Mix_Fading; cdecl;

/// <summary>Pause/Resume a particular channel</summary>
Mix_Pause: procedure(channel: Integer); cdecl;

Mix_Resume: procedure(channel: Integer); cdecl;

Mix_Paused: function(channel: Integer): Integer; cdecl;

/// <summary>Pause/Resume the music stream</summary>
Mix_PauseMusic: procedure(); cdecl;

Mix_ResumeMusic: procedure(); cdecl;

Mix_RewindMusic: procedure(); cdecl;

Mix_PausedMusic: function(): Integer; cdecl;

/// <summary>Set the current position in the music stream.
/// This returns 0 if successful, or -1 if it failed or isn't implemented.
/// This function is only implemented for MOD music formats (set pattern
/// order number) and for OGG, FLAC, MP3_MAD, MP3_MPG and MODPLUG music
/// (set position in seconds), at the moment.</summary>
Mix_SetMusicPosition: function(position: Double): Integer; cdecl;

/// <summary>Check the status of a specific channel.
/// If the specified channel is -1, check all channels.</summary>
Mix_Playing: function(channel: Integer): Integer; cdecl;

Mix_PlayingMusic: function(): Integer; cdecl;

/// <summary>Stop music and set external music playback command</summary>
Mix_SetMusicCMD: function(const command: PUTF8Char): Integer; cdecl;

/// <summary>Synchro value is set by MikMod from modules while playing</summary>
Mix_SetSynchroValue: function(value: Integer): Integer; cdecl;

Mix_GetSynchroValue: function(): Integer; cdecl;

/// <summary>Set/Get/Iterate SoundFonts paths to use by supported MIDI backends</summary>
Mix_SetSoundFonts: function(const paths: PUTF8Char): Integer; cdecl;

Mix_GetSoundFonts: function(): PUTF8Char; cdecl;

Mix_EachSoundFont: function(&function: Mix_EachSoundFont_function; data: Pointer): Integer; cdecl;

/// <summary>Get the Mix_Chunk currently associated with a mixer channel
/// Returns NULL if it's an invalid channel, or there's no chunk associated.</summary>
Mix_GetChunk: function(channel: Integer): PMix_Chunk; cdecl;

/// <summary>Close the mixer, halting all playing audio</summary>
Mix_CloseAudio: procedure(); cdecl;

/// <summary>This function gets the version of the dynamically linked SDL_net library.
/// it should NOT be used to fill a version structure, instead you should
/// use the SDL_NET_VERSION() macro.</summary>
SDLNet_Linked_Version: function(): PSDLNet_version; cdecl;

/// <summary>Initialize/Cleanup the network API
/// SDL must be initialized before calls to functions in this library,
/// because this library uses utility functions from the SDL library.</summary>
SDLNet_Init: function(): Integer; cdecl;

SDLNet_Quit: procedure(); cdecl;

SDLNet_ResolveHost: function(address: PIPaddress; const host: PUTF8Char; port: Uint16): Integer; cdecl;

/// <summary>Resolve an ip address to a host name in canonical form.
/// If the ip couldn't be resolved, this function returns NULL,
/// otherwise a pointer to a static buffer containing the hostname
/// is returned.  Note that this function is not thread-safe.</summary>
SDLNet_ResolveIP: function(const ip: PIPaddress): PUTF8Char; cdecl;

/// <summary>Get the addresses of network interfaces on this system.
/// This returns the number of addresses saved in 'addresses'</summary>
SDLNet_GetLocalAddresses: function(addresses: PIPaddress; maxcount: Integer): Integer; cdecl;

/// <summary>Open a TCP network socket
/// If ip.host is INADDR_NONE or INADDR_ANY, this creates a local server
/// socket on the given port, otherwise a TCP connection to the remote
/// host and port is attempted. The address passed in should already be
/// swapped to network byte order (addresses returned from
/// SDLNet_ResolveHost() are already in the correct form).
/// The newly created socket is returned, or NULL if there was an error.</summary>
SDLNet_TCP_Open: function(ip: PIPaddress): TCPsocket; cdecl;

/// <summary>Accept an incoming connection on the given server socket.
/// The newly created socket is returned, or NULL if there was an error.</summary>
SDLNet_TCP_Accept: function(server: TCPsocket): TCPsocket; cdecl;

/// <summary>Get the IP address of the remote system associated with the socket.
/// If the socket is a server socket, this function returns NULL.</summary>
SDLNet_TCP_GetPeerAddress: function(sock: TCPsocket): PIPaddress; cdecl;

/// <summary>Send 'len' bytes of 'data' over the non-server socket 'sock'
/// This function returns the actual amount of data sent.  If the return value
/// is less than the amount of data sent, then either the remote connection was
/// closed, or an unknown socket error occurred.</summary>
SDLNet_TCP_Send: function(sock: TCPsocket; const data: Pointer; len: Integer): Integer; cdecl;

/// <summary>Receive up to 'maxlen' bytes of data over the non-server socket 'sock',
/// and store them in the buffer pointed to by 'data'.
/// This function returns the actual amount of data received.  If the return
/// value is less than or equal to zero, then either the remote connection was
/// closed, or an unknown socket error occurred.</summary>
SDLNet_TCP_Recv: function(sock: TCPsocket; data: Pointer; maxlen: Integer): Integer; cdecl;

/// <summary>Close a TCP network socket</summary>
SDLNet_TCP_Close: procedure(sock: TCPsocket); cdecl;

/// <summary>Allocate/resize/free a single UDP packet 'size' bytes long.
/// The new packet is returned, or NULL if the function ran out of memory.</summary>
SDLNet_AllocPacket: function(size: Integer): PUDPpacket; cdecl;

SDLNet_ResizePacket: function(packet: PUDPpacket; newsize: Integer): Integer; cdecl;

SDLNet_FreePacket: procedure(packet: PUDPpacket); cdecl;

/// <summary>Allocate/Free a UDP packet vector (array of packets) of 'howmany' packets,
/// each 'size' bytes long.
/// A pointer to the first packet in the array is returned, or NULL if the
/// function ran out of memory.</summary>
SDLNet_AllocPacketV: function(howmany: Integer; size: Integer): PPUDPpacket; cdecl;

SDLNet_FreePacketV: procedure(packetV: PPUDPpacket); cdecl;

/// <summary>Open a UDP network socket
/// If 'port' is non-zero, the UDP socket is bound to a local port.
/// The 'port' should be given in native byte order, but is used
/// internally in network (big endian) byte order, in addresses, etc.
/// This allows other systems to send to this socket via a known port.</summary>
SDLNet_UDP_Open: function(port: Uint16): UDPsocket; cdecl;

/// <summary>Set the percentage of simulated packet loss for packets sent on the socket.</summary>
SDLNet_UDP_SetPacketLoss: procedure(sock: UDPsocket; percent: Integer); cdecl;

/// <summary>Bind the address 'address' to the requested channel on the UDP socket.
/// If the channel is -1, then the first unbound channel that has not yet
/// been bound to the maximum number of addresses will be bound with
/// the given address as it's primary address.
/// If the channel is already bound, this new address will be added to the
/// list of valid source addresses for packets arriving on the channel.
/// If the channel is not already bound, then the address becomes the primary
/// address, to which all outbound packets on the channel are sent.
/// This function returns the channel which was bound, or -1 on error.</summary>
SDLNet_UDP_Bind: function(sock: UDPsocket; channel: Integer; const address: PIPaddress): Integer; cdecl;

/// <summary>Unbind all addresses from the given channel</summary>
SDLNet_UDP_Unbind: procedure(sock: UDPsocket; channel: Integer); cdecl;

/// <summary>Get the primary IP address of the remote system associated with the
/// socket and channel.  If the channel is -1, then the primary IP port
/// of the UDP socket is returned -- this is only meaningful for sockets
/// opened with a specific port.
/// If the channel is not bound and not -1, this function returns NULL.</summary>
SDLNet_UDP_GetPeerAddress: function(sock: UDPsocket; channel: Integer): PIPaddress; cdecl;

/// <summary>Send a vector of packets to the the channels specified within the packet.
/// If the channel specified in the packet is -1, the packet will be sent to
/// the address in the 'src' member of the packet.
/// Each packet will be updated with the status of the packet after it has
/// been sent, -1 if the packet send failed.
/// This function returns the number of packets sent.</summary>
SDLNet_UDP_SendV: function(sock: UDPsocket; packets: PPUDPpacket; npackets: Integer): Integer; cdecl;

/// <summary>Send a single packet to the specified channel.
/// If the channel specified in the packet is -1, the packet will be sent to
/// the address in the 'src' member of the packet.
/// The packet will be updated with the status of the packet after it has
/// been sent.
/// This function returns 1 if the packet was sent, or 0 on error.</summary>
/// <remarks>NOTE:
/// The maximum size of the packet is limited by the MTU (Maximum Transfer Unit)
/// of the transport medium.  It can be as low as 250 bytes for some PPP links,
/// and as high as 1500 bytes for ethernet.</remarks>
SDLNet_UDP_Send: function(sock: UDPsocket; channel: Integer; packet: PUDPpacket): Integer; cdecl;

/// <summary>Receive a vector of pending packets from the UDP socket.
/// The returned packets contain the source address and the channel they arrived
/// on.  If they did not arrive on a bound channel, the the channel will be set
/// to -1.
/// The channels are checked in highest to lowest order, so if an address is
/// bound to multiple channels, the highest channel with the source address
/// bound will be returned.
/// This function returns the number of packets read from the network, or -1
/// on error.  This function does not block, so can return 0 packets pending.</summary>
SDLNet_UDP_RecvV: function(sock: UDPsocket; packets: PPUDPpacket): Integer; cdecl;

/// <summary>Receive a single packet from the UDP socket.
/// The returned packet contains the source address and the channel it arrived
/// on.  If it did not arrive on a bound channel, the the channel will be set
/// to -1.
/// The channels are checked in highest to lowest order, so if an address is
/// bound to multiple channels, the highest channel with the source address
/// bound will be returned.
/// This function returns the number of packets read from the network, or -1
/// on error.  This function does not block, so can return 0 packets pending.</summary>
SDLNet_UDP_Recv: function(sock: UDPsocket; packet: PUDPpacket): Integer; cdecl;

/// <summary>Close a UDP network socket</summary>
SDLNet_UDP_Close: procedure(sock: UDPsocket); cdecl;

/// <summary>Allocate a socket set for use with SDLNet_CheckSockets()
/// This returns a socket set for up to 'maxsockets' sockets, or NULL if
/// the function ran out of memory.</summary>
SDLNet_AllocSocketSet: function(maxsockets: Integer): SDLNet_SocketSet; cdecl;

/// <summary>Add a socket to a set of sockets to be checked for available data</summary>
SDLNet_AddSocket: function(&set: SDLNet_SocketSet; sock: SDLNet_GenericSocket): Integer; cdecl;

/// <summary>Remove a socket from a set of sockets to be checked for available data</summary>
SDLNet_DelSocket: function(&set: SDLNet_SocketSet; sock: SDLNet_GenericSocket): Integer; cdecl;

/// <summary>This function checks to see if data is available for reading on the
/// given set of sockets.  If 'timeout' is 0, it performs a quick poll,
/// otherwise the function returns when either data is available for
/// reading, or the timeout in milliseconds has elapsed, which ever occurs
/// first.  This function returns the number of sockets ready for reading,
/// or -1 if there was an error with the select() system call.</summary>
SDLNet_CheckSockets: function(&set: SDLNet_SocketSet; timeout: Uint32): Integer; cdecl;

/// <summary>Free a set of sockets allocated by SDL_NetAllocSocketSet()</summary>
SDLNet_FreeSocketSet: procedure(&set: SDLNet_SocketSet); cdecl;

/// <summary>********************************************************************</summary>
/// <remarks>Error reporting functions                                           
/// 
/// ********************************************************************</remarks>
SDLNet_SetError: procedure(const fmt: PUTF8Char) varargs; cdecl;

SDLNet_GetError: function(): PUTF8Char; cdecl;

/// <summary>This function gets the version of the dynamically linked SDL_ttf library.
/// it should NOT be used to fill a version structure, instead you should
/// use the SDL_TTF_VERSION() macro.</summary>
TTF_Linked_Version: function(): PSDL_version; cdecl;

/// <summary>This function tells the library whether UNICODE text is generally
/// byteswapped.  A UNICODE BOM character in a string will override
/// this setting for the remainder of that string.</summary>
TTF_ByteSwappedUNICODE: procedure(swapped: Integer); cdecl;

/// <summary>Initialize the TTF engine - returns 0 if successful, -1 on error</summary>
TTF_Init: function(): Integer; cdecl;

/// <summary>Open a font file and create a font of the specified point size.
/// Some .fon fonts will have several sizes embedded in the file, so the
/// point size becomes the index of choosing which size.  If the value
/// is too high, the last indexed size will be the default.</summary>
TTF_OpenFont: function(const &file: PUTF8Char; ptsize: Integer): PTTF_Font; cdecl;

TTF_OpenFontIndex: function(const &file: PUTF8Char; ptsize: Integer; index: Integer): PTTF_Font; cdecl;

TTF_OpenFontRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer): PTTF_Font; cdecl;

TTF_OpenFontIndexRW: function(src: PSDL_RWops; freesrc: Integer; ptsize: Integer; index: Integer): PTTF_Font; cdecl;

TTF_GetFontStyle: function(const font: PTTF_Font): Integer; cdecl;

TTF_SetFontStyle: procedure(font: PTTF_Font; style: Integer); cdecl;

TTF_GetFontOutline: function(const font: PTTF_Font): Integer; cdecl;

TTF_SetFontOutline: procedure(font: PTTF_Font; outline: Integer); cdecl;

TTF_GetFontHinting: function(const font: PTTF_Font): Integer; cdecl;

TTF_SetFontHinting: procedure(font: PTTF_Font; hinting: Integer); cdecl;

/// <summary>Get the total height of the font - usually equal to point size</summary>
TTF_FontHeight: function(const font: PTTF_Font): Integer; cdecl;

/// <summary>Get the offset from the baseline to the top of the font
/// This is a positive value, relative to the baseline.</summary>
TTF_FontAscent: function(const font: PTTF_Font): Integer; cdecl;

/// <summary>Get the offset from the baseline to the bottom of the font
/// This is a negative value, relative to the baseline.</summary>
TTF_FontDescent: function(const font: PTTF_Font): Integer; cdecl;

/// <summary>Get the recommended spacing between lines of text for this font</summary>
TTF_FontLineSkip: function(const font: PTTF_Font): Integer; cdecl;

/// <summary>Get/Set whether or not kerning is allowed for this font</summary>
TTF_GetFontKerning: function(const font: PTTF_Font): Integer; cdecl;

TTF_SetFontKerning: procedure(font: PTTF_Font; allowed: Integer); cdecl;

/// <summary>Get the number of faces of the font</summary>
TTF_FontFaces: function(const font: PTTF_Font): Integer; cdecl;

/// <summary>Get the font face attributes, if any</summary>
TTF_FontFaceIsFixedWidth: function(const font: PTTF_Font): Integer; cdecl;

TTF_FontFaceFamilyName: function(const font: PTTF_Font): PUTF8Char; cdecl;

TTF_FontFaceStyleName: function(const font: PTTF_Font): PUTF8Char; cdecl;

/// <summary>Check wether a glyph is provided by the font or not</summary>
TTF_GlyphIsProvided: function(const font: PTTF_Font; ch: Uint16): Integer; cdecl;

/// <summary>Get the metrics (dimensions) of a glyph
/// To understand what these metrics mean, here is a useful link:
/// http://freetype.sourceforge.net/freetype2/docs/tutorial/step2.html</summary>
TTF_GlyphMetrics: function(font: PTTF_Font; ch: Uint16; minx: PInteger; maxx: PInteger; miny: PInteger; maxy: PInteger; advance: PInteger): Integer; cdecl;

/// <summary>Get the dimensions of a rendered string of text</summary>
TTF_SizeText: function(font: PTTF_Font; const text: PUTF8Char; w: PInteger; h: PInteger): Integer; cdecl;

TTF_SizeUTF8: function(font: PTTF_Font; const text: PUTF8Char; w: PInteger; h: PInteger): Integer; cdecl;

TTF_SizeUNICODE: function(font: PTTF_Font; const text: PUint16; w: PInteger; h: PInteger): Integer; cdecl;

/// <summary>Create an 8-bit palettized surface and render the given text at
/// fast quality with the given font and color.  The 0 pixel is the
/// colorkey, giving a transparent background, and the 1 pixel is set
/// to the text color.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderText_Solid: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUTF8_Solid: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUNICODE_Solid: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Create an 8-bit palettized surface and render the given glyph at
/// fast quality with the given font and color.  The 0 pixel is the
/// colorkey, giving a transparent background, and the 1 pixel is set
/// to the text color.  The glyph is rendered without any padding or
/// centering in the X direction, and aligned normally in the Y direction.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderGlyph_Solid: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Create an 8-bit palettized surface and render the given text at
/// high quality with the given font and colors.  The 0 pixel is background,
/// while other pixels have varying degrees of the foreground color.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderText_Shaded: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUTF8_Shaded: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUNICODE_Shaded: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Create an 8-bit palettized surface and render the given glyph at
/// high quality with the given font and colors.  The 0 pixel is background,
/// while other pixels have varying degrees of the foreground color.
/// The glyph is rendered without any padding or centering in the X
/// direction, and aligned normally in the Y direction.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderGlyph_Shaded: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Create a 32-bit ARGB surface and render the given text at high quality,
/// using alpha blending to dither the font with the given color.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderText_Blended: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUTF8_Blended: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color): PSDL_Surface; cdecl;

TTF_RenderUNICODE_Blended: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Create a 32-bit ARGB surface and render the given text at high quality,
/// using alpha blending to dither the font with the given color.
/// Text is wrapped to multiple lines on line endings and on word boundaries
/// if it extends beyond wrapLength in pixels.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderText_Blended_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;

TTF_RenderUTF8_Blended_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;

TTF_RenderUNICODE_Blended_Wrapped: function(font: PTTF_Font; const text: PUint16; fg: SDL_Color; wrapLength: Uint32): PSDL_Surface; cdecl;

/// <summary>Create a 32-bit ARGB surface and render the given glyph at high quality,
/// using alpha blending to dither the font with the given color.
/// The glyph is rendered without any padding or centering in the X
/// direction, and aligned normally in the Y direction.
/// This function returns the new surface, or NULL if there was an error.</summary>
TTF_RenderGlyph_Blended: function(font: PTTF_Font; ch: Uint16; fg: SDL_Color): PSDL_Surface; cdecl;

/// <summary>Close an opened font file</summary>
TTF_CloseFont: procedure(font: PTTF_Font); cdecl;

/// <summary>De-initialize the TTF engine</summary>
TTF_Quit: procedure(); cdecl;

/// <summary>Check if the TTF engine is initialized</summary>
TTF_WasInit: function(): Integer; cdecl;

/// <summary>Get the kerning size of two glyphs indices</summary>
/// <remarks>DEPRECATED: this function requires FreeType font indexes, not glyphs,
/// by accident, which we don't expose through this API, so it could give
/// wildly incorrect results, especially with non-ASCII values.
/// Going forward, please use TTF_GetFontKerningSizeGlyphs() instead, which
/// does what you probably expected this function to do.</remarks>
TTF_GetFontKerningSize: function(font: PTTF_Font; prev_index: Integer; index: Integer): Integer; cdecl;

/// <summary>Get the kerning size of two glyphs</summary>
TTF_GetFontKerningSizeGlyphs: function(font: PTTF_Font; previous_ch: Uint16; ch: Uint16): Integer; cdecl;

/// <summary>// Create a plmpeg instance with a filename. Returns NULL if the file could not
/// // be opened.</summary>
plm_create_with_filename: function(const filename: PUTF8Char): Pplm_t; cdecl;

/// <summary>// Create a plmpeg instance with a file handle. Pass TRUE to close_when_done to
/// // let plmpeg call fclose() on the handle when plm_destroy() is called.</summary>
plm_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_t; cdecl;

/// <summary>// Create a plmpeg instance with a pointer to memory as source. This assumes the
/// // whole file is in memory. The memory is not copied. Pass TRUE to 
/// // free_when_done to let plmpeg call free() on the pointer when plm_destroy() 
/// // is called.</summary>
plm_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_t; cdecl;

/// <summary>// Create a plmpeg instance with a plm_buffer as source. Pass TRUE to
/// // destroy_when_done to let plmpeg call plm_buffer_destroy() on the buffer when
/// // plm_destroy() is called.</summary>
plm_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_t; cdecl;

/// <summary>// Destroy a plmpeg instance and free all data.</summary>
plm_destroy: procedure(self: Pplm_t); cdecl;

/// <summary>// Get whether we have headers on all available streams and we can accurately
/// // report the number of video/audio streams, video dimensions, framerate and
/// // audio samplerate.
/// // This returns FALSE if the file is not an MPEG-PS file or - when not using a
/// // file as source - when not enough data is available yet.</summary>
plm_has_headers: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Get or set whether video decoding is enabled. Default TRUE.</summary>
plm_get_video_enabled: function(self: Pplm_t): Integer; cdecl;

plm_set_video_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;

/// <summary>// Get the number of video streams (0--1) reported in the system header.</summary>
plm_get_num_video_streams: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Get the display width/height of the video stream.</summary>
plm_get_width: function(self: Pplm_t): Integer; cdecl;

plm_get_height: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Get the framerate of the video stream in frames per second.</summary>
plm_get_framerate: function(self: Pplm_t): Double; cdecl;

/// <summary>// Get or set whether audio decoding is enabled. Default TRUE.</summary>
plm_get_audio_enabled: function(self: Pplm_t): Integer; cdecl;

plm_set_audio_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;

/// <summary>// Get the number of audio streams (0--4) reported in the system header.</summary>
plm_get_num_audio_streams: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Set the desired audio stream (0--3). Default 0.</summary>
plm_set_audio_stream: procedure(self: Pplm_t; stream_index: Integer); cdecl;

/// <summary>// Get the samplerate of the audio stream in samples per second.</summary>
plm_get_samplerate: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Get or set the audio lead time in seconds - the time in which audio samples
/// // are decoded in advance (or behind) the video decode time. Typically this
/// // should be set to the duration of the buffer of the audio API that you use
/// // for output. E.g. for SDL2: (SDL_AudioSpec.samples / samplerate)</summary>
plm_get_audio_lead_time: function(self: Pplm_t): Double; cdecl;

plm_set_audio_lead_time: procedure(self: Pplm_t; lead_time: Double); cdecl;

/// <summary>// Get the current internal time in seconds.</summary>
plm_get_time: function(self: Pplm_t): Double; cdecl;

/// <summary>// Get the video duration of the underlying source in seconds.</summary>
plm_get_duration: function(self: Pplm_t): Double; cdecl;

/// <summary>// Rewind all buffers back to the beginning.</summary>
plm_rewind: procedure(self: Pplm_t); cdecl;

/// <summary>// Get or set looping. Default FALSE.</summary>
plm_get_loop: function(self: Pplm_t): Integer; cdecl;

plm_set_loop: procedure(self: Pplm_t; loop: Integer); cdecl;

/// <summary>// Get whether the file has ended. If looping is enabled, this will always
/// // return FALSE.</summary>
plm_has_ended: function(self: Pplm_t): Integer; cdecl;

/// <summary>// Set the callback for decoded video frames used with plm_decode(). If no 
/// // callback is set, video data will be ignored and not be decoded. The *user
/// // Parameter will be passed to your callback.</summary>
plm_set_video_decode_callback: procedure(self: Pplm_t; fp: plm_video_decode_callback; user: Pointer); cdecl;

/// <summary>// Set the callback for decoded audio samples used with plm_decode(). If no 
/// // callback is set, audio data will be ignored and not be decoded. The *user
/// // Parameter will be passed to your callback.</summary>
plm_set_audio_decode_callback: procedure(self: Pplm_t; fp: plm_audio_decode_callback; user: Pointer); cdecl;

/// <summary>// Advance the internal timer by seconds and decode video/audio up to this time.
/// // This will call the video_decode_callback and audio_decode_callback any number
/// // of times. A frame-skip is not implemented, i.e. everything up to current time
/// // will be decoded.</summary>
plm_decode: procedure(self: Pplm_t; seconds: Double); cdecl;

/// <summary>// Decode and return one video frame. Returns NULL if no frame could be decoded
/// // (either because the source ended or data is corrupt). If you only want to 
/// // decode video, you should disable audio via plm_set_audio_enabled().
/// // The returned plm_frame_t is valid until the next call to plm_decode_video() 
/// // or until plm_destroy() is called.</summary>
plm_decode_video: function(self: Pplm_t): Pplm_frame_t; cdecl;

/// <summary>// Decode and return one audio frame. Returns NULL if no frame could be decoded
/// // (either because the source ended or data is corrupt). If you only want to 
/// // decode audio, you should disable video via plm_set_video_enabled().
/// // The returned plm_samples_t is valid until the next call to plm_decode_audio()
/// // or until plm_destroy() is called.</summary>
plm_decode_audio: function(self: Pplm_t): Pplm_samples_t; cdecl;

/// <summary>// Seek to the specified time, clamped between 0 -- duration. This can only be 
/// // used when the underlying plm_buffer is seekable, i.e. for files, fixed 
/// // memory buffers or _for_appending buffers. 
/// // If seek_exact is TRUE this will seek to the exact time, otherwise it will 
/// // seek to the last intra frame just before the desired time. Exact seeking can 
/// // be slow, because all frames up to the seeked one have to be decoded on top of
/// // the previous intra frame.
/// // If seeking succeeds, this function will call the video_decode_callback 
/// // exactly once with the target frame. If audio is enabled, it will also call
/// // the audio_decode_callback any number of times, until the audio_lead_time is
/// // satisfied.
/// // Returns TRUE if seeking succeeded or FALSE if no frame could be found.</summary>
plm_seek: function(self: Pplm_t; time: Double; seek_exact: Integer): Integer; cdecl;

/// <summary>// Similar to plm_seek(), but will not call the video_decode_callback,
/// // audio_decode_callback or make any attempts to sync audio.
/// // Returns the found frame or NULL if no frame could be found.</summary>
plm_seek_frame: function(self: Pplm_t; time: Double; seek_exact: Integer): Pplm_frame_t; cdecl;

/// <summary>// Create a buffer instance with a filename. Returns NULL if the file could not
/// // be opened.</summary>
plm_buffer_create_with_filename: function(const filename: PUTF8Char): Pplm_buffer_t; cdecl;

/// <summary>// Create a buffer instance with a file handle. Pass TRUE to close_when_done
/// // to let plmpeg call fclose() on the handle when plm_destroy() is called.</summary>
plm_buffer_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_buffer_t; cdecl;

/// <summary>// Create a buffer instance with a pointer to memory as source. This assumes
/// // the whole file is in memory. The bytes are not copied. Pass 1 to 
/// // free_when_done to let plmpeg call free() on the pointer when plm_destroy() 
/// // is called.</summary>
plm_buffer_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_buffer_t; cdecl;

/// <summary>// Create an empty buffer with an initial capacity. The buffer will grow
/// // as needed. Data that has already been read, will be discarded.</summary>
plm_buffer_create_with_capacity: function(capacity: NativeUInt): Pplm_buffer_t; cdecl;

/// <summary>// Create an empty buffer with an initial capacity. The buffer will grow
/// // as needed. Decoded data will *not* be discarded. This can be used when
/// // loading a file over the network, without needing to throttle the download. 
/// // It also allows for seeking in the already loaded data.</summary>
plm_buffer_create_for_appending: function(initial_capacity: NativeUInt): Pplm_buffer_t; cdecl;

/// <summary>// Destroy a buffer instance and free all data</summary>
plm_buffer_destroy: procedure(self: Pplm_buffer_t); cdecl;

/// <summary>// Copy data into the buffer. If the data to be written is larger than the 
/// // available space, the buffer will realloc() with a larger capacity. 
/// // Returns the number of bytes written. This will always be the same as the
/// // passed in length, except when the buffer was created _with_memory() for
/// // which _write() is forbidden.</summary>
plm_buffer_write: function(self: Pplm_buffer_t; bytes: PUInt8; length: NativeUInt): NativeUInt; cdecl;

/// <summary>// Mark the current byte length as the end of this buffer and signal that no 
/// // more data is expected to be written to it. This function should be called
/// // just after the last plm_buffer_write().
/// // For _with_capacity buffers, this is cleared on a plm_buffer_rewind().</summary>
plm_buffer_signal_end: procedure(self: Pplm_buffer_t); cdecl;

/// <summary>// Set a callback that is called whenever the buffer needs more data</summary>
plm_buffer_set_load_callback: procedure(self: Pplm_buffer_t; fp: plm_buffer_load_callback; user: Pointer); cdecl;

/// <summary>// Rewind the buffer back to the beginning. When loading from a file handle,
/// // this also seeks to the beginning of the file.</summary>
plm_buffer_rewind: procedure(self: Pplm_buffer_t); cdecl;

/// <summary>// Get the total size. For files, this returns the file size. For all other 
/// // types it returns the number of bytes currently in the buffer.</summary>
plm_buffer_get_size: function(self: Pplm_buffer_t): NativeUInt; cdecl;

/// <summary>// Get the number of remaining (yet unread) bytes in the buffer. This can be
/// // useful to throttle writing.</summary>
plm_buffer_get_remaining: function(self: Pplm_buffer_t): NativeUInt; cdecl;

/// <summary>// Get whether the read position of the buffer is at the end and no more data 
/// // is expected.</summary>
plm_buffer_has_ended: function(self: Pplm_buffer_t): Integer; cdecl;

/// <summary>// Create a demuxer with a plm_buffer as source. This will also attempt to read
/// // the pack and system headers from the buffer.</summary>
plm_demux_create: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_demux_t; cdecl;

/// <summary>// Destroy a demuxer and free all data.</summary>
plm_demux_destroy: procedure(self: Pplm_demux_t); cdecl;

/// <summary>// Returns TRUE/FALSE whether pack and system headers have been found. This will
/// // attempt to read the headers if non are present yet.</summary>
plm_demux_has_headers: function(self: Pplm_demux_t): Integer; cdecl;

/// <summary>// Returns the number of video streams found in the system header. This will
/// // attempt to read the system header if non is present yet.</summary>
plm_demux_get_num_video_streams: function(self: Pplm_demux_t): Integer; cdecl;

/// <summary>// Returns the number of audio streams found in the system header. This will
/// // attempt to read the system header if non is present yet.</summary>
plm_demux_get_num_audio_streams: function(self: Pplm_demux_t): Integer; cdecl;

/// <summary>// Rewind the internal buffer. See plm_buffer_rewind().</summary>
plm_demux_rewind: procedure(self: Pplm_demux_t); cdecl;

/// <summary>// Get whether the file has ended. This will be cleared on seeking or rewind.</summary>
plm_demux_has_ended: function(self: Pplm_demux_t): Integer; cdecl;

/// <summary>// Seek to a packet of the specified type with a PTS just before specified time.
/// // If force_intra is TRUE, only packets containing an intra frame will be 
/// // considered - this only makes sense when the type is PLM_DEMUX_PACKET_VIDEO_1.
/// // Note that the specified time is considered 0-based, regardless of the first 
/// // PTS in the data source.</summary>
plm_demux_seek: function(self: Pplm_demux_t; time: Double; &type: Integer; force_intra: Integer): Pplm_packet_t; cdecl;

/// <summary>// Get the PTS of the first packet of this type. Returns PLM_PACKET_INVALID_TS
/// // if not packet of this packet type can be found.</summary>
plm_demux_get_start_time: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;

/// <summary>// Get the duration for the specified packet type - i.e. the span between the
/// // the first PTS and the last PTS in the data source. This only makes sense when
/// // the underlying data source is a file or fixed memory.</summary>
plm_demux_get_duration: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;

/// <summary>// Decode and return the next packet. The returned packet_t is valid until
/// // the next call to plm_demux_decode() or until the demuxer is destroyed.</summary>
plm_demux_decode: function(self: Pplm_demux_t): Pplm_packet_t; cdecl;

/// <summary>// Create a video decoder with a plm_buffer as source.</summary>
plm_video_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_video_t; cdecl;

/// <summary>// Destroy a video decoder and free all data.</summary>
plm_video_destroy: procedure(self: Pplm_video_t); cdecl;

/// <summary>// Get whether a sequence header was found and we can accurately report on
/// // dimensions and framerate.</summary>
plm_video_has_header: function(self: Pplm_video_t): Integer; cdecl;

/// <summary>// Get the framerate in frames per second.</summary>
plm_video_get_framerate: function(self: Pplm_video_t): Double; cdecl;

/// <summary>// Get the display width/height.</summary>
plm_video_get_width: function(self: Pplm_video_t): Integer; cdecl;

plm_video_get_height: function(self: Pplm_video_t): Integer; cdecl;

/// <summary>// Set "no delay" mode. When enabled, the decoder assumes that the video does
/// // *not* contain any B-Frames. This is useful for reducing lag when streaming.
/// // The default is FALSE.</summary>
plm_video_set_no_delay: procedure(self: Pplm_video_t; no_delay: Integer); cdecl;

/// <summary>// Get the current internal time in seconds.</summary>
plm_video_get_time: function(self: Pplm_video_t): Double; cdecl;

/// <summary>// Set the current internal time in seconds. This is only useful when you
/// // manipulate the underlying video buffer and want to enforce a correct
/// // timestamps.</summary>
plm_video_set_time: procedure(self: Pplm_video_t; time: Double); cdecl;

/// <summary>// Rewind the internal buffer. See plm_buffer_rewind().</summary>
plm_video_rewind: procedure(self: Pplm_video_t); cdecl;

/// <summary>// Get whether the file has ended. This will be cleared on rewind.</summary>
plm_video_has_ended: function(self: Pplm_video_t): Integer; cdecl;

/// <summary>// Decode and return one frame of video and advance the internal time by 
/// // 1/framerate seconds. The returned frame_t is valid until the next call of
/// // plm_video_decode() or until the video decoder is destroyed.</summary>
plm_video_decode: function(self: Pplm_video_t): Pplm_frame_t; cdecl;

plm_frame_to_rgb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

plm_frame_to_bgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

plm_frame_to_rgba: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

plm_frame_to_bgra: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

plm_frame_to_argb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

plm_frame_to_abgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;

/// <summary>// Create an audio decoder with a plm_buffer as source.</summary>
plm_audio_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_audio_t; cdecl;

/// <summary>// Destroy an audio decoder and free all data.</summary>
plm_audio_destroy: procedure(self: Pplm_audio_t); cdecl;

/// <summary>// Get whether a frame header was found and we can accurately report on
/// // samplerate.</summary>
plm_audio_has_header: function(self: Pplm_audio_t): Integer; cdecl;

/// <summary>// Get the samplerate in samples per second.</summary>
plm_audio_get_samplerate: function(self: Pplm_audio_t): Integer; cdecl;

/// <summary>// Get the current internal time in seconds.</summary>
plm_audio_get_time: function(self: Pplm_audio_t): Double; cdecl;

/// <summary>// Set the current internal time in seconds. This is only useful when you
/// // manipulate the underlying video buffer and want to enforce a correct
/// // timestamps.</summary>
plm_audio_set_time: procedure(self: Pplm_audio_t; time: Double); cdecl;

/// <summary>// Rewind the internal buffer. See plm_buffer_rewind().</summary>
plm_audio_rewind: procedure(self: Pplm_audio_t); cdecl;

/// <summary>// Get whether the file has ended. This will be cleared on rewind.</summary>
plm_audio_has_ended: function(self: Pplm_audio_t): Integer; cdecl;

/// <summary>// Decode and return one "frame" of audio and advance the internal time by 
/// // (PLM_AUDIO_SAMPLES_PER_FRAME/samplerate) seconds. The returned samples_t 
/// // is valid until the next call of plm_audio_decode() or until the audio
/// // decoder is destroyed.</summary>
plm_audio_decode: function(self: Pplm_audio_t): Pplm_samples_t; cdecl;

/// <summary>#### nk_init_fixed
/// /// Initializes a `nk_context` struct from single fixed size memory block
/// /// Should be used if you want complete control over nuklear's memory management.
/// /// Especially recommended for system with little memory or systems with virtual memory.
/// /// For the later case you can just allocate for example 16MB of virtual memory
/// /// and only the required amount of memory will actually be committed.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_init_fixed(struct nk_context *ctx, void *memory, nk_size size, const struct nk_user_font *font);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// !!! Warning
/// ///     make sure the passed memory block is aligned correctly for `nk_draw_commands`.
/// ///
/// /// Parameter   | Description
/// /// ------------|--------------------------------------------------------------
/// /// __ctx__     | Must point to an either stack or heap allocated `nk_context` struct
/// /// __memory__  | Must point to a previously allocated memory block
/// /// __size__    | Must contain the total size of __memory__
/// /// __font__    | Must point to a previously initialized font handle for more info look at font documentation
/// ///
/// /// Returns either `false(0)` on failure or `true(1)` on success.</summary>
nk_init_fixed: function(p1: Pnk_context; memory: Pointer; size: nk_size; const p4: Pnk_user_font): nk_bool; cdecl;

/// <summary>#### nk_init
/// /// Initializes a `nk_context` struct with memory allocation callbacks for nuklear to allocate
/// /// memory from. Used internally for `nk_init_default` and provides a kitchen sink allocation
/// /// interface to nuklear. Can be useful for cases like monitoring memory consumption.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_init(struct nk_context *ctx, struct nk_allocator *alloc, const struct nk_user_font *font);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|---------------------------------------------------------------
/// /// __ctx__     | Must point to an either stack or heap allocated `nk_context` struct
/// /// __alloc__   | Must point to a previously allocated memory allocator
/// /// __font__    | Must point to a previously initialized font handle for more info look at font documentation
/// ///
/// /// Returns either `false(0)` on failure or `true(1)` on success.</summary>
nk_init: function(p1: Pnk_context; p2: Pnk_allocator; const p3: Pnk_user_font): nk_bool; cdecl;

/// <summary>#### nk_init_custom
/// /// Initializes a `nk_context` struct from two different either fixed or growing
/// /// buffers. The first buffer is for allocating draw commands while the second buffer is
/// /// used for allocating windows, panels and state tables.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds, struct nk_buffer *pool, const struct nk_user_font *font);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|---------------------------------------------------------------
/// /// __ctx__     | Must point to an either stack or heap allocated `nk_context` struct
/// /// __cmds__    | Must point to a previously initialized memory buffer either fixed or dynamic to store draw commands into
/// /// __pool__    | Must point to a previously initialized memory buffer either fixed or dynamic to store windows, panels and tables
/// /// __font__    | Must point to a previously initialized font handle for more info look at font documentation
/// ///
/// /// Returns either `false(0)` on failure or `true(1)` on success.</summary>
nk_init_custom: function(p1: Pnk_context; cmds: Pnk_buffer; pool: Pnk_buffer; const p4: Pnk_user_font): nk_bool; cdecl;

/// <summary>#### nk_clear
/// /// Resets the context state at the end of the frame. This includes mostly
/// /// garbage collector tasks like removing windows or table not called and therefore
/// /// used anymore.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_clear(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct</summary>
nk_clear: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_free
/// /// Frees all memory allocated by nuklear. Not needed if context was
/// /// initialized with `nk_init_fixed`.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_free(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct</summary>
nk_free: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_input_begin
/// /// Begins the input mirroring process by resetting text, scroll
/// /// mouse, previous mouse position and movement as well as key state transitions,
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_begin(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct</summary>
nk_input_begin: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_input_motion
/// /// Mirrors current mouse position to nuklear
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_motion(struct nk_context *ctx, int x, int y);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __x__       | Must hold an integer describing the current mouse cursor x-position
/// /// __y__       | Must hold an integer describing the current mouse cursor y-position</summary>
nk_input_motion: procedure(p1: Pnk_context; x: Integer; y: Integer); cdecl;

/// <summary>#### nk_input_key
/// /// Mirrors the state of a specific key to nuklear
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_key(struct nk_context*, enum nk_keys key, nk_bool down);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __key__     | Must be any value specified in enum `nk_keys` that needs to be mirrored
/// /// __down__    | Must be 0 for key is up and 1 for key is down</summary>
nk_input_key: procedure(p1: Pnk_context; p2: nk_keys; down: nk_bool); cdecl;

/// <summary>#### nk_input_button
/// /// Mirrors the state of a specific mouse button to nuklear
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_button(struct nk_context *ctx, enum nk_buttons btn, int x, int y, nk_bool down);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __btn__     | Must be any value specified in enum `nk_buttons` that needs to be mirrored
/// /// __x__       | Must contain an integer describing mouse cursor x-position on click up/down
/// /// __y__       | Must contain an integer describing mouse cursor y-position on click up/down
/// /// __down__    | Must be 0 for key is up and 1 for key is down</summary>
nk_input_button: procedure(p1: Pnk_context; p2: nk_buttons; x: Integer; y: Integer; down: nk_bool); cdecl;

/// <summary>#### nk_input_scroll
/// /// Copies the last mouse scroll value to nuklear. Is generally
/// /// a scroll value. So does not have to come from mouse and could also originate
/// /// TODO finish this sentence
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_scroll(struct nk_context *ctx, struct nk_vec2 val);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __val__     | vector with both X- as well as Y-scroll value</summary>
nk_input_scroll: procedure(p1: Pnk_context; val: nk_vec2); cdecl;

/// <summary>#### nk_input_char
/// /// Copies a single ASCII character into an internal text buffer
/// /// This is basically a helper function to quickly push ASCII characters into
/// /// nuklear.
/// ///
/// /// !!! Note
/// ///     Stores up to NK_INPUT_MAX bytes between `nk_input_begin` and `nk_input_end`.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_char(struct nk_context *ctx, char c);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __c__       | Must be a single ASCII character preferable one that can be printed</summary>
nk_input_char: procedure(p1: Pnk_context; p2: UTF8Char); cdecl;

/// <summary>#### nk_input_glyph
/// /// Converts an encoded unicode rune into UTF-8 and copies the result into an
/// /// internal text buffer.
/// ///
/// /// !!! Note
/// ///     Stores up to NK_INPUT_MAX bytes between `nk_input_begin` and `nk_input_end`.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_glyph(struct nk_context *ctx, const nk_glyph g);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __g__       | UTF-32 unicode codepoint</summary>
nk_input_glyph: procedure(p1: Pnk_context; const p2: nk_glyph); cdecl;

/// <summary>#### nk_input_unicode
/// /// Converts a unicode rune into UTF-8 and copies the result
/// /// into an internal text buffer.
/// /// !!! Note
/// ///     Stores up to NK_INPUT_MAX bytes between `nk_input_begin` and `nk_input_end`.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_unicode(struct nk_context*, nk_rune rune);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct
/// /// __rune__    | UTF-32 unicode codepoint</summary>
nk_input_unicode: procedure(p1: Pnk_context; p2: nk_rune); cdecl;

/// <summary>#### nk_input_end
/// /// End the input mirroring process by resetting mouse grabbing
/// /// state to ensure the mouse cursor is not grabbed indefinitely.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_input_end(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to a previously initialized `nk_context` struct</summary>
nk_input_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk__begin
/// /// Returns a draw command list iterator to iterate all draw
/// /// commands accumulated over one frame.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// const struct nk_command* nk__begin(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | must point to an previously initialized `nk_context` struct at the end of a frame
/// ///
/// /// Returns draw command pointer pointing to the first command inside the draw command list</summary>
nk__begin: function(p1: Pnk_context): Pnk_command; cdecl;

/// <summary>#### nk__next
/// /// Returns draw command pointer pointing to the next command inside the draw command list
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// const struct nk_command* nk__next(struct nk_context*, const struct nk_command* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct at the end of a frame
/// /// __cmd__     | Must point to an previously a draw command either returned by `nk__begin` or `nk__next`
/// ///
/// /// Returns draw command pointer pointing to the next command inside the draw command list</summary>
nk__next: function(p1: Pnk_context; const p2: Pnk_command): Pnk_command; cdecl;

/// <summary>#### nk_begin
/// /// Starts a new window; needs to be called every frame for every
/// /// window (unless hidden) or otherwise the window gets removed
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_begin(struct nk_context *ctx, const char *title, struct nk_rect bounds, nk_flags flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __title__   | Window title and identifier. Needs to be persistent over frames to identify the window
/// /// __bounds__  | Initial position and window size. However if you do not define `NK_WINDOW_SCALABLE` or `NK_WINDOW_MOVABLE` you can set window position and size every frame
/// /// __flags__   | Window flags defined in the nk_panel_flags section with a number of different window behaviors
/// ///
/// /// Returns `true(1)` if the window can be filled up with widgets from this point
/// /// until `nk_end` or `false(0)` otherwise for example if minimized</summary>
nk_begin: function(ctx: Pnk_context; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_begin_titled
/// /// Extended window start with separated title and identifier to allow multiple
/// /// windows with same title but not name
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_begin_titled(struct nk_context *ctx, const char *name, const char *title, struct nk_rect bounds, nk_flags flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Window identifier. Needs to be persistent over frames to identify the window
/// /// __title__   | Window title displayed inside header if flag `NK_WINDOW_TITLE` or either `NK_WINDOW_CLOSABLE` or `NK_WINDOW_MINIMIZED` was set
/// /// __bounds__  | Initial position and window size. However if you do not define `NK_WINDOW_SCALABLE` or `NK_WINDOW_MOVABLE` you can set window position and size every frame
/// /// __flags__   | Window flags defined in the nk_panel_flags section with a number of different window behaviors
/// ///
/// /// Returns `true(1)` if the window can be filled up with widgets from this point
/// /// until `nk_end` or `false(0)` otherwise for example if minimized</summary>
nk_begin_titled: function(ctx: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_end
/// /// Needs to be called at the end of the window building process to process scaling, scrollbars and general cleanup.
/// /// All widget calls after this functions will result in asserts or no state changes
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_end(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct</summary>
nk_end: procedure(ctx: Pnk_context); cdecl;

/// <summary>#### nk_window_find
/// /// Finds and returns a window from passed name
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_window *nk_window_find(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Window identifier
/// ///
/// /// Returns a `nk_window` struct pointing to the identified window or NULL if
/// /// no window with the given name was found</summary>
nk_window_find: function(ctx: Pnk_context; const name: PUTF8Char): Pnk_window; cdecl;

/// <summary>#### nk_window_get_bounds
/// /// Returns a rectangle with screen position and size of the currently processed window
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_window_get_bounds(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns a `nk_rect` struct with window upper left window position and size</summary>
nk_window_get_bounds: function(const ctx: Pnk_context): nk_rect; cdecl;

/// <summary>#### nk_window_get_position
/// /// Returns the position of the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_window_get_position(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns a `nk_vec2` struct with window upper left position</summary>
nk_window_get_position: function(const ctx: Pnk_context): nk_vec2; cdecl;

/// <summary>#### nk_window_get_size
/// /// Returns the size with width and height of the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_window_get_size(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns a `nk_vec2` struct with window width and height</summary>
nk_window_get_size: function(const p1: Pnk_context): nk_vec2; cdecl;

/// <summary>#### nk_window_get_width
/// /// Returns the width of the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// float nk_window_get_width(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns the current window width</summary>
nk_window_get_width: function(const p1: Pnk_context): Single; cdecl;

/// <summary>#### nk_window_get_height
/// /// Returns the height of the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// float nk_window_get_height(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns the current window height</summary>
nk_window_get_height: function(const p1: Pnk_context): Single; cdecl;

/// <summary>#### nk_window_get_panel
/// /// Returns the underlying panel which contains all processing state of the current window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// !!! WARNING
/// ///     Do not keep the returned panel pointer around, it is only valid until `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_panel* nk_window_get_panel(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns a pointer to window internal `nk_panel` state.</summary>
nk_window_get_panel: function(p1: Pnk_context): Pnk_panel; cdecl;

/// <summary>#### nk_window_get_content_region
/// /// Returns the position and size of the currently visible and non-clipped space
/// /// inside the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_window_get_content_region(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `nk_rect` struct with screen position and size (no scrollbar offset)
/// /// of the visible space inside the current window</summary>
nk_window_get_content_region: function(p1: Pnk_context): nk_rect; cdecl;

/// <summary>#### nk_window_get_content_region_min
/// /// Returns the upper left position of the currently visible and non-clipped
/// /// space inside the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_window_get_content_region_min(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// returns `nk_vec2` struct with  upper left screen position (no scrollbar offset)
/// /// of the visible space inside the current window</summary>
nk_window_get_content_region_min: function(p1: Pnk_context): nk_vec2; cdecl;

/// <summary>#### nk_window_get_content_region_max
/// /// Returns the lower right screen position of the currently visible and
/// /// non-clipped space inside the currently processed window.
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_window_get_content_region_max(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `nk_vec2` struct with lower right screen position (no scrollbar offset)
/// /// of the visible space inside the current window</summary>
nk_window_get_content_region_max: function(p1: Pnk_context): nk_vec2; cdecl;

/// <summary>#### nk_window_get_content_region_size
/// /// Returns the size of the currently visible and non-clipped space inside the
/// /// currently processed window
/// ///
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_window_get_content_region_size(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `nk_vec2` struct with size the visible space inside the current window</summary>
nk_window_get_content_region_size: function(p1: Pnk_context): nk_vec2; cdecl;

/// <summary>#### nk_window_get_canvas
/// /// Returns the draw command buffer. Can be used to draw custom widgets
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// !!! WARNING
/// ///     Do not keep the returned command buffer pointer around it is only valid until `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_command_buffer* nk_window_get_canvas(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns a pointer to window internal `nk_command_buffer` struct used as
/// /// drawing canvas. Can be used to do custom drawing.</summary>
nk_window_get_canvas: function(p1: Pnk_context): Pnk_command_buffer; cdecl;

/// <summary>#### nk_window_get_scroll
/// /// Gets the scroll offset for the current window
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_get_scroll(struct nk_context *ctx, nk_uint *offset_x, nk_uint *offset_y);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter    | Description
/// /// -------------|-----------------------------------------------------------
/// /// __ctx__      | Must point to an previously initialized `nk_context` struct
/// /// __offset_x__ | A pointer to the x offset output (or NULL to ignore)
/// /// __offset_y__ | A pointer to the y offset output (or NULL to ignore)</summary>
nk_window_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;

/// <summary>#### nk_window_has_focus
/// /// Returns if the currently processed window is currently active
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_has_focus(const struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `false(0)` if current window is not active or `true(1)` if it is</summary>
nk_window_has_focus: function(const p1: Pnk_context): nk_bool; cdecl;

/// <summary>#### nk_window_is_hovered
/// /// Return if the current window is being hovered
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_hovered(struct nk_context *ctx);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `true(1)` if current window is hovered or `false(0)` otherwise</summary>
nk_window_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;

/// <summary>#### nk_window_is_collapsed
/// /// Returns if the window with given name is currently minimized/collapsed
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_collapsed(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of window you want to check if it is collapsed
/// ///
/// /// Returns `true(1)` if current window is minimized and `false(0)` if window not
/// /// found or is not minimized</summary>
nk_window_is_collapsed: function(ctx: Pnk_context; const name: PUTF8Char): nk_bool; cdecl;

/// <summary>#### nk_window_is_closed
/// /// Returns if the window with given name was closed by calling `nk_close`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_closed(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of window you want to check if it is closed
/// ///
/// /// Returns `true(1)` if current window was closed or `false(0)` window not found or not closed</summary>
nk_window_is_closed: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;

/// <summary>#### nk_window_is_hidden
/// /// Returns if the window with given name is hidden
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_hidden(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of window you want to check if it is hidden
/// ///
/// /// Returns `true(1)` if current window is hidden or `false(0)` window not found or visible</summary>
nk_window_is_hidden: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;

/// <summary>#### nk_window_is_active
/// /// Same as nk_window_has_focus for some reason
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_active(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of window you want to check if it is active
/// ///
/// /// Returns `true(1)` if current window is active or `false(0)` window not found or not active</summary>
nk_window_is_active: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;

/// <summary>#### nk_window_is_any_hovered
/// /// Returns if the any window is being hovered
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_window_is_any_hovered(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `true(1)` if any window is hovered or `false(0)` otherwise</summary>
nk_window_is_any_hovered: function(p1: Pnk_context): nk_bool; cdecl;

/// <summary>#### nk_item_is_any_active
/// /// Returns if the any window is being hovered or any widget is currently active.
/// /// Can be used to decide if input should be processed by UI or your specific input handling.
/// /// Example could be UI and 3D camera to move inside a 3D space.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_item_is_any_active(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// ///
/// /// Returns `true(1)` if any window is hovered or any item is active or `false(0)` otherwise</summary>
nk_item_is_any_active: function(p1: Pnk_context): nk_bool; cdecl;

/// <summary>#### nk_window_set_bounds
/// /// Updates position and size of window with passed in name
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_set_bounds(struct nk_context*, const char *name, struct nk_rect bounds);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to modify both position and size
/// /// __bounds__  | Must point to a `nk_rect` struct with the new position and size</summary>
nk_window_set_bounds: procedure(p1: Pnk_context; const name: PUTF8Char; bounds: nk_rect); cdecl;

/// <summary>#### nk_window_set_position
/// /// Updates position of window with passed name
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_set_position(struct nk_context*, const char *name, struct nk_vec2 pos);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to modify both position
/// /// __pos__     | Must point to a `nk_vec2` struct with the new position</summary>
nk_window_set_position: procedure(p1: Pnk_context; const name: PUTF8Char; pos: nk_vec2); cdecl;

/// <summary>#### nk_window_set_size
/// /// Updates size of window with passed in name
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_set_size(struct nk_context*, const char *name, struct nk_vec2);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to modify both window size
/// /// __size__    | Must point to a `nk_vec2` struct with new window size</summary>
nk_window_set_size: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_vec2); cdecl;

/// <summary>#### nk_window_set_focus
/// /// Sets the window with given name as active
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_set_focus(struct nk_context*, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to set focus on</summary>
nk_window_set_focus: procedure(p1: Pnk_context; const name: PUTF8Char); cdecl;

/// <summary>#### nk_window_set_scroll
/// /// Sets the scroll offset for the current window
/// /// !!! WARNING
/// ///     Only call this function between calls `nk_begin_xxx` and `nk_end`
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_set_scroll(struct nk_context *ctx, nk_uint offset_x, nk_uint offset_y);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter    | Description
/// /// -------------|-----------------------------------------------------------
/// /// __ctx__      | Must point to an previously initialized `nk_context` struct
/// /// __offset_x__ | The x offset to scroll to
/// /// __offset_y__ | The y offset to scroll to</summary>
nk_window_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;

/// <summary>#### nk_window_close
/// /// Closes a window and marks it for being freed at the end of the frame
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_close(struct nk_context *ctx, const char *name);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to close</summary>
nk_window_close: procedure(ctx: Pnk_context; const name: PUTF8Char); cdecl;

/// <summary>#### nk_window_collapse
/// /// Updates collapse state of a window with given name
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_collapse(struct nk_context*, const char *name, enum nk_collapse_states state);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to close
/// /// __state__   | value out of nk_collapse_states section</summary>
nk_window_collapse: procedure(p1: Pnk_context; const name: PUTF8Char; state: nk_collapse_states); cdecl;

/// <summary>#### nk_window_collapse_if
/// /// Updates collapse state of a window with given name if given condition is met
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_collapse_if(struct nk_context*, const char *name, enum nk_collapse_states, int cond);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to either collapse or maximize
/// /// __state__   | value out of nk_collapse_states section the window should be put into
/// /// __cond__    | condition that has to be met to actually commit the collapse state change</summary>
nk_window_collapse_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_collapse_states; cond: Integer); cdecl;

/// <summary>#### nk_window_show
/// /// updates visibility state of a window with given name
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_show(struct nk_context*, const char *name, enum nk_show_states);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to either collapse or maximize
/// /// __state__   | state with either visible or hidden to modify the window with</summary>
nk_window_show: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states); cdecl;

/// <summary>#### nk_window_show_if
/// /// Updates visibility state of a window with given name if a given condition is met
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_window_show_if(struct nk_context*, const char *name, enum nk_show_states, int cond);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __name__    | Identifier of the window to either hide or show
/// /// __state__   | state with either visible or hidden to modify the window with
/// /// __cond__    | condition that has to be met to actually commit the visbility state change</summary>
nk_window_show_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states; cond: Integer); cdecl;

/// <summary>#### nk_layout_set_min_row_height
/// /// Sets the currently used minimum row height.
/// /// !!! WARNING
/// ///     The passed height needs to include both your preferred row height
/// ///     as well as padding. No internal padding is added.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_set_min_row_height(struct nk_context*, float height);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __height__  | New minimum row height to be used for auto generating the row height</summary>
nk_layout_set_min_row_height: procedure(p1: Pnk_context; height: Single); cdecl;

/// <summary>#### nk_layout_reset_min_row_height
/// /// Reset the currently used minimum row height back to `font_height + text_padding + padding`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_reset_min_row_height(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`</summary>
nk_layout_reset_min_row_height: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_layout_widget_bounds
/// /// Returns the width of the next row allocate by one of the layouting functions
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_layout_widget_bounds(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// ///
/// /// Return `nk_rect` with both position and size of the next row</summary>
nk_layout_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;

/// <summary>#### nk_layout_ratio_from_pixel
/// /// Utility functions to calculate window ratio from pixel size
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// float nk_layout_ratio_from_pixel(struct nk_context*, float pixel_width);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __pixel__   | Pixel_width to convert to window ratio
/// ///
/// /// Returns `nk_rect` with both position and size of the next row</summary>
nk_layout_ratio_from_pixel: function(p1: Pnk_context; pixel_width: Single): Single; cdecl;

/// <summary>#### nk_layout_row_dynamic
/// /// Sets current row layout to share horizontal space
/// /// between number of widgets evenly. Once called all subsequent widget
/// /// calls greater than will allocate a new row with same layout.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __height__  | Holds height of each widget in row or zero for auto layouting
/// /// __columns__ | Number of widget inside row</summary>
nk_layout_row_dynamic: procedure(ctx: Pnk_context; height: Single; cols: Integer); cdecl;

/// <summary>#### nk_layout_row_static
/// /// Sets current row layout to fill number of widgets
/// /// in row with same _width horizontal size. Once called all subsequent widget
/// /// calls greater than will allocate a new row with same layout.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_static(struct nk_context *ctx, float height, int item_width, int cols);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __height__  | Holds height of each widget in row or zero for auto layouting
/// /// __width__   | Holds pixel width of each widget in the row
/// /// __columns__ | Number of widget inside row</summary>
nk_layout_row_static: procedure(ctx: Pnk_context; height: Single; item_width: Integer; cols: Integer); cdecl;

/// <summary>#### nk_layout_row_begin
/// /// Starts a new dynamic or fixed row with given height and columns.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_begin(struct nk_context *ctx, enum nk_layout_format fmt, float row_height, int cols);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __fmt__     | either `NK_DYNAMIC` for window ratio or `NK_STATIC` for fixed size columns
/// /// __height__  | holds height of each widget in row or zero for auto layouting
/// /// __columns__ | Number of widget inside row</summary>
nk_layout_row_begin: procedure(ctx: Pnk_context; fmt: nk_layout_format; row_height: Single; cols: Integer); cdecl;

/// <summary>#### nk_layout_row_push
/// /// Specifies either window ratio or width of a single column
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_push(struct nk_context*, float value);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __value__   | either a window ratio or fixed width depending on in previous `nk_layout_row_begin` call</summary>
nk_layout_row_push: procedure(p1: Pnk_context; value: Single); cdecl;

/// <summary>#### nk_layout_row_end
/// /// Finished previously started row
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_end(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`</summary>
nk_layout_row_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_layout_row
/// /// Specifies row columns in array as either window ratio or size
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row(struct nk_context*, enum nk_layout_format, float height, int cols, const float *ratio);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __fmt__     | Either `NK_DYNAMIC` for window ratio or `NK_STATIC` for fixed size columns
/// /// __height__  | Holds height of each widget in row or zero for auto layouting
/// /// __columns__ | Number of widget inside row</summary>
nk_layout_row: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; cols: Integer; const ratio: PSingle); cdecl;

/// <summary>#### nk_layout_row_template_begin
/// /// Begins the row template declaration
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_template_begin(struct nk_context*, float row_height);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __height__  | Holds height of each widget in row or zero for auto layouting</summary>
nk_layout_row_template_begin: procedure(p1: Pnk_context; row_height: Single); cdecl;

/// <summary>#### nk_layout_row_template_push_dynamic
/// /// Adds a dynamic column that dynamically grows and can go to zero if not enough space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_template_push_dynamic(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __height__  | Holds height of each widget in row or zero for auto layouting</summary>
nk_layout_row_template_push_dynamic: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_layout_row_template_push_variable
/// /// Adds a variable column that dynamically grows but does not shrink below specified pixel width
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_template_push_variable(struct nk_context*, float min_width);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __width__   | Holds the minimum pixel width the next column must always be</summary>
nk_layout_row_template_push_variable: procedure(p1: Pnk_context; min_width: Single); cdecl;

/// <summary>#### nk_layout_row_template_push_static
/// /// Adds a static column that does not grow and will always have the same size
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_template_push_static(struct nk_context*, float width);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __width__   | Holds the absolute pixel width value the next column must be</summary>
nk_layout_row_template_push_static: procedure(p1: Pnk_context; width: Single); cdecl;

/// <summary>#### nk_layout_row_template_end
/// /// Marks the end of the row template
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_row_template_end(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`</summary>
nk_layout_row_template_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_layout_space_begin
/// /// Begins a new layouting space that allows to specify each widgets position and size.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_space_begin(struct nk_context*, enum nk_layout_format, float height, int widget_count);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_begin_xxx`
/// /// __fmt__     | Either `NK_DYNAMIC` for window ratio or `NK_STATIC` for fixed size columns
/// /// __height__  | Holds height of each widget in row or zero for auto layouting
/// /// __columns__ | Number of widgets inside row</summary>
nk_layout_space_begin: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; widget_count: Integer); cdecl;

/// <summary>#### nk_layout_space_push
/// /// Pushes position and size of the next widget in own coordinate space either as pixel or ratio
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_space_push(struct nk_context *ctx, struct nk_rect bounds);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// /// __bounds__  | Position and size in laoyut space local coordinates</summary>
nk_layout_space_push: procedure(p1: Pnk_context; bounds: nk_rect); cdecl;

/// <summary>#### nk_layout_space_end
/// /// Marks the end of the layout space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_layout_space_end(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`</summary>
nk_layout_space_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_layout_space_bounds
/// /// Utility function to calculate total space allocated for `nk_layout_space`
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_layout_space_bounds(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// ///
/// /// Returns `nk_rect` holding the total space allocated</summary>
nk_layout_space_bounds: function(p1: Pnk_context): nk_rect; cdecl;

/// <summary>#### nk_layout_space_to_screen
/// /// Converts vector from nk_layout_space coordinate space into screen space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_layout_space_to_screen(struct nk_context*, struct nk_vec2);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// /// __vec__     | Position to convert from layout space into screen coordinate space
/// ///
/// /// Returns transformed `nk_vec2` in screen space coordinates</summary>
nk_layout_space_to_screen: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;

/// <summary>#### nk_layout_space_to_local
/// /// Converts vector from layout space into screen space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_vec2 nk_layout_space_to_local(struct nk_context*, struct nk_vec2);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// /// __vec__     | Position to convert from screen space into layout coordinate space
/// ///
/// /// Returns transformed `nk_vec2` in layout space coordinates</summary>
nk_layout_space_to_local: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;

/// <summary>#### nk_layout_space_rect_to_screen
/// /// Converts rectangle from screen space into layout space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_layout_space_rect_to_screen(struct nk_context*, struct nk_rect);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// /// __bounds__  | Rectangle to convert from layout space into screen space
/// ///
/// /// Returns transformed `nk_rect` in screen space coordinates</summary>
nk_layout_space_rect_to_screen: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;

/// <summary>#### nk_layout_space_rect_to_local
/// /// Converts rectangle from layout space into screen space
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// struct nk_rect nk_layout_space_rect_to_local(struct nk_context*, struct nk_rect);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`
/// /// __bounds__  | Rectangle to convert from layout space into screen space
/// ///
/// /// Returns transformed `nk_rect` in layout space coordinates</summary>
nk_layout_space_rect_to_local: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;

/// <summary>#### nk_spacer
/// /// Spacer is a dummy widget that consumes space as usual but doesn't draw anything
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_spacer(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after call `nk_layout_space_begin`</summary>
nk_spacer: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_group_begin
/// /// Starts a new widget group. Requires a previous layouting function to specify a pos/size.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_group_begin(struct nk_context*, const char *title, nk_flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __title__   | Must be an unique identifier for this group that is also used for the group header
/// /// __flags__   | Window flags defined in the nk_panel_flags section with a number of different group behaviors
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_group_begin: function(p1: Pnk_context; const title: PUTF8Char; p3: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_group_begin_titled
/// /// Starts a new widget group. Requires a previous layouting function to specify a pos/size.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_group_begin_titled(struct nk_context*, const char *name, const char *title, nk_flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __id__      | Must be an unique identifier for this group
/// /// __title__   | Group header title
/// /// __flags__   | Window flags defined in the nk_panel_flags section with a number of different group behaviors
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_group_begin_titled: function(p1: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_group_end
/// /// Ends a widget group
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_group_end(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct</summary>
nk_group_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_group_scrolled_offset_begin
/// /// starts a new widget group. requires a previous layouting function to specify
/// /// a size. Does not keep track of scrollbar.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_group_scrolled_offset_begin(struct nk_context*, nk_uint *x_offset, nk_uint *y_offset, const char *title, nk_flags flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __x_offset__| Scrollbar x-offset to offset all widgets inside the group horizontally.
/// /// __y_offset__| Scrollbar y-offset to offset all widgets inside the group vertically
/// /// __title__   | Window unique group title used to both identify and display in the group header
/// /// __flags__   | Window flags from the nk_panel_flags section
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_group_scrolled_offset_begin: function(p1: Pnk_context; x_offset: Pnk_uint; y_offset: Pnk_uint; const title: PUTF8Char; flags: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_group_scrolled_begin
/// /// Starts a new widget group. requires a previous
/// /// layouting function to specify a size. Does not keep track of scrollbar.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_group_scrolled_begin(struct nk_context*, struct nk_scroll *off, const char *title, nk_flags);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __off__     | Both x- and y- scroll offset. Allows for manual scrollbar control
/// /// __title__   | Window unique group title used to both identify and display in the group header
/// /// __flags__   | Window flags from nk_panel_flags section
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_group_scrolled_begin: function(p1: Pnk_context; off: Pnk_scroll; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;

/// <summary>#### nk_group_scrolled_end
/// /// Ends a widget group after calling nk_group_scrolled_offset_begin or nk_group_scrolled_begin.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_group_scrolled_end(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct</summary>
nk_group_scrolled_end: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_group_get_scroll
/// /// Gets the scroll position of the given group.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_group_get_scroll(struct nk_context*, const char *id, nk_uint *x_offset, nk_uint *y_offset);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter    | Description
/// /// -------------|-----------------------------------------------------------
/// /// __ctx__      | Must point to an previously initialized `nk_context` struct
/// /// __id__       | The id of the group to get the scroll position of
/// /// __x_offset__ | A pointer to the x offset output (or NULL to ignore)
/// /// __y_offset__ | A pointer to the y offset output (or NULL to ignore)</summary>
nk_group_get_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: Pnk_uint; y_offset: Pnk_uint); cdecl;

/// <summary>#### nk_group_set_scroll
/// /// Sets the scroll position of the given group.
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_group_set_scroll(struct nk_context*, const char *id, nk_uint x_offset, nk_uint y_offset);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter    | Description
/// /// -------------|-----------------------------------------------------------
/// /// __ctx__      | Must point to an previously initialized `nk_context` struct
/// /// __id__       | The id of the group to scroll
/// /// __x_offset__ | The x offset to scroll to
/// /// __y_offset__ | The y offset to scroll to</summary>
nk_group_set_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: nk_uint; y_offset: nk_uint); cdecl;

/// <summary>#### nk_tree_push_hashed
/// /// Start a collapsible UI section with internal state management with full
/// /// control over internal unique ID used to store state
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_tree_push_hashed(struct nk_context*, enum nk_tree_type, const char *title, enum nk_collapse_states initial_state, const char *hash, int len,int seed);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __type__    | Value from the nk_tree_type section to visually mark a tree node header as either a collapseable UI section or tree node
/// /// __title__   | Label printed in the tree header
/// /// __state__   | Initial tree state value out of nk_collapse_states
/// /// __hash__    | Memory block or string to generate the ID from
/// /// __len__     | Size of passed memory block or string in __hash__
/// /// __seed__    | Seeding value if this function is called in a loop or default to `0`
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_tree_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;

/// <summary>#### nk_tree_image_push_hashed
/// /// Start a collapsible UI section with internal state management with full
/// /// control over internal unique ID used to store state
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_tree_image_push_hashed(struct nk_context*, enum nk_tree_type, struct nk_image, const char *title, enum nk_collapse_states initial_state, const char *hash, int len,int seed);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct
/// /// __type__    | Value from the nk_tree_type section to visually mark a tree node header as either a collapseable UI section or tree node
/// /// __img__     | Image to display inside the header on the left of the label
/// /// __title__   | Label printed in the tree header
/// /// __state__   | Initial tree state value out of nk_collapse_states
/// /// __hash__    | Memory block or string to generate the ID from
/// /// __len__     | Size of passed memory block or string in __hash__
/// /// __seed__    | Seeding value if this function is called in a loop or default to `0`
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_tree_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;

/// <summary>#### nk_tree_pop
/// /// Ends a collapsabale UI section
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_tree_pop(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after calling `nk_tree_xxx_push_xxx`</summary>
nk_tree_pop: procedure(p1: Pnk_context); cdecl;

/// <summary>#### nk_tree_state_push
/// /// Start a collapsible UI section with external state management
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_tree_state_push(struct nk_context*, enum nk_tree_type, const char *title, enum nk_collapse_states *state);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after calling `nk_tree_xxx_push_xxx`
/// /// __type__    | Value from the nk_tree_type section to visually mark a tree node header as either a collapseable UI section or tree node
/// /// __title__   | Label printed in the tree header
/// /// __state__   | Persistent state to update
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_tree_state_push: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;

/// <summary>#### nk_tree_state_image_push
/// /// Start a collapsible UI section with image and label header and external state management
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// nk_bool nk_tree_state_image_push(struct nk_context*, enum nk_tree_type, struct nk_image, const char *title, enum nk_collapse_states *state);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after calling `nk_tree_xxx_push_xxx`
/// /// __img__     | Image to display inside the header on the left of the label
/// /// __type__    | Value from the nk_tree_type section to visually mark a tree node header as either a collapseable UI section or tree node
/// /// __title__   | Label printed in the tree header
/// /// __state__   | Persistent state to update
/// ///
/// /// Returns `true(1)` if visible and fillable with widgets or `false(0)` otherwise</summary>
nk_tree_state_image_push: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;

/// <summary>#### nk_tree_state_pop
/// /// Ends a collapsabale UI section
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_tree_state_pop(struct nk_context* );
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter   | Description
/// /// ------------|-----------------------------------------------------------
/// /// __ctx__     | Must point to an previously initialized `nk_context` struct after calling `nk_tree_xxx_push_xxx`</summary>
nk_tree_state_pop: procedure(p1: Pnk_context); cdecl;

nk_tree_element_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;

nk_tree_element_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;

nk_tree_element_pop: procedure(p1: Pnk_context); cdecl;

nk_list_view_begin: function(p1: Pnk_context; &out: Pnk_list_view; const id: PUTF8Char; p4: nk_flags; row_height: Integer; row_count: Integer): nk_bool; cdecl;

nk_list_view_end: procedure(p1: Pnk_list_view); cdecl;

nk_widget: function(p1: Pnk_rect; const p2: Pnk_context): nk_widget_layout_states; cdecl;

nk_widget_fitting: function(p1: Pnk_rect; p2: Pnk_context; p3: nk_vec2): nk_widget_layout_states; cdecl;

nk_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;

nk_widget_position: function(p1: Pnk_context): nk_vec2; cdecl;

nk_widget_size: function(p1: Pnk_context): nk_vec2; cdecl;

nk_widget_width: function(p1: Pnk_context): Single; cdecl;

nk_widget_height: function(p1: Pnk_context): Single; cdecl;

nk_widget_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;

nk_widget_is_mouse_clicked: function(p1: Pnk_context; p2: nk_buttons): nk_bool; cdecl;

nk_widget_has_mouse_click_down: function(p1: Pnk_context; p2: nk_buttons; down: nk_bool): nk_bool; cdecl;

nk_spacing: procedure(p1: Pnk_context; cols: Integer); cdecl;

nk_text: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags); cdecl;

nk_text_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags; p5: nk_color); cdecl;

nk_text_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer); cdecl;

nk_text_wrap_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_color); cdecl;

nk_label: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags); cdecl;

nk_label_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_color); cdecl;

nk_label_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;

nk_label_colored_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: nk_color); cdecl;

nk_image_: procedure(p1: Pnk_context; p2: nk_image); cdecl;

nk_image_color: procedure(p1: Pnk_context; p2: nk_image; p3: nk_color); cdecl;

nk_button_text: function(p1: Pnk_context; const title: PUTF8Char; len: Integer): nk_bool; cdecl;

nk_button_label: function(p1: Pnk_context; const title: PUTF8Char): nk_bool; cdecl;

nk_button_color: function(p1: Pnk_context; p2: nk_color): nk_bool; cdecl;

nk_button_symbol: function(p1: Pnk_context; p2: nk_symbol_type): nk_bool; cdecl;

nk_button_image: function(p1: Pnk_context; img: nk_image): nk_bool; cdecl;

nk_button_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;

nk_button_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_button_image_label: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;

nk_button_image_text: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_button_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char; len: Integer): nk_bool; cdecl;

nk_button_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char): nk_bool; cdecl;

nk_button_symbol_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type): nk_bool; cdecl;

nk_button_image_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image): nk_bool; cdecl;

nk_button_symbol_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_button_symbol_label_styled: function(ctx: Pnk_context; const style: Pnk_style_button; symbol: nk_symbol_type; const title: PUTF8Char; align: nk_flags): nk_bool; cdecl;

nk_button_image_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;

nk_button_image_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_button_set_behavior: procedure(p1: Pnk_context; p2: nk_button_behavior); cdecl;

nk_button_push_behavior: function(p1: Pnk_context; p2: nk_button_behavior): nk_bool; cdecl;

nk_button_pop_behavior: function(p1: Pnk_context): nk_bool; cdecl;

nk_check_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;

nk_check_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;

nk_check_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: Cardinal; value: Cardinal): Cardinal; cdecl;

nk_check_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: Cardinal; value: Cardinal): Cardinal; cdecl;

nk_checkbox_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;

nk_checkbox_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;

nk_checkbox_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: PCardinal; value: Cardinal): nk_bool; cdecl;

nk_checkbox_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: PCardinal; value: Cardinal): nk_bool; cdecl;

nk_radio_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;

nk_radio_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;

nk_option_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;

nk_option_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;

nk_selectable_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_selectable_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_selectable_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_selectable_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_selectable_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_selectable_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;

nk_select_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_select_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_select_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_select_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_select_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_select_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;

nk_slide_float: function(p1: Pnk_context; min: Single; val: Single; max: Single; step: Single): Single; cdecl;

nk_slide_int: function(p1: Pnk_context; min: Integer; val: Integer; max: Integer; step: Integer): Integer; cdecl;

nk_slider_float: function(p1: Pnk_context; min: Single; val: PSingle; max: Single; step: Single): nk_bool; cdecl;

nk_slider_int: function(p1: Pnk_context; min: Integer; val: PInteger; max: Integer; step: Integer): nk_bool; cdecl;

nk_progress: function(p1: Pnk_context; cur: Pnk_size; max: nk_size; modifyable: nk_bool): nk_bool; cdecl;

nk_prog: function(p1: Pnk_context; cur: nk_size; max: nk_size; modifyable: nk_bool): nk_size; cdecl;

nk_color_picker: function(p1: Pnk_context; p2: nk_colorf; p3: nk_color_format): nk_colorf; cdecl;

nk_color_pick: function(p1: Pnk_context; p2: Pnk_colorf; p3: nk_color_format): nk_bool; cdecl;

/// <summary>#### nk_property_int
/// /// Integer property directly modifying a passed in value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_property_int(struct nk_context *ctx, const char *name, int min, int *val, int max, int step, float inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Integer pointer to be modified
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging</summary>
nk_property_int: procedure(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: PInteger; max: Integer; step: Integer; inc_per_pixel: Single); cdecl;

/// <summary>#### nk_property_float
/// /// Float property directly modifying a passed in value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_property_float(struct nk_context *ctx, const char *name, float min, float *val, float max, float step, float inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Float pointer to be modified
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging</summary>
nk_property_float: procedure(p1: Pnk_context; const name: PUTF8Char; min: Single; val: PSingle; max: Single; step: Single; inc_per_pixel: Single); cdecl;

/// <summary>#### nk_property_double
/// /// Double property directly modifying a passed in value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// void nk_property_double(struct nk_context *ctx, const char *name, double min, double *val, double max, double step, double inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Double pointer to be modified
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging</summary>
nk_property_double: procedure(p1: Pnk_context; const name: PUTF8Char; min: Double; val: PDouble; max: Double; step: Double; inc_per_pixel: Single); cdecl;

/// <summary>#### nk_propertyi
/// /// Integer property modifying a passed in value and returning the new value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// int nk_propertyi(struct nk_context *ctx, const char *name, int min, int val, int max, int step, float inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Current integer value to be modified and returned
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging
/// ///
/// /// Returns the new modified integer value</summary>
nk_propertyi: function(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: Integer; max: Integer; step: Integer; inc_per_pixel: Single): Integer; cdecl;

/// <summary>#### nk_propertyf
/// /// Float property modifying a passed in value and returning the new value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// float nk_propertyf(struct nk_context *ctx, const char *name, float min, float val, float max, float step, float inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Current float value to be modified and returned
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging
/// ///
/// /// Returns the new modified float value</summary>
nk_propertyf: function(p1: Pnk_context; const name: PUTF8Char; min: Single; val: Single; max: Single; step: Single; inc_per_pixel: Single): Single; cdecl;

/// <summary>#### nk_propertyd
/// /// Float property modifying a passed in value and returning the new value
/// /// !!! WARNING
/// ///     To generate a unique property ID using the same label make sure to insert
/// ///     a `#` at the beginning. It will not be shown but guarantees correct behavior.
/// ///
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~c
/// /// float nk_propertyd(struct nk_context *ctx, const char *name, double min, double val, double max, double step, double inc_per_pixel);
/// /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// ///
/// /// Parameter           | Description
/// /// --------------------|-----------------------------------------------------------
/// /// __ctx__             | Must point to an previously initialized `nk_context` struct after calling a layouting function
/// /// __name__            | String used both as a label as well as a unique identifier
/// /// __min__             | Minimum value not allowed to be underflown
/// /// __val__             | Current double value to be modified and returned
/// /// __max__             | Maximum value not allowed to be overflown
/// /// __step__            | Increment added and subtracted on increment and decrement button
/// /// __inc_per_pixel__   | Value per pixel added or subtracted on dragging
/// ///
/// /// Returns the new modified double value</summary>
nk_propertyd: function(p1: Pnk_context; const name: PUTF8Char; min: Double; val: Double; max: Double; step: Double; inc_per_pixel: Single): Double; cdecl;

nk_edit_string: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; len: PInteger; max: Integer; p6: nk_plugin_filter): nk_flags; cdecl;

nk_edit_string_zero_terminated: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; max: Integer; p5: nk_plugin_filter): nk_flags; cdecl;

nk_edit_buffer: function(p1: Pnk_context; p2: nk_flags; p3: Pnk_text_edit; p4: nk_plugin_filter): nk_flags; cdecl;

nk_edit_focus: procedure(p1: Pnk_context; flags: nk_flags); cdecl;

nk_edit_unfocus: procedure(p1: Pnk_context); cdecl;

nk_chart_begin: function(p1: Pnk_context; p2: nk_chart_type; num: Integer; min: Single; max: Single): nk_bool; cdecl;

nk_chart_begin_colored: function(p1: Pnk_context; p2: nk_chart_type; p3: nk_color; active: nk_color; num: Integer; min: Single; max: Single): nk_bool; cdecl;

nk_chart_add_slot: procedure(ctx: Pnk_context; const p2: nk_chart_type; count: Integer; min_value: Single; max_value: Single); cdecl;

nk_chart_add_slot_colored: procedure(ctx: Pnk_context; const p2: nk_chart_type; p3: nk_color; active: nk_color; count: Integer; min_value: Single; max_value: Single); cdecl;

nk_chart_push: function(p1: Pnk_context; p2: Single): nk_flags; cdecl;

nk_chart_push_slot: function(p1: Pnk_context; p2: Single; p3: Integer): nk_flags; cdecl;

nk_chart_end: procedure(p1: Pnk_context); cdecl;

nk_plot: procedure(p1: Pnk_context; p2: nk_chart_type; const values: PSingle; count: Integer; offset: Integer); cdecl;

nk_plot_function: procedure(p1: Pnk_context; p2: nk_chart_type; userdata: Pointer; value_getter: nk_plot_function_value_getter; count: Integer; offset: Integer); cdecl;

nk_popup_begin: function(p1: Pnk_context; p2: nk_popup_type; const p3: PUTF8Char; p4: nk_flags; bounds: nk_rect): nk_bool; cdecl;

nk_popup_close: procedure(p1: Pnk_context); cdecl;

nk_popup_end: procedure(p1: Pnk_context); cdecl;

nk_popup_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;

nk_popup_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;

nk_combo: function(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;

nk_combo_separator: function(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;

nk_combo_string: function(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;

nk_combo_callback: function(p1: Pnk_context; item_getter: nk_combo_callback_item_getter; userdata: Pointer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;

nk_combobox: procedure(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: PInteger; item_height: Integer; size: nk_vec2); cdecl;

nk_combobox_string: procedure(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;

nk_combobox_separator: procedure(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;

nk_combobox_callback: procedure(p1: Pnk_context; item_getter: nk_combobox_callback_item_getter; p3: Pointer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;

nk_combo_begin_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_label: function(p1: Pnk_context; const selected: PUTF8Char; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_color: function(p1: Pnk_context; color: nk_color; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_symbol: function(p1: Pnk_context; p2: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_symbol_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_symbol_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_image: function(p1: Pnk_context; img: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_image_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_combo_begin_image_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_combo_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_combo_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_combo_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_combo_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_combo_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_combo_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_combo_close: procedure(p1: Pnk_context); cdecl;

nk_combo_end: procedure(p1: Pnk_context); cdecl;

nk_contextual_begin: function(p1: Pnk_context; p2: nk_flags; p3: nk_vec2; trigger_bounds: nk_rect): nk_bool; cdecl;

nk_contextual_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;

nk_contextual_item_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags): nk_bool; cdecl;

nk_contextual_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_contextual_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_contextual_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_contextual_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_contextual_close: procedure(p1: Pnk_context); cdecl;

nk_contextual_end: procedure(p1: Pnk_context); cdecl;

nk_tooltip: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;

nk_tooltip_begin: function(p1: Pnk_context; width: Single): nk_bool; cdecl;

nk_tooltip_end: procedure(p1: Pnk_context); cdecl;

nk_menubar_begin: procedure(p1: Pnk_context); cdecl;

nk_menubar_end: procedure(p1: Pnk_context); cdecl;

nk_menu_begin_text: function(p1: Pnk_context; const title: PUTF8Char; title_len: Integer; align: nk_flags; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_image: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_image_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_image_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_image; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_symbol: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_symbol_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_menu_begin_symbol_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;

nk_menu_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;

nk_menu_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_menu_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_menu_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_menu_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;

nk_menu_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;

nk_menu_close: procedure(p1: Pnk_context); cdecl;

nk_menu_end: procedure(p1: Pnk_context); cdecl;

nk_style_default: procedure(p1: Pnk_context); cdecl;

nk_style_from_table: procedure(p1: Pnk_context; const p2: Pnk_color); cdecl;

nk_style_load_cursor: procedure(p1: Pnk_context; p2: nk_style_cursor; const p3: Pnk_cursor); cdecl;

nk_style_load_all_cursors: procedure(p1: Pnk_context; p2: Pnk_cursor); cdecl;

nk_style_get_color_by_name: function(p1: nk_style_colors): PUTF8Char; cdecl;

nk_style_set_font: procedure(p1: Pnk_context; const p2: Pnk_user_font); cdecl;

nk_style_set_cursor: function(p1: Pnk_context; p2: nk_style_cursor): nk_bool; cdecl;

nk_style_show_cursor: procedure(p1: Pnk_context); cdecl;

nk_style_hide_cursor: procedure(p1: Pnk_context); cdecl;

nk_style_push_font: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;

nk_style_push_float: function(p1: Pnk_context; p2: PSingle; p3: Single): nk_bool; cdecl;

nk_style_push_vec2: function(p1: Pnk_context; p2: Pnk_vec2; p3: nk_vec2): nk_bool; cdecl;

nk_style_push_style_item: function(p1: Pnk_context; p2: Pnk_style_item; p3: nk_style_item): nk_bool; cdecl;

nk_style_push_flags: function(p1: Pnk_context; p2: Pnk_flags; p3: nk_flags): nk_bool; cdecl;

nk_style_push_color: function(p1: Pnk_context; p2: Pnk_color; p3: nk_color): nk_bool; cdecl;

nk_style_pop_font: function(p1: Pnk_context): nk_bool; cdecl;

nk_style_pop_float: function(p1: Pnk_context): nk_bool; cdecl;

nk_style_pop_vec2: function(p1: Pnk_context): nk_bool; cdecl;

nk_style_pop_style_item: function(p1: Pnk_context): nk_bool; cdecl;

nk_style_pop_flags: function(p1: Pnk_context): nk_bool; cdecl;

nk_style_pop_color: function(p1: Pnk_context): nk_bool; cdecl;

nk_rgb_: function(r: Integer; g: Integer; b: Integer): nk_color; cdecl;

nk_rgb_iv: function(const rgb: PInteger): nk_color; cdecl;

nk_rgb_bv: function(const rgb: Pnk_byte): nk_color; cdecl;

nk_rgb_f: function(r: Single; g: Single; b: Single): nk_color; cdecl;

nk_rgb_fv: function(const rgb: PSingle): nk_color; cdecl;

nk_rgb_cf: function(c: nk_colorf): nk_color; cdecl;

nk_rgb_hex: function(const rgb: PUTF8Char): nk_color; cdecl;

nk_rgba_: function(r: Integer; g: Integer; b: Integer; a: Integer): nk_color; cdecl;

nk_rgba_u32: function(p1: nk_uint): nk_color; cdecl;

nk_rgba_iv: function(const rgba: PInteger): nk_color; cdecl;

nk_rgba_bv: function(const rgba: Pnk_byte): nk_color; cdecl;

nk_rgba_f: function(r: Single; g: Single; b: Single; a: Single): nk_color; cdecl;

nk_rgba_fv: function(const rgba: PSingle): nk_color; cdecl;

nk_rgba_cf: function(c: nk_colorf): nk_color; cdecl;

nk_rgba_hex: function(const rgb: PUTF8Char): nk_color; cdecl;

nk_hsva_colorf: function(h: Single; s: Single; v: Single; a: Single): nk_colorf; cdecl;

nk_hsva_colorfv: function(c: PSingle): nk_colorf; cdecl;

nk_colorf_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; &in: nk_colorf); cdecl;

nk_colorf_hsva_fv: procedure(hsva: PSingle; &in: nk_colorf); cdecl;

nk_hsv: function(h: Integer; s: Integer; v: Integer): nk_color; cdecl;

nk_hsv_iv: function(const hsv: PInteger): nk_color; cdecl;

nk_hsv_bv: function(const hsv: Pnk_byte): nk_color; cdecl;

nk_hsv_f: function(h: Single; s: Single; v: Single): nk_color; cdecl;

nk_hsv_fv: function(const hsv: PSingle): nk_color; cdecl;

nk_hsva: function(h: Integer; s: Integer; v: Integer; a: Integer): nk_color; cdecl;

nk_hsva_iv: function(const hsva: PInteger): nk_color; cdecl;

nk_hsva_bv: function(const hsva: Pnk_byte): nk_color; cdecl;

nk_hsva_f: function(h: Single; s: Single; v: Single; a: Single): nk_color; cdecl;

nk_hsva_fv: function(const hsva: PSingle): nk_color; cdecl;

nk_color_f: procedure(r: PSingle; g: PSingle; b: PSingle; a: PSingle; p5: nk_color); cdecl;

nk_color_fv: procedure(rgba_out: PSingle; p2: nk_color); cdecl;

nk_color_cf: function(p1: nk_color): nk_colorf; cdecl;

nk_color_d: procedure(r: PDouble; g: PDouble; b: PDouble; a: PDouble; p5: nk_color); cdecl;

nk_color_dv: procedure(rgba_out: PDouble; p2: nk_color); cdecl;

nk_color_u32: function(p1: nk_color): nk_uint; cdecl;

nk_color_hex_rgba: procedure(output: PUTF8Char; p2: nk_color); cdecl;

nk_color_hex_rgb: procedure(output: PUTF8Char; p2: nk_color); cdecl;

nk_color_hsv_i: procedure(out_h: PInteger; out_s: PInteger; out_v: PInteger; p4: nk_color); cdecl;

nk_color_hsv_b: procedure(out_h: Pnk_byte; out_s: Pnk_byte; out_v: Pnk_byte; p4: nk_color); cdecl;

nk_color_hsv_iv: procedure(hsv_out: PInteger; p2: nk_color); cdecl;

nk_color_hsv_bv: procedure(hsv_out: Pnk_byte; p2: nk_color); cdecl;

nk_color_hsv_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; p4: nk_color); cdecl;

nk_color_hsv_fv: procedure(hsv_out: PSingle; p2: nk_color); cdecl;

nk_color_hsva_i: procedure(h: PInteger; s: PInteger; v: PInteger; a: PInteger; p5: nk_color); cdecl;

nk_color_hsva_b: procedure(h: Pnk_byte; s: Pnk_byte; v: Pnk_byte; a: Pnk_byte; p5: nk_color); cdecl;

nk_color_hsva_iv: procedure(hsva_out: PInteger; p2: nk_color); cdecl;

nk_color_hsva_bv: procedure(hsva_out: Pnk_byte; p2: nk_color); cdecl;

nk_color_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; p5: nk_color); cdecl;

nk_color_hsva_fv: procedure(hsva_out: PSingle; p2: nk_color); cdecl;

nk_handle_ptr: function(p1: Pointer): nk_handle; cdecl;

nk_handle_id: function(p1: Integer): nk_handle; cdecl;

nk_image_handle: function(p1: nk_handle): nk_image; cdecl;

nk_image_ptr: function(p1: Pointer): nk_image; cdecl;

nk_image_id: function(p1: Integer): nk_image; cdecl;

nk_image_is_subimage: function(const img: Pnk_image): nk_bool; cdecl;

nk_subimage_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;

nk_subimage_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;

nk_subimage_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;

nk_nine_slice_handle: function(p1: nk_handle; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_nine_slice_ptr: function(p1: Pointer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_nine_slice_id: function(p1: Integer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_nine_slice_is_sub9slice: function(const img: Pnk_nine_slice): Integer; cdecl;

nk_sub9slice_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_sub9slice_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_sub9slice_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;

nk_murmur_hash: function(const key: Pointer; len: Integer; seed: nk_hash): nk_hash; cdecl;

nk_triangle_from_direction: procedure(result: Pnk_vec2; r: nk_rect; pad_x: Single; pad_y: Single; p5: nk_heading); cdecl;

nk_vec2_: function(x: Single; y: Single): nk_vec2; cdecl;

nk_vec2i_: function(x: Integer; y: Integer): nk_vec2; cdecl;

nk_vec2v: function(const xy: PSingle): nk_vec2; cdecl;

nk_vec2iv: function(const xy: PInteger): nk_vec2; cdecl;

nk_get_null_rect: function(): nk_rect; cdecl;

nk_rect_: function(x: Single; y: Single; w: Single; h: Single): nk_rect; cdecl;

nk_recti_: function(x: Integer; y: Integer; w: Integer; h: Integer): nk_rect; cdecl;

nk_recta: function(pos: nk_vec2; size: nk_vec2): nk_rect; cdecl;

nk_rectv: function(const xywh: PSingle): nk_rect; cdecl;

nk_rectiv: function(const xywh: PInteger): nk_rect; cdecl;

nk_rect_pos: function(p1: nk_rect): nk_vec2; cdecl;

nk_rect_size: function(p1: nk_rect): nk_vec2; cdecl;

nk_strlen: function(const str: PUTF8Char): Integer; cdecl;

nk_stricmp: function(const s1: PUTF8Char; const s2: PUTF8Char): Integer; cdecl;

nk_stricmpn: function(const s1: PUTF8Char; const s2: PUTF8Char; n: Integer): Integer; cdecl;

nk_strtoi: function(const str: PUTF8Char; endptr: PPUTF8Char): Integer; cdecl;

nk_strtof: function(const str: PUTF8Char; endptr: PPUTF8Char): Single; cdecl;

nk_strtod: function(const str: PUTF8Char; endptr: PPUTF8Char): Double; cdecl;

nk_strfilter: function(const text: PUTF8Char; const regexp: PUTF8Char): Integer; cdecl;

nk_strmatch_fuzzy_string: function(const str: PUTF8Char; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;

nk_strmatch_fuzzy_text: function(const txt: PUTF8Char; txt_len: Integer; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;

nk_utf_decode: function(const p1: PUTF8Char; p2: Pnk_rune; p3: Integer): Integer; cdecl;

nk_utf_encode: function(p1: nk_rune; p2: PUTF8Char; p3: Integer): Integer; cdecl;

nk_utf_len: function(const p1: PUTF8Char; byte_len: Integer): Integer; cdecl;

nk_utf_at: function(const buffer: PUTF8Char; length: Integer; index: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;

nk_buffer_init: procedure(p1: Pnk_buffer; const p2: Pnk_allocator; size: nk_size); cdecl;

nk_buffer_init_fixed: procedure(p1: Pnk_buffer; memory: Pointer; size: nk_size); cdecl;

nk_buffer_info: procedure(p1: Pnk_memory_status; p2: Pnk_buffer); cdecl;

nk_buffer_push: procedure(p1: Pnk_buffer; &type: nk_buffer_allocation_type; const memory: Pointer; size: nk_size; align: nk_size); cdecl;

nk_buffer_mark: procedure(p1: Pnk_buffer; &type: nk_buffer_allocation_type); cdecl;

nk_buffer_reset: procedure(p1: Pnk_buffer; &type: nk_buffer_allocation_type); cdecl;

nk_buffer_clear: procedure(p1: Pnk_buffer); cdecl;

nk_buffer_free: procedure(p1: Pnk_buffer); cdecl;

nk_buffer_memory: function(p1: Pnk_buffer): Pointer; cdecl;

nk_buffer_memory_const: function(const p1: Pnk_buffer): Pointer; cdecl;

nk_buffer_total: function(p1: Pnk_buffer): nk_size; cdecl;

nk_str_init: procedure(p1: Pnk_str; const p2: Pnk_allocator; size: nk_size); cdecl;

nk_str_init_fixed: procedure(p1: Pnk_str; memory: Pointer; size: nk_size); cdecl;

nk_str_clear: procedure(p1: Pnk_str); cdecl;

nk_str_free: procedure(p1: Pnk_str); cdecl;

nk_str_append_text_char: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;

nk_str_append_str_char: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;

nk_str_append_text_utf8: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;

nk_str_append_str_utf8: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;

nk_str_append_text_runes: function(p1: Pnk_str; const p2: Pnk_rune; p3: Integer): Integer; cdecl;

nk_str_append_str_runes: function(p1: Pnk_str; const p2: Pnk_rune): Integer; cdecl;

nk_str_insert_at_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;

nk_str_insert_at_rune: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;

nk_str_insert_text_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;

nk_str_insert_str_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;

nk_str_insert_text_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;

nk_str_insert_str_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;

nk_str_insert_text_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune; p4: Integer): Integer; cdecl;

nk_str_insert_str_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune): Integer; cdecl;

nk_str_remove_chars: procedure(p1: Pnk_str; len: Integer); cdecl;

nk_str_remove_runes: procedure(str: Pnk_str; len: Integer); cdecl;

nk_str_delete_chars: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;

nk_str_delete_runes: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;

nk_str_at_char: function(p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;

nk_str_at_rune: function(p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;

nk_str_rune_at: function(const p1: Pnk_str; pos: Integer): nk_rune; cdecl;

nk_str_at_char_const: function(const p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;

nk_str_at_const: function(const p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;

nk_str_get: function(p1: Pnk_str): PUTF8Char; cdecl;

nk_str_get_const: function(const p1: Pnk_str): PUTF8Char; cdecl;

nk_str_len: function(p1: Pnk_str): Integer; cdecl;

nk_str_len_char: function(p1: Pnk_str): Integer; cdecl;

nk_filter_default: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_ascii: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_float: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_decimal: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_hex: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_oct: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_filter_binary: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

nk_textedit_init: procedure(p1: Pnk_text_edit; p2: Pnk_allocator; size: nk_size); cdecl;

nk_textedit_init_fixed: procedure(p1: Pnk_text_edit; memory: Pointer; size: nk_size); cdecl;

nk_textedit_free: procedure(p1: Pnk_text_edit); cdecl;

nk_textedit_text: procedure(p1: Pnk_text_edit; const p2: PUTF8Char; total_len: Integer); cdecl;

nk_textedit_delete: procedure(p1: Pnk_text_edit; where: Integer; len: Integer); cdecl;

nk_textedit_delete_selection: procedure(p1: Pnk_text_edit); cdecl;

nk_textedit_select_all: procedure(p1: Pnk_text_edit); cdecl;

nk_textedit_cut: function(p1: Pnk_text_edit): nk_bool; cdecl;

nk_textedit_paste: function(p1: Pnk_text_edit; const p2: PUTF8Char; len: Integer): nk_bool; cdecl;

nk_textedit_undo: procedure(p1: Pnk_text_edit); cdecl;

nk_textedit_redo: procedure(p1: Pnk_text_edit); cdecl;

nk_stroke_line: procedure(b: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; line_thickness: Single; p7: nk_color); cdecl;

nk_stroke_curve: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; p8: Single; p9: Single; line_thickness: Single; p11: nk_color); cdecl;

nk_stroke_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; line_thickness: Single; p5: nk_color); cdecl;

nk_stroke_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; line_thickness: Single; p4: nk_color); cdecl;

nk_stroke_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; line_thickness: Single; p8: nk_color); cdecl;

nk_stroke_triangle: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; line_thichness: Single; p9: nk_color); cdecl;

nk_stroke_polyline: procedure(p1: Pnk_command_buffer; points: PSingle; point_count: Integer; line_thickness: Single; col: nk_color); cdecl;

nk_stroke_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; line_thickness: Single; p5: nk_color); cdecl;

nk_fill_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; p4: nk_color); cdecl;

nk_fill_rect_multi_color: procedure(p1: Pnk_command_buffer; p2: nk_rect; left: nk_color; top: nk_color; right: nk_color; bottom: nk_color); cdecl;

nk_fill_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_color); cdecl;

nk_fill_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; p7: nk_color); cdecl;

nk_fill_triangle: procedure(p1: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single; p8: nk_color); cdecl;

nk_fill_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; p4: nk_color); cdecl;

nk_draw_image: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_image; p4: nk_color); cdecl;

nk_draw_nine_slice: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_nine_slice; p4: nk_color); cdecl;

nk_draw_text: procedure(p1: Pnk_command_buffer; p2: nk_rect; const text: PUTF8Char; len: Integer; const p5: Pnk_user_font; p6: nk_color; p7: nk_color); cdecl;

nk_push_scissor: procedure(p1: Pnk_command_buffer; p2: nk_rect); cdecl;

nk_push_custom: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_command_custom_callback; usr: nk_handle); cdecl;

nk_input_has_mouse_click: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;

nk_input_has_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;

nk_input_has_mouse_click_down_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect; down: nk_bool): nk_bool; cdecl;

nk_input_is_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;

nk_input_is_mouse_click_down_in_rect: function(const i: Pnk_input; id: nk_buttons; b: nk_rect; down: nk_bool): nk_bool; cdecl;

nk_input_any_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;

nk_input_is_mouse_prev_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;

nk_input_is_mouse_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;

nk_input_mouse_clicked: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;

nk_input_is_mouse_down: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;

nk_input_is_mouse_pressed: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;

nk_input_is_mouse_released: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;

nk_input_is_key_pressed: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;

nk_input_is_key_released: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;

nk_input_is_key_down: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;

nk_style_item_color_: function(p1: nk_color): nk_style_item; cdecl;

nk_style_item_image_: function(img: nk_image): nk_style_item; cdecl;

nk_style_item_nine_slice_: function(slice: nk_nine_slice): nk_style_item; cdecl;

nk_style_item_hide: function(): nk_style_item; cdecl;

nk_sdlsurface_init: function(fb: PSDL_Surface; fontSize: Single): Psdlsurface_context; cdecl;

nk_sdlsurface_render: procedure(const sdlsurface: Psdlsurface_context; const clear: nk_color; const enable_clear: Byte); cdecl;

nk_sdlsurface_shutdown: procedure(sdlsurface: Psdlsurface_context); cdecl;

nk_sdl_handle_event: function(ctx: Pnk_context; evt: PSDL_Event): Integer; cdecl;

implementation

{$R SDL.res}

uses
  System.SysUtils,
  System.Classes,
  WinAPI.Windows;

{ --------------------------------------------------------------------------- }

{ *
  * Memory DLL loading code
  * ------------------------
  *
  * Original C Code
  * Memory DLL loading code
  * Version 0.0.4
  *
  * Copyright (c) 2004-2015 by Joachim Bauch / mail@joachim-bauch.de
  * http://www.joachim-bauch.de
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS IS" basis,
  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  * for the specific language governing rights and limitations under the
  * License.
  *
  * The Original Code is MemoryModule.c
  *
  * The Initial Developer of the Original Code is Joachim Bauch.
  *
  * Portions created by Joachim Bauch are Copyright (C) 2004-2015
  * Joachim Bauch. All Rights Reserved.
  *
  * ================== MemoryModule "Conversion to Delphi" ==================
  *
  * Copyright (c) 2015 by Fr0sT / https://github.com/Fr0sT-Brutal
  *
  * Initially based on the code by:
  *   Copyright (c) 2005 - 2006 by Martin Offenwanger / coder@dsplayer.de / http://www.dsplayer.de
  *   Carlo Pasolini / cdpasop@hotmail.it / http://pasotech.altervista.org
  *
  * NOTE
  *   This code is Delphi translation of original C code taken from https://github.com/fancycode/MemoryModule
  *     (commit dc173ca from Mar 1, 2015).
  * }
type
  TMemoryModule = Pointer;

  {$IF NOT DECLARED(IMAGE_BASE_RELOCATION)}
  type
  {$ALIGN 4}
  IMAGE_BASE_RELOCATION = record
    VirtualAddress: DWORD;
    SizeOfBlock: DWORD;
  end;
  {$ALIGN ON}
  PIMAGE_BASE_RELOCATION = ^IMAGE_BASE_RELOCATION;
  {$IFEND}
  {$IF NOT DECLARED(PIMAGE_DATA_DIRECTORY)}
  type PIMAGE_DATA_DIRECTORY = ^IMAGE_DATA_DIRECTORY;
  {$IFEND}
  {$IF NOT DECLARED(PIMAGE_SECTION_HEADER)}
  type PIMAGE_SECTION_HEADER = ^IMAGE_SECTION_HEADER;
  {$IFEND}
  {$IF NOT DECLARED(PIMAGE_EXPORT_DIRECTORY)}
  type PIMAGE_EXPORT_DIRECTORY = ^IMAGE_EXPORT_DIRECTORY;
  {$IFEND}
  {$IF NOT DECLARED(PIMAGE_DOS_HEADER)}
  type PIMAGE_DOS_HEADER = ^IMAGE_DOS_HEADER;
  {$IFEND}
  {$IF NOT DECLARED(PIMAGE_NT_HEADERS)}
  type PIMAGE_NT_HEADERS = ^IMAGE_NT_HEADERS;
  {$IFEND}
  {$IF NOT DECLARED(PUINT_PTR)}
  type PUINT_PTR = ^UINT_PTR;
  {$IFEND}

const
  IMAGE_REL_BASED_ABSOLUTE = 0;
  IMAGE_REL_BASED_HIGHLOW = 3;
  IMAGE_REL_BASED_DIR64 = 10;

{$IFDEF CPUX64}
type
  PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64;

const
  IMAGE_ORDINAL_FLAG = IMAGE_ORDINAL_FLAG64;
{$ENDIF}

const
  IMAGE_SIZEOF_BASE_RELOCATION = SizeOf(IMAGE_BASE_RELOCATION);
  {$IFDEF CPUX64}
  HOST_MACHINE = IMAGE_FILE_MACHINE_AMD64;
  {$ELSE}
  HOST_MACHINE = IMAGE_FILE_MACHINE_I386;
  {$ENDIF}

type
  TMemoryModuleRec = record
    Headers: PIMAGE_NT_HEADERS;
    CodeBase: Pointer;
    Modules: array of HMODULE;
    NumModules: Integer;
    Initialized: Boolean;
    IsRelocated: Boolean;
    PageSize: DWORD;
  end;

  PMemoryModule = ^TMemoryModuleRec;

  TDllEntryProc = function(hinstDLL: HINST; fdwReason: DWORD; lpReserved: Pointer): BOOL; stdcall;

  TSectionFinalizeData = record
    Address: Pointer;
    AlignedAddress: Pointer;
    Size: SIZE_T;
    Characteristics: DWORD;
    Last: Boolean;
  end;

function GetProcAddress_Internal(hModule: HMODULE; lpProcName: LPCSTR): FARPROC; stdcall; external kernel32 name 'GetProcAddress';
function LoadLibraryA_Internal(lpLibFileName: LPCSTR): HMODULE; stdcall; external kernel32 name 'LoadLibraryA';
function FreeLibrary_Internal(hLibModule: HMODULE): BOOL; stdcall; external kernel32 name 'FreeLibrary';

procedure Abort;
begin
  raise TObject.Create;
end;

function StrComp(const Str1, Str2: PAnsiChar): Integer;
var
  P1, P2: PAnsiChar;
begin
  P1 := Str1;
  P2 := Str2;
  while True do
  begin
    if (P1^ <> P2^) or (P1^ = #0) then
      Exit(Ord(P1^) - Ord(P2^));
    Inc(P1);
    Inc(P2);
  end;
end;

{$IF NOT DECLARED(IMAGE_ORDINAL)}
function IMAGE_ORDINAL(Ordinal: NativeUInt): Word; inline;
begin
  Result := Ordinal and $FFFF;
end;
{$IFEND}

{$IF NOT DECLARED(IMAGE_SNAP_BY_ORDINAL)}
function IMAGE_SNAP_BY_ORDINAL(Ordinal: NativeUInt): Boolean; inline;
begin
  Result := ((Ordinal and IMAGE_ORDINAL_FLAG) <> 0);
end;
{$IFEND}

function GET_HEADER_DICTIONARY(Module: PMemoryModule; Idx: Integer): PIMAGE_DATA_DIRECTORY;
begin
  Result := PIMAGE_DATA_DIRECTORY(@(Module.Headers.OptionalHeader.DataDirectory[Idx]));
end;

function ALIGN_DOWN(Address: Pointer; Alignment: DWORD): Pointer;
begin
  Result := Pointer(UIntPtr(Address) and not (Alignment - 1));
end;

function CopySections(data: Pointer; old_headers: PIMAGE_NT_HEADERS; module: PMemoryModule): Boolean;
var
  i, Size: Integer;
  CodeBase: Pointer;
  dest: Pointer;
  Section: PIMAGE_SECTION_HEADER;
begin
  CodeBase := Module.CodeBase;
  Section := PIMAGE_SECTION_HEADER(IMAGE_FIRST_SECTION(Module.Headers{$IFNDEF FPC}^{$ENDIF}));
  for i := 0 to Module.Headers.FileHeader.NumberOfSections - 1 do
  begin
    // Section doesn't contain data in the dll itself, but may define
    // uninitialized Data
    if Section.SizeOfRawData = 0 then
    begin
      Size := Old_headers.OptionalHeader.SectionAlignment;
      if Size > 0 then
      begin
        dest := VirtualAlloc(PByte(CodeBase) + Section.VirtualAddress,
                             Size,
                             MEM_COMMIT,
                             PAGE_READWRITE);
        if dest = nil then
          Exit(False);
        // Always use position from file to support alignments smaller
        // than page Size.
        dest := PByte(CodeBase) + Section.VirtualAddress;
        Section.Misc.PhysicalAddress := DWORD(dest);
        ZeroMemory(dest, Size);
      end;
      // Section is empty
      Inc(Section);
      Continue;
    end; // if
    // commit memory block and copy Data from dll
    dest := VirtualAlloc(PByte(CodeBase) + Section.VirtualAddress,
                         Section.SizeOfRawData,
                         MEM_COMMIT,
                         PAGE_READWRITE);
    if dest = nil then
      Exit(False);
    // Always use position from file to support alignments smaller
    // than page Size.
    dest := PByte(CodeBase) + Section.VirtualAddress;
    CopyMemory(dest, PByte(Data) + Section.PointerToRawData, Section.SizeOfRawData);
    Section.Misc.PhysicalAddress := DWORD(dest);
    Inc(Section);
  end; // for
  Result := True;
end;

// Protection flags for memory pages (Executable, Readable, Writeable)
const
  ProtectionFlags: array[Boolean, Boolean, Boolean] of DWORD =
  (
    (
        // not executable
        (PAGE_NOACCESS, PAGE_WRITECOPY),
        (PAGE_READONLY, PAGE_READWRITE)
    ),
    (
        // executable
        (PAGE_EXECUTE, PAGE_EXECUTE_WRITECOPY),
        (PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE)
    )
);

function GetRealSectionSize(Module: PMemoryModule; Section: PIMAGE_SECTION_HEADER): DWORD;
begin
  Result := Section.SizeOfRawData;
  if Result = 0 then
    if (Section.Characteristics and IMAGE_SCN_CNT_INITIALIZED_DATA) <> 0 then
      Result := Module.Headers.OptionalHeader.SizeOfInitializedData
    else if (Section.Characteristics and IMAGE_SCN_CNT_UNINITIALIZED_DATA) <> 0 then
      Result := Module.Headers.OptionalHeader.SizeOfUninitializedData;
end;

function FinalizeSection(Module: PMemoryModule; const SectionData: TSectionFinalizeData): Boolean;
var
  protect, oldProtect: DWORD;
  executable, readable, writeable: Boolean;
begin
  if SectionData.Size = 0 then
    Exit(True);
  if (SectionData.Characteristics and IMAGE_SCN_MEM_DISCARDABLE) <> 0 then
  begin
    // Section is not needed any more and can safely be freed
    if (SectionData.Address = SectionData.AlignedAddress) and
       ( SectionData.Last or
         (Module.Headers.OptionalHeader.SectionAlignment = Module.PageSize) or
         (SectionData.Size mod Module.PageSize = 0)
       ) then
         // Only allowed to decommit whole pages
         VirtualFree(SectionData.Address, SectionData.Size, MEM_DECOMMIT);
    Exit(True);
  end;
  // determine protection flags based on Characteristics
  executable := (SectionData.Characteristics and IMAGE_SCN_MEM_EXECUTE) <> 0;
  readable   := (SectionData.Characteristics and IMAGE_SCN_MEM_READ) <> 0;
  writeable  := (SectionData.Characteristics and IMAGE_SCN_MEM_WRITE) <> 0;
  protect := ProtectionFlags[executable][readable][writeable];
  if (SectionData.Characteristics and IMAGE_SCN_MEM_NOT_CACHED) <> 0 then
    protect := protect or PAGE_NOCACHE;
  // change memory access flags
  Result := VirtualProtect(SectionData.Address, SectionData.Size, protect, oldProtect);
end;

function FinalizeSections(Module: PMemoryModule): Boolean;
var
  i: Integer;
  Section: PIMAGE_SECTION_HEADER;
  imageOffset: UIntPtr;
  SectionData: TSectionFinalizeData;
  sectionAddress, AlignedAddress: Pointer;
  sectionSize: DWORD;
begin
  Section := PIMAGE_SECTION_HEADER(IMAGE_FIRST_SECTION(Module.Headers{$IFNDEF FPC}^{$ENDIF}));
  {$IFDEF CPUX64}
  imageOffset := (NativeUInt(Module.CodeBase) and $ffffffff00000000);
  {$ELSE}
  imageOffset := 0;
  {$ENDIF}
  SectionData.Address := Pointer(UIntPtr(Section.Misc.PhysicalAddress) or imageOffset);
  SectionData.AlignedAddress := ALIGN_DOWN(SectionData.Address, Module.PageSize);
  SectionData.Size := GetRealSectionSize(Module, Section);
  SectionData.Characteristics := Section.Characteristics;
  SectionData.Last := False;
  Inc(Section);
  // loop through all sections and change access flags
  for i := 1 to Module.Headers.FileHeader.NumberOfSections - 1 do
  begin
    sectionAddress := Pointer(UIntPtr(Section.Misc.PhysicalAddress) or imageOffset);
    AlignedAddress := ALIGN_DOWN(SectionData.Address, Module.PageSize);
    sectionSize := GetRealSectionSize(Module, Section);
    // Combine access flags of all sections that share a page
    // TODO(fancycode): We currently share flags of a trailing large Section
    //   with the page of a first small Section. This should be optimized.
    if (SectionData.AlignedAddress = AlignedAddress) or
       (PByte(SectionData.Address) + SectionData.Size > PByte(AlignedAddress)) then
    begin
      // Section shares page with previous
      if (Section.Characteristics and IMAGE_SCN_MEM_DISCARDABLE = 0) or
         (SectionData.Characteristics and IMAGE_SCN_MEM_DISCARDABLE = 0) then
        SectionData.Characteristics := (SectionData.Characteristics or Section.Characteristics) and not IMAGE_SCN_MEM_DISCARDABLE
      else
        SectionData.Characteristics := SectionData.Characteristics or Section.Characteristics;
      SectionData.Size := PByte(sectionAddress) + sectionSize - PByte(SectionData.Address);
      Inc(Section);
      Continue;
    end;
    if not FinalizeSection(Module, SectionData) then
      Exit(False);
    SectionData.Address := sectionAddress;
    SectionData.AlignedAddress := AlignedAddress;
    SectionData.Size := sectionSize;
    SectionData.Characteristics := Section.Characteristics;
    Inc(Section);
  end; // for
  SectionData.Last := True;
  if not FinalizeSection(Module, SectionData) then
    Exit(False);
  Result := True;
end;

function ExecuteTLS(Module: PMemoryModule): Boolean;
var
  CodeBase: Pointer;
  directory: PIMAGE_DATA_DIRECTORY;
  tls: PIMAGE_TLS_DIRECTORY;
  callback: PPointer; // =^PIMAGE_TLS_CALLBACK;
  // TLS callback pointers are VA's (ImageBase included) so if the module resides at
  // the other ImageBage they become invalid. This routine relocates them to the
  // actual ImageBase.
  // The case seem to happen with DLLs only and they rarely use TLS callbacks.
  // Moreover, they probably don't work at all when using DLL dynamically which is
  // the case in our code.
  function FixPtr(OldPtr: Pointer): Pointer;
  begin
    Result := Pointer(NativeUInt(OldPtr) - Module.Headers.OptionalHeader.ImageBase + NativeUInt(CodeBase));
  end;
begin
  Result := True;
  CodeBase := Module.CodeBase;
  directory := GET_HEADER_DICTIONARY(Module, IMAGE_DIRECTORY_ENTRY_TLS);
  if directory.VirtualAddress = 0 then
    Exit;
  tls := PIMAGE_TLS_DIRECTORY(PByte(CodeBase) + directory.VirtualAddress);
  // Delphi syntax is quite awkward when dealing with proc pointers so we have to
  // use casts to untyped pointers
  callback := Pointer(tls.AddressOfCallBacks);
  if callback <> nil then
  begin
    callback := FixPtr(callback);
    while callback^ <> nil do
    begin
      PIMAGE_TLS_CALLBACK(FixPtr(callback^))(CodeBase, DLL_PROCESS_ATTACH, nil);
      Inc(callback);
    end;
  end;
end;

function PerformBaseRelocation(Module: PMemoryModule; Delta: NativeInt): Boolean;
var
  i: Cardinal;
  CodeBase: Pointer;
  directory: PIMAGE_DATA_DIRECTORY;
  relocation: PIMAGE_BASE_RELOCATION;
  dest: Pointer;
  relInfo: ^UInt16;
  patchAddrHL: PDWORD;
  {$IFDEF CPUX64}
  patchAddr64: PULONGLONG;
  {$ENDIF}
  relType, offset: Integer;
begin
  CodeBase := Module.CodeBase;
  directory := GET_HEADER_DICTIONARY(Module, IMAGE_DIRECTORY_ENTRY_BASERELOC);
  if directory.Size = 0 then
    Exit(Delta = 0);
  relocation := PIMAGE_BASE_RELOCATION(PByte(CodeBase) + directory.VirtualAddress);
  while relocation.VirtualAddress > 0 do
  begin
    dest := Pointer(PByte(CodeBase) + relocation.VirtualAddress);
    relInfo := Pointer(PByte(relocation) + IMAGE_SIZEOF_BASE_RELOCATION);
    for i := 0 to Trunc(((relocation.SizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2)) - 1 do
    begin
      // the upper 4 bits define the type of relocation
      relType := relInfo^ shr 12;
      // the lower 12 bits define the offset
      offset := relInfo^ and $FFF;
      case relType of
        IMAGE_REL_BASED_ABSOLUTE:
          // skip relocation
          ;
        IMAGE_REL_BASED_HIGHLOW:
          begin
            // change complete 32 bit address
            patchAddrHL := Pointer(PByte(dest) + offset);
            Inc(patchAddrHL^, Delta);
          end;
        {$IFDEF CPUX64}
        IMAGE_REL_BASED_DIR64:
          begin
            patchAddr64 := Pointer(PByte(dest) + offset);
            Inc(patchAddr64^, Delta);
          end;
        {$ENDIF}
      end;
      Inc(relInfo);
    end; // for
    // advance to next relocation block
    relocation := PIMAGE_BASE_RELOCATION(PByte(relocation) + relocation.SizeOfBlock);
  end; // while
  Result := True;
end;

function BuildImportTable(Module: PMemoryModule): Boolean; stdcall;
var
  CodeBase: Pointer;
  directory: PIMAGE_DATA_DIRECTORY;
  importDesc: PIMAGE_IMPORT_DESCRIPTOR;
  thunkRef: PUINT_PTR;
  funcRef: ^FARPROC;
  handle: HMODULE;
  thunkData: PIMAGE_IMPORT_BY_NAME;
begin
  CodeBase := Module.CodeBase;
  Result := True;
  directory := GET_HEADER_DICTIONARY(Module, IMAGE_DIRECTORY_ENTRY_IMPORT);
  if directory.Size = 0 then
    Exit(True);
  importDesc := PIMAGE_IMPORT_DESCRIPTOR(PByte(CodeBase) + directory.VirtualAddress);
  while (not IsBadReadPtr(importDesc, SizeOf(IMAGE_IMPORT_DESCRIPTOR))) and (importDesc.Name <> 0) do
  begin
    handle := LoadLibraryA_Internal(PAnsiChar(PByte(CodeBase) + importDesc.Name));
    if handle = 0 then
    begin
      SetLastError(ERROR_MOD_NOT_FOUND);
      Result := False;
      Break;
    end;
    try
      SetLength(Module.Modules, Module.NumModules + 1);
    except
      FreeLibrary_Internal(handle);
      SetLastError(ERROR_OUTOFMEMORY);
      Result := False;
      Break;
    end;
    Module.Modules[Module.NumModules] := handle;
    Inc(Module.NumModules);
    if importDesc.OriginalFirstThunk <> 0 then
    begin
      thunkRef := Pointer(PByte(CodeBase) + importDesc.OriginalFirstThunk);
      funcRef := Pointer(PByte(CodeBase) + importDesc.FirstThunk);
    end
    else
    begin
      // no hint table
      thunkRef := Pointer(PByte(CodeBase) + importDesc.FirstThunk);
      funcRef := Pointer(PByte(CodeBase) + importDesc.FirstThunk);
    end;
    while thunkRef^ <> 0 do
    begin
      if IMAGE_SNAP_BY_ORDINAL(thunkRef^) then
        funcRef^ := GetProcAddress_Internal(handle, PAnsiChar(IMAGE_ORDINAL(thunkRef^)))
      else
      begin
        thunkData := PIMAGE_IMPORT_BY_NAME(PByte(CodeBase) + thunkRef^);
        funcRef^ := GetProcAddress_Internal(handle, PAnsiChar(@(thunkData.Name)));
      end;
      if funcRef^ = nil then
      begin
        Result := False;
        Break;
      end;
      Inc(funcRef);
      Inc(thunkRef);
    end; // while
    if not Result then
    begin
      FreeLibrary_Internal(handle);
      SetLastError(ERROR_PROC_NOT_FOUND);
      Break;
    end;
    Inc(importDesc);
  end; // while
end;

procedure MemoryFreeLibrary(Module: TMemoryModule); stdcall;
var
  i: Integer;
  DllEntry: TDllEntryProc;
  mmodule: PMemoryModule;
begin
  if Module = nil then Exit;
  mmodule := PMemoryModule(Module);
  if mmodule.Initialized then
  begin
    // notify library about detaching from process
    @DllEntry := Pointer(PByte(mmodule.CodeBase) + mmodule.Headers.OptionalHeader.AddressOfEntryPoint);
    DllEntry(HINST(mmodule.CodeBase), DLL_PROCESS_DETACH, nil);
  end;
  if Length(mmodule.Modules) <> 0 then
  begin
    // free previously opened libraries
    for i := 0 to mmodule.NumModules - 1 do
      if mmodule.Modules[i] <> 0 then
        FreeLibrary_Internal(mmodule.Modules[i]);
    SetLength(mmodule.Modules, 0);
  end;
  if mmodule.CodeBase <> nil then
    // release memory of library
    VirtualFree(mmodule.CodeBase, 0, MEM_RELEASE);
  HeapFree(GetProcessHeap(), 0, mmodule);
end;

function MemoryLoadLibary(Data: Pointer): TMemoryModule; stdcall;
var
  dos_header: PIMAGE_DOS_HEADER;
  old_header: PIMAGE_NT_HEADERS;
  code, Headers: Pointer;
  locationdelta: NativeUInt;
  sysInfo: SYSTEM_INFO;
  DllEntry: TDllEntryProc;
  successfull: Boolean;
  Module: PMemoryModule;
begin
  Result := nil; Module := nil;
  try
    dos_header := PIMAGE_DOS_HEADER(Data);
    if (dos_header.e_magic <> IMAGE_DOS_SIGNATURE) then
    begin
      SetLastError(ERROR_BAD_EXE_FORMAT);
      Exit;
    end;
    // old_header = (PIMAGE_NT_HEADERS)&((const unsigned char * )(Data))[dos_header->e_lfanew];
    old_header := PIMAGE_NT_HEADERS(PByte(Data) + dos_header._lfanew);
    if old_header.Signature <> IMAGE_NT_SIGNATURE then
    begin
      SetLastError(ERROR_BAD_EXE_FORMAT);
      Exit;
    end;
    {$IFDEF CPUX64}
    if old_header.FileHeader.Machine <> IMAGE_FILE_MACHINE_AMD64 then
    {$ELSE}
    if old_header.FileHeader.Machine <> IMAGE_FILE_MACHINE_I386 then
    {$ENDIF}
    begin
      SetLastError(ERROR_BAD_EXE_FORMAT);
      Exit;
    end;
    if (old_header.OptionalHeader.SectionAlignment and 1) <> 0 then
    begin
      // Only support section alignments that are a multiple of 2
      SetLastError(ERROR_BAD_EXE_FORMAT);
      Exit;
    end;
    // reserve memory for image of library
    // XXX: is it correct to commit the complete memory region at once?
    //      calling DllEntry raises an exception if we don't...
    code := VirtualAlloc(Pointer(old_header.OptionalHeader.ImageBase),
                         old_header.OptionalHeader.SizeOfImage,
                         MEM_RESERVE or MEM_COMMIT,
                         PAGE_READWRITE);
    if code = nil then
    begin
      // try to allocate memory at arbitrary position
      code := VirtualAlloc(nil,
                           old_header.OptionalHeader.SizeOfImage,
                           MEM_RESERVE or MEM_COMMIT,
                           PAGE_READWRITE);
      if code = nil then
      begin
        SetLastError(ERROR_OUTOFMEMORY);
        Exit;
      end;
    end;
    Module := PMemoryModule(HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, SizeOf(TMemoryModuleRec)));
    if Module = nil then
    begin
      VirtualFree(code, 0, MEM_RELEASE);
      SetLastError(ERROR_OUTOFMEMORY);
      Exit;
    end;
    // memory is zeroed by HeapAlloc
    Module.CodeBase := code;
    GetNativeSystemInfo({$IFDEF FPC}@{$ENDIF}sysInfo);
    Module.PageSize := sysInfo.dwPageSize;
    // commit memory for Headers
    Headers := VirtualAlloc(code,
                            old_header.OptionalHeader.SizeOfHeaders,
                            MEM_COMMIT,
                            PAGE_READWRITE);
    // copy PE header to code
    CopyMemory(Headers, dos_header, old_header.OptionalHeader.SizeOfHeaders);
    // result->Headers = (PIMAGE_NT_HEADERS)&((const unsigned char *)(Headers))[dos_header->e_lfanew];
    Module.Headers := PIMAGE_NT_HEADERS(PByte(Headers) + dos_header._lfanew);
    // copy sections from DLL file block to new memory location
    if not CopySections(Data, old_header, Module) then
      Abort;
    // adjust base address of imported data
    locationdelta := NativeUInt(code) - old_header.OptionalHeader.ImageBase;
    if locationdelta <> 0 then
      Module.IsRelocated := PerformBaseRelocation(Module, locationdelta)
    else
      Module.IsRelocated := True;
    // load required dlls and adjust function table of imports
    if not BuildImportTable(Module) then
      Abort;
    // mark memory pages depending on Section Headers and release
    // sections that are marked as "discardable"
    if not FinalizeSections(Module) then
      Abort;
    // TLS callbacks are executed BEFORE the main loading
    if not ExecuteTLS(Module) then
      Abort;
    // get entry point of loaded library
    if Module.Headers.OptionalHeader.AddressOfEntryPoint <> 0 then
    begin
      @DllEntry := Pointer(PByte(code) + Module.Headers.OptionalHeader.AddressOfEntryPoint);
      // notify library about attaching to process
      successfull := DllEntry(HINST(code), DLL_PROCESS_ATTACH, nil);
      if not successfull then
      begin
        SetLastError(ERROR_DLL_INIT_FAILED);
        Abort;
      end;
      Module.Initialized := True;
    end;
    Result := Module;
  except
    // cleanup
    MemoryFreeLibrary(Module);
    Exit;
  end;
end;

function MemoryGetProcAddress(Module: TMemoryModule; const Name: PAnsiChar): Pointer; stdcall;
var
  CodeBase: Pointer;
  Idx: Integer;
  i: DWORD;
  nameRef: PDWORD;
  ordinal: PWord;
  exportDir: PIMAGE_EXPORT_DIRECTORY;
  directory: PIMAGE_DATA_DIRECTORY;
  temp: PDWORD;
  mmodule: PMemoryModule;
begin
  Result := nil;
  mmodule := PMemoryModule(Module);
  CodeBase := mmodule.CodeBase;
  directory := GET_HEADER_DICTIONARY(mmodule, IMAGE_DIRECTORY_ENTRY_EXPORT);

  // no export table found
  if directory.Size = 0 then
  begin
    SetLastError(ERROR_PROC_NOT_FOUND);
    Exit;
  end;

  exportDir := PIMAGE_EXPORT_DIRECTORY(PByte(CodeBase) + directory.VirtualAddress);
  // DLL doesn't export anything
  if (exportDir.NumberOfNames = 0) or (exportDir.NumberOfFunctions = 0) then
  begin
    SetLastError(ERROR_PROC_NOT_FOUND);
    Exit;
  end;

  // search function name in list of exported names
  nameRef := Pointer(PByte(CodeBase) + exportDir.AddressOfNames);
  ordinal := Pointer(PByte(CodeBase) + exportDir.AddressOfNameOrdinals);
  Idx := -1;
  for i := 0 to exportDir.NumberOfNames - 1 do
  begin
    if StrComp(Name, PAnsiChar(PByte(CodeBase) + nameRef^)) = 0 then
    begin
      Idx := ordinal^;
      Break;
    end;
    Inc(nameRef);
    Inc(ordinal);
  end;

  // exported symbol not found
  if (Idx = -1) then
  begin
    SetLastError(ERROR_PROC_NOT_FOUND);
    Exit;
  end;

  // name <-> ordinal number don't match
  if (DWORD(Idx) > exportDir.NumberOfFunctions) then
  begin
    SetLastError(ERROR_PROC_NOT_FOUND);
    Exit;
  end;

  // AddressOfFunctions contains the RVAs to the "real" functions     {}
  temp := Pointer(PByte(CodeBase) + exportDir.AddressOfFunctions + Idx*4);
  Result := Pointer(PByte(CodeBase) + temp^);
end;

var
  LDllHandle: Pointer = nil;

procedure LoadDLL;
var
  LStream: TResourceStream;
begin
  LStream := TResourceStream.Create(HInstance, 'RESDATA', RT_RCDATA);
  try
    LDllHandle := MemoryLoadLibary(LStream.Memory);

    IMG_Init := MemoryGetProcAddress(LDllHandle, 'IMG_Init');
    IMG_isBMP := MemoryGetProcAddress(LDllHandle, 'IMG_isBMP');
    IMG_isCUR := MemoryGetProcAddress(LDllHandle, 'IMG_isCUR');
    IMG_isGIF := MemoryGetProcAddress(LDllHandle, 'IMG_isGIF');
    IMG_isICO := MemoryGetProcAddress(LDllHandle, 'IMG_isICO');
    IMG_isJPG := MemoryGetProcAddress(LDllHandle, 'IMG_isJPG');
    IMG_isLBM := MemoryGetProcAddress(LDllHandle, 'IMG_isLBM');
    IMG_isPCX := MemoryGetProcAddress(LDllHandle, 'IMG_isPCX');
    IMG_isPNG := MemoryGetProcAddress(LDllHandle, 'IMG_isPNG');
    IMG_isPNM := MemoryGetProcAddress(LDllHandle, 'IMG_isPNM');
    IMG_isSVG := MemoryGetProcAddress(LDllHandle, 'IMG_isSVG');
    IMG_isTIF := MemoryGetProcAddress(LDllHandle, 'IMG_isTIF');
    IMG_isWEBP := MemoryGetProcAddress(LDllHandle, 'IMG_isWEBP');
    IMG_isXCF := MemoryGetProcAddress(LDllHandle, 'IMG_isXCF');
    IMG_isXPM := MemoryGetProcAddress(LDllHandle, 'IMG_isXPM');
    IMG_isXV := MemoryGetProcAddress(LDllHandle, 'IMG_isXV');
    IMG_Linked_Version := MemoryGetProcAddress(LDllHandle, 'IMG_Linked_Version');
    IMG_Load := MemoryGetProcAddress(LDllHandle, 'IMG_Load');
    IMG_Load_RW := MemoryGetProcAddress(LDllHandle, 'IMG_Load_RW');
    IMG_LoadBMP_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadBMP_RW');
    IMG_LoadCUR_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadCUR_RW');
    IMG_LoadGIF_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadGIF_RW');
    IMG_LoadICO_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadICO_RW');
    IMG_LoadJPG_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadJPG_RW');
    IMG_LoadLBM_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadLBM_RW');
    IMG_LoadPCX_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadPCX_RW');
    IMG_LoadPNG_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadPNG_RW');
    IMG_LoadPNM_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadPNM_RW');
    IMG_LoadSVG_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadSVG_RW');
    IMG_LoadTexture := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTexture');
    IMG_LoadTexture_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTexture_RW');
    IMG_LoadTextureTyped_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTextureTyped_RW');
    IMG_LoadTGA_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTGA_RW');
    IMG_LoadTIF_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTIF_RW');
    IMG_LoadTyped_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadTyped_RW');
    IMG_LoadWEBP_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadWEBP_RW');
    IMG_LoadXCF_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadXCF_RW');
    IMG_LoadXPM_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadXPM_RW');
    IMG_LoadXV_RW := MemoryGetProcAddress(LDllHandle, 'IMG_LoadXV_RW');
    IMG_Quit := MemoryGetProcAddress(LDllHandle, 'IMG_Quit');
    IMG_ReadXPMFromArray := MemoryGetProcAddress(LDllHandle, 'IMG_ReadXPMFromArray');
    IMG_SaveJPG := MemoryGetProcAddress(LDllHandle, 'IMG_SaveJPG');
    IMG_SaveJPG_RW := MemoryGetProcAddress(LDllHandle, 'IMG_SaveJPG_RW');
    IMG_SavePNG := MemoryGetProcAddress(LDllHandle, 'IMG_SavePNG');
    IMG_SavePNG_RW := MemoryGetProcAddress(LDllHandle, 'IMG_SavePNG_RW');
    Mix_AllocateChannels := MemoryGetProcAddress(LDllHandle, 'Mix_AllocateChannels');
    Mix_ChannelFinished := MemoryGetProcAddress(LDllHandle, 'Mix_ChannelFinished');
    Mix_CloseAudio := MemoryGetProcAddress(LDllHandle, 'Mix_CloseAudio');
    Mix_EachSoundFont := MemoryGetProcAddress(LDllHandle, 'Mix_EachSoundFont');
    Mix_ExpireChannel := MemoryGetProcAddress(LDllHandle, 'Mix_ExpireChannel');
    Mix_FadeInChannelTimed := MemoryGetProcAddress(LDllHandle, 'Mix_FadeInChannelTimed');
    Mix_FadeInMusic := MemoryGetProcAddress(LDllHandle, 'Mix_FadeInMusic');
    Mix_FadeInMusicPos := MemoryGetProcAddress(LDllHandle, 'Mix_FadeInMusicPos');
    Mix_FadeOutChannel := MemoryGetProcAddress(LDllHandle, 'Mix_FadeOutChannel');
    Mix_FadeOutGroup := MemoryGetProcAddress(LDllHandle, 'Mix_FadeOutGroup');
    Mix_FadeOutMusic := MemoryGetProcAddress(LDllHandle, 'Mix_FadeOutMusic');
    Mix_FadingChannel := MemoryGetProcAddress(LDllHandle, 'Mix_FadingChannel');
    Mix_FadingMusic := MemoryGetProcAddress(LDllHandle, 'Mix_FadingMusic');
    Mix_FreeChunk := MemoryGetProcAddress(LDllHandle, 'Mix_FreeChunk');
    Mix_FreeMusic := MemoryGetProcAddress(LDllHandle, 'Mix_FreeMusic');
    Mix_GetChunk := MemoryGetProcAddress(LDllHandle, 'Mix_GetChunk');
    Mix_GetChunkDecoder := MemoryGetProcAddress(LDllHandle, 'Mix_GetChunkDecoder');
    Mix_GetMusicDecoder := MemoryGetProcAddress(LDllHandle, 'Mix_GetMusicDecoder');
    Mix_GetMusicHookData := MemoryGetProcAddress(LDllHandle, 'Mix_GetMusicHookData');
    Mix_GetMusicType := MemoryGetProcAddress(LDllHandle, 'Mix_GetMusicType');
    Mix_GetNumChunkDecoders := MemoryGetProcAddress(LDllHandle, 'Mix_GetNumChunkDecoders');
    Mix_GetNumMusicDecoders := MemoryGetProcAddress(LDllHandle, 'Mix_GetNumMusicDecoders');
    Mix_GetSoundFonts := MemoryGetProcAddress(LDllHandle, 'Mix_GetSoundFonts');
    Mix_GetSynchroValue := MemoryGetProcAddress(LDllHandle, 'Mix_GetSynchroValue');
    Mix_GroupAvailable := MemoryGetProcAddress(LDllHandle, 'Mix_GroupAvailable');
    Mix_GroupChannel := MemoryGetProcAddress(LDllHandle, 'Mix_GroupChannel');
    Mix_GroupChannels := MemoryGetProcAddress(LDllHandle, 'Mix_GroupChannels');
    Mix_GroupCount := MemoryGetProcAddress(LDllHandle, 'Mix_GroupCount');
    Mix_GroupNewer := MemoryGetProcAddress(LDllHandle, 'Mix_GroupNewer');
    Mix_GroupOldest := MemoryGetProcAddress(LDllHandle, 'Mix_GroupOldest');
    Mix_HaltChannel := MemoryGetProcAddress(LDllHandle, 'Mix_HaltChannel');
    Mix_HaltGroup := MemoryGetProcAddress(LDllHandle, 'Mix_HaltGroup');
    Mix_HaltMusic := MemoryGetProcAddress(LDllHandle, 'Mix_HaltMusic');
    Mix_HasChunkDecoder := MemoryGetProcAddress(LDllHandle, 'Mix_HasChunkDecoder');
    Mix_HookMusic := MemoryGetProcAddress(LDllHandle, 'Mix_HookMusic');
    Mix_HookMusicFinished := MemoryGetProcAddress(LDllHandle, 'Mix_HookMusicFinished');
    Mix_Init := MemoryGetProcAddress(LDllHandle, 'Mix_Init');
    Mix_Linked_Version := MemoryGetProcAddress(LDllHandle, 'Mix_Linked_Version');
    Mix_LoadMUS := MemoryGetProcAddress(LDllHandle, 'Mix_LoadMUS');
    Mix_LoadMUS_RW := MemoryGetProcAddress(LDllHandle, 'Mix_LoadMUS_RW');
    Mix_LoadMUSType_RW := MemoryGetProcAddress(LDllHandle, 'Mix_LoadMUSType_RW');
    Mix_LoadWAV_RW := MemoryGetProcAddress(LDllHandle, 'Mix_LoadWAV_RW');
    Mix_OpenAudio := MemoryGetProcAddress(LDllHandle, 'Mix_OpenAudio');
    Mix_OpenAudioDevice := MemoryGetProcAddress(LDllHandle, 'Mix_OpenAudioDevice');
    Mix_Pause := MemoryGetProcAddress(LDllHandle, 'Mix_Pause');
    Mix_Paused := MemoryGetProcAddress(LDllHandle, 'Mix_Paused');
    Mix_PausedMusic := MemoryGetProcAddress(LDllHandle, 'Mix_PausedMusic');
    Mix_PauseMusic := MemoryGetProcAddress(LDllHandle, 'Mix_PauseMusic');
    Mix_PlayChannelTimed := MemoryGetProcAddress(LDllHandle, 'Mix_PlayChannelTimed');
    Mix_Playing := MemoryGetProcAddress(LDllHandle, 'Mix_Playing');
    Mix_PlayingMusic := MemoryGetProcAddress(LDllHandle, 'Mix_PlayingMusic');
    Mix_PlayMusic := MemoryGetProcAddress(LDllHandle, 'Mix_PlayMusic');
    Mix_QuerySpec := MemoryGetProcAddress(LDllHandle, 'Mix_QuerySpec');
    Mix_QuickLoad_RAW := MemoryGetProcAddress(LDllHandle, 'Mix_QuickLoad_RAW');
    Mix_QuickLoad_WAV := MemoryGetProcAddress(LDllHandle, 'Mix_QuickLoad_WAV');
    Mix_Quit := MemoryGetProcAddress(LDllHandle, 'Mix_Quit');
    Mix_RegisterEffect := MemoryGetProcAddress(LDllHandle, 'Mix_RegisterEffect');
    Mix_ReserveChannels := MemoryGetProcAddress(LDllHandle, 'Mix_ReserveChannels');
    Mix_Resume := MemoryGetProcAddress(LDllHandle, 'Mix_Resume');
    Mix_ResumeMusic := MemoryGetProcAddress(LDllHandle, 'Mix_ResumeMusic');
    Mix_RewindMusic := MemoryGetProcAddress(LDllHandle, 'Mix_RewindMusic');
    Mix_SetDistance := MemoryGetProcAddress(LDllHandle, 'Mix_SetDistance');
    Mix_SetMusicCMD := MemoryGetProcAddress(LDllHandle, 'Mix_SetMusicCMD');
    Mix_SetMusicPosition := MemoryGetProcAddress(LDllHandle, 'Mix_SetMusicPosition');
    Mix_SetPanning := MemoryGetProcAddress(LDllHandle, 'Mix_SetPanning');
    Mix_SetPosition := MemoryGetProcAddress(LDllHandle, 'Mix_SetPosition');
    Mix_SetPostMix := MemoryGetProcAddress(LDllHandle, 'Mix_SetPostMix');
    Mix_SetReverseStereo := MemoryGetProcAddress(LDllHandle, 'Mix_SetReverseStereo');
    Mix_SetSoundFonts := MemoryGetProcAddress(LDllHandle, 'Mix_SetSoundFonts');
    Mix_SetSynchroValue := MemoryGetProcAddress(LDllHandle, 'Mix_SetSynchroValue');
    Mix_UnregisterAllEffects := MemoryGetProcAddress(LDllHandle, 'Mix_UnregisterAllEffects');
    Mix_UnregisterEffect := MemoryGetProcAddress(LDllHandle, 'Mix_UnregisterEffect');
    Mix_Volume := MemoryGetProcAddress(LDllHandle, 'Mix_Volume');
    Mix_VolumeChunk := MemoryGetProcAddress(LDllHandle, 'Mix_VolumeChunk');
    Mix_VolumeMusic := MemoryGetProcAddress(LDllHandle, 'Mix_VolumeMusic');
    nk__begin := MemoryGetProcAddress(LDllHandle, 'nk__begin');
    nk__next := MemoryGetProcAddress(LDllHandle, 'nk__next');
    nk_begin := MemoryGetProcAddress(LDllHandle, 'nk_begin');
    nk_begin_titled := MemoryGetProcAddress(LDllHandle, 'nk_begin_titled');
    nk_buffer_clear := MemoryGetProcAddress(LDllHandle, 'nk_buffer_clear');
    nk_buffer_free := MemoryGetProcAddress(LDllHandle, 'nk_buffer_free');
    nk_buffer_info := MemoryGetProcAddress(LDllHandle, 'nk_buffer_info');
    nk_buffer_init := MemoryGetProcAddress(LDllHandle, 'nk_buffer_init');
    nk_buffer_init_fixed := MemoryGetProcAddress(LDllHandle, 'nk_buffer_init_fixed');
    nk_buffer_mark := MemoryGetProcAddress(LDllHandle, 'nk_buffer_mark');
    nk_buffer_memory := MemoryGetProcAddress(LDllHandle, 'nk_buffer_memory');
    nk_buffer_memory_const := MemoryGetProcAddress(LDllHandle, 'nk_buffer_memory_const');
    nk_buffer_push := MemoryGetProcAddress(LDllHandle, 'nk_buffer_push');
    nk_buffer_reset := MemoryGetProcAddress(LDllHandle, 'nk_buffer_reset');
    nk_buffer_total := MemoryGetProcAddress(LDllHandle, 'nk_buffer_total');
    nk_button_color := MemoryGetProcAddress(LDllHandle, 'nk_button_color');
    nk_button_image := MemoryGetProcAddress(LDllHandle, 'nk_button_image');
    nk_button_image_label := MemoryGetProcAddress(LDllHandle, 'nk_button_image_label');
    nk_button_image_label_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_image_label_styled');
    nk_button_image_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_image_styled');
    nk_button_image_text := MemoryGetProcAddress(LDllHandle, 'nk_button_image_text');
    nk_button_image_text_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_image_text_styled');
    nk_button_label := MemoryGetProcAddress(LDllHandle, 'nk_button_label');
    nk_button_label_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_label_styled');
    nk_button_pop_behavior := MemoryGetProcAddress(LDllHandle, 'nk_button_pop_behavior');
    nk_button_push_behavior := MemoryGetProcAddress(LDllHandle, 'nk_button_push_behavior');
    nk_button_set_behavior := MemoryGetProcAddress(LDllHandle, 'nk_button_set_behavior');
    nk_button_symbol := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol');
    nk_button_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol_label');
    nk_button_symbol_label_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol_label_styled');
    nk_button_symbol_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol_styled');
    nk_button_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol_text');
    nk_button_symbol_text_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_symbol_text_styled');
    nk_button_text := MemoryGetProcAddress(LDllHandle, 'nk_button_text');
    nk_button_text_styled := MemoryGetProcAddress(LDllHandle, 'nk_button_text_styled');
    nk_chart_add_slot := MemoryGetProcAddress(LDllHandle, 'nk_chart_add_slot');
    nk_chart_add_slot_colored := MemoryGetProcAddress(LDllHandle, 'nk_chart_add_slot_colored');
    nk_chart_begin := MemoryGetProcAddress(LDllHandle, 'nk_chart_begin');
    nk_chart_begin_colored := MemoryGetProcAddress(LDllHandle, 'nk_chart_begin_colored');
    nk_chart_end := MemoryGetProcAddress(LDllHandle, 'nk_chart_end');
    nk_chart_push := MemoryGetProcAddress(LDllHandle, 'nk_chart_push');
    nk_chart_push_slot := MemoryGetProcAddress(LDllHandle, 'nk_chart_push_slot');
    nk_check_flags_label := MemoryGetProcAddress(LDllHandle, 'nk_check_flags_label');
    nk_check_flags_text := MemoryGetProcAddress(LDllHandle, 'nk_check_flags_text');
    nk_check_label := MemoryGetProcAddress(LDllHandle, 'nk_check_label');
    nk_check_text := MemoryGetProcAddress(LDllHandle, 'nk_check_text');
    nk_checkbox_flags_label := MemoryGetProcAddress(LDllHandle, 'nk_checkbox_flags_label');
    nk_checkbox_flags_text := MemoryGetProcAddress(LDllHandle, 'nk_checkbox_flags_text');
    nk_checkbox_label := MemoryGetProcAddress(LDllHandle, 'nk_checkbox_label');
    nk_checkbox_text := MemoryGetProcAddress(LDllHandle, 'nk_checkbox_text');
    nk_clear := MemoryGetProcAddress(LDllHandle, 'nk_clear');
    nk_color_cf := MemoryGetProcAddress(LDllHandle, 'nk_color_cf');
    nk_color_d := MemoryGetProcAddress(LDllHandle, 'nk_color_d');
    nk_color_dv := MemoryGetProcAddress(LDllHandle, 'nk_color_dv');
    nk_color_f := MemoryGetProcAddress(LDllHandle, 'nk_color_f');
    nk_color_fv := MemoryGetProcAddress(LDllHandle, 'nk_color_fv');
    nk_color_hex_rgb := MemoryGetProcAddress(LDllHandle, 'nk_color_hex_rgb');
    nk_color_hex_rgba := MemoryGetProcAddress(LDllHandle, 'nk_color_hex_rgba');
    nk_color_hsv_b := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_b');
    nk_color_hsv_bv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_bv');
    nk_color_hsv_f := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_f');
    nk_color_hsv_fv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_fv');
    nk_color_hsv_i := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_i');
    nk_color_hsv_iv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsv_iv');
    nk_color_hsva_b := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_b');
    nk_color_hsva_bv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_bv');
    nk_color_hsva_f := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_f');
    nk_color_hsva_fv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_fv');
    nk_color_hsva_i := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_i');
    nk_color_hsva_iv := MemoryGetProcAddress(LDllHandle, 'nk_color_hsva_iv');
    nk_color_pick := MemoryGetProcAddress(LDllHandle, 'nk_color_pick');
    nk_color_picker := MemoryGetProcAddress(LDllHandle, 'nk_color_picker');
    nk_color_u32 := MemoryGetProcAddress(LDllHandle, 'nk_color_u32');
    nk_colorf_hsva_f := MemoryGetProcAddress(LDllHandle, 'nk_colorf_hsva_f');
    nk_colorf_hsva_fv := MemoryGetProcAddress(LDllHandle, 'nk_colorf_hsva_fv');
    nk_combo := MemoryGetProcAddress(LDllHandle, 'nk_combo');
    nk_combo_begin_color := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_color');
    nk_combo_begin_image := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_image');
    nk_combo_begin_image_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_image_label');
    nk_combo_begin_image_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_image_text');
    nk_combo_begin_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_label');
    nk_combo_begin_symbol := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_symbol');
    nk_combo_begin_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_symbol_label');
    nk_combo_begin_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_symbol_text');
    nk_combo_begin_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_begin_text');
    nk_combo_callback := MemoryGetProcAddress(LDllHandle, 'nk_combo_callback');
    nk_combo_close := MemoryGetProcAddress(LDllHandle, 'nk_combo_close');
    nk_combo_end := MemoryGetProcAddress(LDllHandle, 'nk_combo_end');
    nk_combo_item_image_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_image_label');
    nk_combo_item_image_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_image_text');
    nk_combo_item_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_label');
    nk_combo_item_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_symbol_label');
    nk_combo_item_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_symbol_text');
    nk_combo_item_text := MemoryGetProcAddress(LDllHandle, 'nk_combo_item_text');
    nk_combo_separator := MemoryGetProcAddress(LDllHandle, 'nk_combo_separator');
    nk_combo_string := MemoryGetProcAddress(LDllHandle, 'nk_combo_string');
    nk_combobox := MemoryGetProcAddress(LDllHandle, 'nk_combobox');
    nk_combobox_callback := MemoryGetProcAddress(LDllHandle, 'nk_combobox_callback');
    nk_combobox_separator := MemoryGetProcAddress(LDllHandle, 'nk_combobox_separator');
    nk_combobox_string := MemoryGetProcAddress(LDllHandle, 'nk_combobox_string');
    nk_contextual_begin := MemoryGetProcAddress(LDllHandle, 'nk_contextual_begin');
    nk_contextual_close := MemoryGetProcAddress(LDllHandle, 'nk_contextual_close');
    nk_contextual_end := MemoryGetProcAddress(LDllHandle, 'nk_contextual_end');
    nk_contextual_item_image_label := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_image_label');
    nk_contextual_item_image_text := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_image_text');
    nk_contextual_item_label := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_label');
    nk_contextual_item_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_symbol_label');
    nk_contextual_item_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_symbol_text');
    nk_contextual_item_text := MemoryGetProcAddress(LDllHandle, 'nk_contextual_item_text');
    nk_draw_image := MemoryGetProcAddress(LDllHandle, 'nk_draw_image');
    nk_draw_nine_slice := MemoryGetProcAddress(LDllHandle, 'nk_draw_nine_slice');
    nk_draw_text := MemoryGetProcAddress(LDllHandle, 'nk_draw_text');
    nk_edit_buffer := MemoryGetProcAddress(LDllHandle, 'nk_edit_buffer');
    nk_edit_focus := MemoryGetProcAddress(LDllHandle, 'nk_edit_focus');
    nk_edit_string := MemoryGetProcAddress(LDllHandle, 'nk_edit_string');
    nk_edit_string_zero_terminated := MemoryGetProcAddress(LDllHandle, 'nk_edit_string_zero_terminated');
    nk_edit_unfocus := MemoryGetProcAddress(LDllHandle, 'nk_edit_unfocus');
    nk_end := MemoryGetProcAddress(LDllHandle, 'nk_end');
    nk_fill_arc := MemoryGetProcAddress(LDllHandle, 'nk_fill_arc');
    nk_fill_circle := MemoryGetProcAddress(LDllHandle, 'nk_fill_circle');
    nk_fill_polygon := MemoryGetProcAddress(LDllHandle, 'nk_fill_polygon');
    nk_fill_rect := MemoryGetProcAddress(LDllHandle, 'nk_fill_rect');
    nk_fill_rect_multi_color := MemoryGetProcAddress(LDllHandle, 'nk_fill_rect_multi_color');
    nk_fill_triangle := MemoryGetProcAddress(LDllHandle, 'nk_fill_triangle');
    nk_filter_ascii := MemoryGetProcAddress(LDllHandle, 'nk_filter_ascii');
    nk_filter_binary := MemoryGetProcAddress(LDllHandle, 'nk_filter_binary');
    nk_filter_decimal := MemoryGetProcAddress(LDllHandle, 'nk_filter_decimal');
    nk_filter_default := MemoryGetProcAddress(LDllHandle, 'nk_filter_default');
    nk_filter_float := MemoryGetProcAddress(LDllHandle, 'nk_filter_float');
    nk_filter_hex := MemoryGetProcAddress(LDllHandle, 'nk_filter_hex');
    nk_filter_oct := MemoryGetProcAddress(LDllHandle, 'nk_filter_oct');
    nk_free := MemoryGetProcAddress(LDllHandle, 'nk_free');
    nk_get_null_rect := MemoryGetProcAddress(LDllHandle, 'nk_get_null_rect');
    nk_group_begin := MemoryGetProcAddress(LDllHandle, 'nk_group_begin');
    nk_group_begin_titled := MemoryGetProcAddress(LDllHandle, 'nk_group_begin_titled');
    nk_group_end := MemoryGetProcAddress(LDllHandle, 'nk_group_end');
    nk_group_get_scroll := MemoryGetProcAddress(LDllHandle, 'nk_group_get_scroll');
    nk_group_scrolled_begin := MemoryGetProcAddress(LDllHandle, 'nk_group_scrolled_begin');
    nk_group_scrolled_end := MemoryGetProcAddress(LDllHandle, 'nk_group_scrolled_end');
    nk_group_scrolled_offset_begin := MemoryGetProcAddress(LDllHandle, 'nk_group_scrolled_offset_begin');
    nk_group_set_scroll := MemoryGetProcAddress(LDllHandle, 'nk_group_set_scroll');
    nk_handle_id := MemoryGetProcAddress(LDllHandle, 'nk_handle_id');
    nk_handle_ptr := MemoryGetProcAddress(LDllHandle, 'nk_handle_ptr');
    nk_hsv := MemoryGetProcAddress(LDllHandle, 'nk_hsv');
    nk_hsv_bv := MemoryGetProcAddress(LDllHandle, 'nk_hsv_bv');
    nk_hsv_f := MemoryGetProcAddress(LDllHandle, 'nk_hsv_f');
    nk_hsv_fv := MemoryGetProcAddress(LDllHandle, 'nk_hsv_fv');
    nk_hsv_iv := MemoryGetProcAddress(LDllHandle, 'nk_hsv_iv');
    nk_hsva := MemoryGetProcAddress(LDllHandle, 'nk_hsva');
    nk_hsva_bv := MemoryGetProcAddress(LDllHandle, 'nk_hsva_bv');
    nk_hsva_colorf := MemoryGetProcAddress(LDllHandle, 'nk_hsva_colorf');
    nk_hsva_colorfv := MemoryGetProcAddress(LDllHandle, 'nk_hsva_colorfv');
    nk_hsva_f := MemoryGetProcAddress(LDllHandle, 'nk_hsva_f');
    nk_hsva_fv := MemoryGetProcAddress(LDllHandle, 'nk_hsva_fv');
    nk_hsva_iv := MemoryGetProcAddress(LDllHandle, 'nk_hsva_iv');
    nk_image_ := MemoryGetProcAddress(LDllHandle, 'nk_image');
    nk_image_color := MemoryGetProcAddress(LDllHandle, 'nk_image_color');
    nk_image_handle := MemoryGetProcAddress(LDllHandle, 'nk_image_handle');
    nk_image_id := MemoryGetProcAddress(LDllHandle, 'nk_image_id');
    nk_image_is_subimage := MemoryGetProcAddress(LDllHandle, 'nk_image_is_subimage');
    nk_image_ptr := MemoryGetProcAddress(LDllHandle, 'nk_image_ptr');
    nk_init := MemoryGetProcAddress(LDllHandle, 'nk_init');
    nk_init_custom := MemoryGetProcAddress(LDllHandle, 'nk_init_custom');
    nk_init_fixed := MemoryGetProcAddress(LDllHandle, 'nk_init_fixed');
    nk_input_any_mouse_click_in_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_any_mouse_click_in_rect');
    nk_input_begin := MemoryGetProcAddress(LDllHandle, 'nk_input_begin');
    nk_input_button := MemoryGetProcAddress(LDllHandle, 'nk_input_button');
    nk_input_char := MemoryGetProcAddress(LDllHandle, 'nk_input_char');
    nk_input_end := MemoryGetProcAddress(LDllHandle, 'nk_input_end');
    nk_input_glyph := MemoryGetProcAddress(LDllHandle, 'nk_input_glyph');
    nk_input_has_mouse_click := MemoryGetProcAddress(LDllHandle, 'nk_input_has_mouse_click');
    nk_input_has_mouse_click_down_in_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_has_mouse_click_down_in_rect');
    nk_input_has_mouse_click_in_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_has_mouse_click_in_rect');
    nk_input_is_key_down := MemoryGetProcAddress(LDllHandle, 'nk_input_is_key_down');
    nk_input_is_key_pressed := MemoryGetProcAddress(LDllHandle, 'nk_input_is_key_pressed');
    nk_input_is_key_released := MemoryGetProcAddress(LDllHandle, 'nk_input_is_key_released');
    nk_input_is_mouse_click_down_in_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_click_down_in_rect');
    nk_input_is_mouse_click_in_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_click_in_rect');
    nk_input_is_mouse_down := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_down');
    nk_input_is_mouse_hovering_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_hovering_rect');
    nk_input_is_mouse_pressed := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_pressed');
    nk_input_is_mouse_prev_hovering_rect := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_prev_hovering_rect');
    nk_input_is_mouse_released := MemoryGetProcAddress(LDllHandle, 'nk_input_is_mouse_released');
    nk_input_key := MemoryGetProcAddress(LDllHandle, 'nk_input_key');
    nk_input_motion := MemoryGetProcAddress(LDllHandle, 'nk_input_motion');
    nk_input_mouse_clicked := MemoryGetProcAddress(LDllHandle, 'nk_input_mouse_clicked');
    nk_input_scroll := MemoryGetProcAddress(LDllHandle, 'nk_input_scroll');
    nk_input_unicode := MemoryGetProcAddress(LDllHandle, 'nk_input_unicode');
    nk_item_is_any_active := MemoryGetProcAddress(LDllHandle, 'nk_item_is_any_active');
    nk_label := MemoryGetProcAddress(LDllHandle, 'nk_label');
    nk_label_colored := MemoryGetProcAddress(LDllHandle, 'nk_label_colored');
    nk_label_colored_wrap := MemoryGetProcAddress(LDllHandle, 'nk_label_colored_wrap');
    nk_label_wrap := MemoryGetProcAddress(LDllHandle, 'nk_label_wrap');
    nk_layout_ratio_from_pixel := MemoryGetProcAddress(LDllHandle, 'nk_layout_ratio_from_pixel');
    nk_layout_reset_min_row_height := MemoryGetProcAddress(LDllHandle, 'nk_layout_reset_min_row_height');
    nk_layout_row := MemoryGetProcAddress(LDllHandle, 'nk_layout_row');
    nk_layout_row_begin := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_begin');
    nk_layout_row_dynamic := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_dynamic');
    nk_layout_row_end := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_end');
    nk_layout_row_push := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_push');
    nk_layout_row_static := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_static');
    nk_layout_row_template_begin := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_template_begin');
    nk_layout_row_template_end := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_template_end');
    nk_layout_row_template_push_dynamic := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_template_push_dynamic');
    nk_layout_row_template_push_static := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_template_push_static');
    nk_layout_row_template_push_variable := MemoryGetProcAddress(LDllHandle, 'nk_layout_row_template_push_variable');
    nk_layout_set_min_row_height := MemoryGetProcAddress(LDllHandle, 'nk_layout_set_min_row_height');
    nk_layout_space_begin := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_begin');
    nk_layout_space_bounds := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_bounds');
    nk_layout_space_end := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_end');
    nk_layout_space_push := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_push');
    nk_layout_space_rect_to_local := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_rect_to_local');
    nk_layout_space_rect_to_screen := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_rect_to_screen');
    nk_layout_space_to_local := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_to_local');
    nk_layout_space_to_screen := MemoryGetProcAddress(LDllHandle, 'nk_layout_space_to_screen');
    nk_layout_widget_bounds := MemoryGetProcAddress(LDllHandle, 'nk_layout_widget_bounds');
    nk_list_view_begin := MemoryGetProcAddress(LDllHandle, 'nk_list_view_begin');
    nk_list_view_end := MemoryGetProcAddress(LDllHandle, 'nk_list_view_end');
    nk_menu_begin_image := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_image');
    nk_menu_begin_image_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_image_label');
    nk_menu_begin_image_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_image_text');
    nk_menu_begin_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_label');
    nk_menu_begin_symbol := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_symbol');
    nk_menu_begin_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_symbol_label');
    nk_menu_begin_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_symbol_text');
    nk_menu_begin_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_begin_text');
    nk_menu_close := MemoryGetProcAddress(LDllHandle, 'nk_menu_close');
    nk_menu_end := MemoryGetProcAddress(LDllHandle, 'nk_menu_end');
    nk_menu_item_image_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_image_label');
    nk_menu_item_image_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_image_text');
    nk_menu_item_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_label');
    nk_menu_item_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_symbol_label');
    nk_menu_item_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_symbol_text');
    nk_menu_item_text := MemoryGetProcAddress(LDllHandle, 'nk_menu_item_text');
    nk_menubar_begin := MemoryGetProcAddress(LDllHandle, 'nk_menubar_begin');
    nk_menubar_end := MemoryGetProcAddress(LDllHandle, 'nk_menubar_end');
    nk_murmur_hash := MemoryGetProcAddress(LDllHandle, 'nk_murmur_hash');
    nk_nine_slice_handle := MemoryGetProcAddress(LDllHandle, 'nk_nine_slice_handle');
    nk_nine_slice_id := MemoryGetProcAddress(LDllHandle, 'nk_nine_slice_id');
    nk_nine_slice_is_sub9slice := MemoryGetProcAddress(LDllHandle, 'nk_nine_slice_is_sub9slice');
    nk_nine_slice_ptr := MemoryGetProcAddress(LDllHandle, 'nk_nine_slice_ptr');
    nk_option_label := MemoryGetProcAddress(LDllHandle, 'nk_option_label');
    nk_option_text := MemoryGetProcAddress(LDllHandle, 'nk_option_text');
    nk_plot := MemoryGetProcAddress(LDllHandle, 'nk_plot');
    nk_plot_function := MemoryGetProcAddress(LDllHandle, 'nk_plot_function');
    nk_popup_begin := MemoryGetProcAddress(LDllHandle, 'nk_popup_begin');
    nk_popup_close := MemoryGetProcAddress(LDllHandle, 'nk_popup_close');
    nk_popup_end := MemoryGetProcAddress(LDllHandle, 'nk_popup_end');
    nk_popup_get_scroll := MemoryGetProcAddress(LDllHandle, 'nk_popup_get_scroll');
    nk_popup_set_scroll := MemoryGetProcAddress(LDllHandle, 'nk_popup_set_scroll');
    nk_prog := MemoryGetProcAddress(LDllHandle, 'nk_prog');
    nk_progress := MemoryGetProcAddress(LDllHandle, 'nk_progress');
    nk_property_double := MemoryGetProcAddress(LDllHandle, 'nk_property_double');
    nk_property_float := MemoryGetProcAddress(LDllHandle, 'nk_property_float');
    nk_property_int := MemoryGetProcAddress(LDllHandle, 'nk_property_int');
    nk_propertyd := MemoryGetProcAddress(LDllHandle, 'nk_propertyd');
    nk_propertyf := MemoryGetProcAddress(LDllHandle, 'nk_propertyf');
    nk_propertyi := MemoryGetProcAddress(LDllHandle, 'nk_propertyi');
    nk_push_custom := MemoryGetProcAddress(LDllHandle, 'nk_push_custom');
    nk_push_scissor := MemoryGetProcAddress(LDllHandle, 'nk_push_scissor');
    nk_radio_label := MemoryGetProcAddress(LDllHandle, 'nk_radio_label');
    nk_radio_text := MemoryGetProcAddress(LDllHandle, 'nk_radio_text');
    nk_rect_ := MemoryGetProcAddress(LDllHandle, 'nk_rect');
    nk_rect_pos := MemoryGetProcAddress(LDllHandle, 'nk_rect_pos');
    nk_rect_size := MemoryGetProcAddress(LDllHandle, 'nk_rect_size');
    nk_recta := MemoryGetProcAddress(LDllHandle, 'nk_recta');
    nk_recti_ := MemoryGetProcAddress(LDllHandle, 'nk_recti');
    nk_rectiv := MemoryGetProcAddress(LDllHandle, 'nk_rectiv');
    nk_rectv := MemoryGetProcAddress(LDllHandle, 'nk_rectv');
    nk_rgb_ := MemoryGetProcAddress(LDllHandle, 'nk_rgb');
    nk_rgb_bv := MemoryGetProcAddress(LDllHandle, 'nk_rgb_bv');
    nk_rgb_cf := MemoryGetProcAddress(LDllHandle, 'nk_rgb_cf');
    nk_rgb_f := MemoryGetProcAddress(LDllHandle, 'nk_rgb_f');
    nk_rgb_fv := MemoryGetProcAddress(LDllHandle, 'nk_rgb_fv');
    nk_rgb_hex := MemoryGetProcAddress(LDllHandle, 'nk_rgb_hex');
    nk_rgb_iv := MemoryGetProcAddress(LDllHandle, 'nk_rgb_iv');
    nk_rgba_ := MemoryGetProcAddress(LDllHandle, 'nk_rgba');
    nk_rgba_bv := MemoryGetProcAddress(LDllHandle, 'nk_rgba_bv');
    nk_rgba_cf := MemoryGetProcAddress(LDllHandle, 'nk_rgba_cf');
    nk_rgba_f := MemoryGetProcAddress(LDllHandle, 'nk_rgba_f');
    nk_rgba_fv := MemoryGetProcAddress(LDllHandle, 'nk_rgba_fv');
    nk_rgba_hex := MemoryGetProcAddress(LDllHandle, 'nk_rgba_hex');
    nk_rgba_iv := MemoryGetProcAddress(LDllHandle, 'nk_rgba_iv');
    nk_rgba_u32 := MemoryGetProcAddress(LDllHandle, 'nk_rgba_u32');
    nk_sdl_handle_event := MemoryGetProcAddress(LDllHandle, 'nk_sdl_handle_event');
    nk_sdlsurface_init := MemoryGetProcAddress(LDllHandle, 'nk_sdlsurface_init');
    nk_sdlsurface_render := MemoryGetProcAddress(LDllHandle, 'nk_sdlsurface_render');
    nk_sdlsurface_shutdown := MemoryGetProcAddress(LDllHandle, 'nk_sdlsurface_shutdown');
    nk_select_image_label := MemoryGetProcAddress(LDllHandle, 'nk_select_image_label');
    nk_select_image_text := MemoryGetProcAddress(LDllHandle, 'nk_select_image_text');
    nk_select_label := MemoryGetProcAddress(LDllHandle, 'nk_select_label');
    nk_select_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_select_symbol_label');
    nk_select_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_select_symbol_text');
    nk_select_text := MemoryGetProcAddress(LDllHandle, 'nk_select_text');
    nk_selectable_image_label := MemoryGetProcAddress(LDllHandle, 'nk_selectable_image_label');
    nk_selectable_image_text := MemoryGetProcAddress(LDllHandle, 'nk_selectable_image_text');
    nk_selectable_label := MemoryGetProcAddress(LDllHandle, 'nk_selectable_label');
    nk_selectable_symbol_label := MemoryGetProcAddress(LDllHandle, 'nk_selectable_symbol_label');
    nk_selectable_symbol_text := MemoryGetProcAddress(LDllHandle, 'nk_selectable_symbol_text');
    nk_selectable_text := MemoryGetProcAddress(LDllHandle, 'nk_selectable_text');
    nk_slide_float := MemoryGetProcAddress(LDllHandle, 'nk_slide_float');
    nk_slide_int := MemoryGetProcAddress(LDllHandle, 'nk_slide_int');
    nk_slider_float := MemoryGetProcAddress(LDllHandle, 'nk_slider_float');
    nk_slider_int := MemoryGetProcAddress(LDllHandle, 'nk_slider_int');
    nk_spacer := MemoryGetProcAddress(LDllHandle, 'nk_spacer');
    nk_spacing := MemoryGetProcAddress(LDllHandle, 'nk_spacing');
    nk_str_append_str_char := MemoryGetProcAddress(LDllHandle, 'nk_str_append_str_char');
    nk_str_append_str_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_append_str_runes');
    nk_str_append_str_utf8 := MemoryGetProcAddress(LDllHandle, 'nk_str_append_str_utf8');
    nk_str_append_text_char := MemoryGetProcAddress(LDllHandle, 'nk_str_append_text_char');
    nk_str_append_text_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_append_text_runes');
    nk_str_append_text_utf8 := MemoryGetProcAddress(LDllHandle, 'nk_str_append_text_utf8');
    nk_str_at_char := MemoryGetProcAddress(LDllHandle, 'nk_str_at_char');
    nk_str_at_char_const := MemoryGetProcAddress(LDllHandle, 'nk_str_at_char_const');
    nk_str_at_const := MemoryGetProcAddress(LDllHandle, 'nk_str_at_const');
    nk_str_at_rune := MemoryGetProcAddress(LDllHandle, 'nk_str_at_rune');
    nk_str_clear := MemoryGetProcAddress(LDllHandle, 'nk_str_clear');
    nk_str_delete_chars := MemoryGetProcAddress(LDllHandle, 'nk_str_delete_chars');
    nk_str_delete_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_delete_runes');
    nk_str_free := MemoryGetProcAddress(LDllHandle, 'nk_str_free');
    nk_str_get := MemoryGetProcAddress(LDllHandle, 'nk_str_get');
    nk_str_get_const := MemoryGetProcAddress(LDllHandle, 'nk_str_get_const');
    nk_str_init := MemoryGetProcAddress(LDllHandle, 'nk_str_init');
    nk_str_init_fixed := MemoryGetProcAddress(LDllHandle, 'nk_str_init_fixed');
    nk_str_insert_at_char := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_at_char');
    nk_str_insert_at_rune := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_at_rune');
    nk_str_insert_str_char := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_str_char');
    nk_str_insert_str_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_str_runes');
    nk_str_insert_str_utf8 := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_str_utf8');
    nk_str_insert_text_char := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_text_char');
    nk_str_insert_text_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_text_runes');
    nk_str_insert_text_utf8 := MemoryGetProcAddress(LDllHandle, 'nk_str_insert_text_utf8');
    nk_str_len := MemoryGetProcAddress(LDllHandle, 'nk_str_len');
    nk_str_len_char := MemoryGetProcAddress(LDllHandle, 'nk_str_len_char');
    nk_str_remove_chars := MemoryGetProcAddress(LDllHandle, 'nk_str_remove_chars');
    nk_str_remove_runes := MemoryGetProcAddress(LDllHandle, 'nk_str_remove_runes');
    nk_str_rune_at := MemoryGetProcAddress(LDllHandle, 'nk_str_rune_at');
    nk_strfilter := MemoryGetProcAddress(LDllHandle, 'nk_strfilter');
    nk_stricmp := MemoryGetProcAddress(LDllHandle, 'nk_stricmp');
    nk_stricmpn := MemoryGetProcAddress(LDllHandle, 'nk_stricmpn');
    nk_strlen := MemoryGetProcAddress(LDllHandle, 'nk_strlen');
    nk_strmatch_fuzzy_string := MemoryGetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_string');
    nk_strmatch_fuzzy_text := MemoryGetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_text');
    nk_stroke_arc := MemoryGetProcAddress(LDllHandle, 'nk_stroke_arc');
    nk_stroke_circle := MemoryGetProcAddress(LDllHandle, 'nk_stroke_circle');
    nk_stroke_curve := MemoryGetProcAddress(LDllHandle, 'nk_stroke_curve');
    nk_stroke_line := MemoryGetProcAddress(LDllHandle, 'nk_stroke_line');
    nk_stroke_polygon := MemoryGetProcAddress(LDllHandle, 'nk_stroke_polygon');
    nk_stroke_polyline := MemoryGetProcAddress(LDllHandle, 'nk_stroke_polyline');
    nk_stroke_rect := MemoryGetProcAddress(LDllHandle, 'nk_stroke_rect');
    nk_stroke_triangle := MemoryGetProcAddress(LDllHandle, 'nk_stroke_triangle');
    nk_strtod := MemoryGetProcAddress(LDllHandle, 'nk_strtod');
    nk_strtof := MemoryGetProcAddress(LDllHandle, 'nk_strtof');
    nk_strtoi := MemoryGetProcAddress(LDllHandle, 'nk_strtoi');
    nk_style_default := MemoryGetProcAddress(LDllHandle, 'nk_style_default');
    nk_style_from_table := MemoryGetProcAddress(LDllHandle, 'nk_style_from_table');
    nk_style_get_color_by_name := MemoryGetProcAddress(LDllHandle, 'nk_style_get_color_by_name');
    nk_style_hide_cursor := MemoryGetProcAddress(LDllHandle, 'nk_style_hide_cursor');
    nk_style_item_color_ := MemoryGetProcAddress(LDllHandle, 'nk_style_item_color');
    nk_style_item_hide := MemoryGetProcAddress(LDllHandle, 'nk_style_item_hide');
    nk_style_item_image_ := MemoryGetProcAddress(LDllHandle, 'nk_style_item_image');
    nk_style_item_nine_slice_ := MemoryGetProcAddress(LDllHandle, 'nk_style_item_nine_slice');
    nk_style_load_all_cursors := MemoryGetProcAddress(LDllHandle, 'nk_style_load_all_cursors');
    nk_style_load_cursor := MemoryGetProcAddress(LDllHandle, 'nk_style_load_cursor');
    nk_style_pop_color := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_color');
    nk_style_pop_flags := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_flags');
    nk_style_pop_float := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_float');
    nk_style_pop_font := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_font');
    nk_style_pop_style_item := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_style_item');
    nk_style_pop_vec2 := MemoryGetProcAddress(LDllHandle, 'nk_style_pop_vec2');
    nk_style_push_color := MemoryGetProcAddress(LDllHandle, 'nk_style_push_color');
    nk_style_push_flags := MemoryGetProcAddress(LDllHandle, 'nk_style_push_flags');
    nk_style_push_float := MemoryGetProcAddress(LDllHandle, 'nk_style_push_float');
    nk_style_push_font := MemoryGetProcAddress(LDllHandle, 'nk_style_push_font');
    nk_style_push_style_item := MemoryGetProcAddress(LDllHandle, 'nk_style_push_style_item');
    nk_style_push_vec2 := MemoryGetProcAddress(LDllHandle, 'nk_style_push_vec2');
    nk_style_set_cursor := MemoryGetProcAddress(LDllHandle, 'nk_style_set_cursor');
    nk_style_set_font := MemoryGetProcAddress(LDllHandle, 'nk_style_set_font');
    nk_style_show_cursor := MemoryGetProcAddress(LDllHandle, 'nk_style_show_cursor');
    nk_sub9slice_handle := MemoryGetProcAddress(LDllHandle, 'nk_sub9slice_handle');
    nk_sub9slice_id := MemoryGetProcAddress(LDllHandle, 'nk_sub9slice_id');
    nk_sub9slice_ptr := MemoryGetProcAddress(LDllHandle, 'nk_sub9slice_ptr');
    nk_subimage_handle := MemoryGetProcAddress(LDllHandle, 'nk_subimage_handle');
    nk_subimage_id := MemoryGetProcAddress(LDllHandle, 'nk_subimage_id');
    nk_subimage_ptr := MemoryGetProcAddress(LDllHandle, 'nk_subimage_ptr');
    nk_text := MemoryGetProcAddress(LDllHandle, 'nk_text');
    nk_text_colored := MemoryGetProcAddress(LDllHandle, 'nk_text_colored');
    nk_text_wrap := MemoryGetProcAddress(LDllHandle, 'nk_text_wrap');
    nk_text_wrap_colored := MemoryGetProcAddress(LDllHandle, 'nk_text_wrap_colored');
    nk_textedit_cut := MemoryGetProcAddress(LDllHandle, 'nk_textedit_cut');
    nk_textedit_delete := MemoryGetProcAddress(LDllHandle, 'nk_textedit_delete');
    nk_textedit_delete_selection := MemoryGetProcAddress(LDllHandle, 'nk_textedit_delete_selection');
    nk_textedit_free := MemoryGetProcAddress(LDllHandle, 'nk_textedit_free');
    nk_textedit_init := MemoryGetProcAddress(LDllHandle, 'nk_textedit_init');
    nk_textedit_init_fixed := MemoryGetProcAddress(LDllHandle, 'nk_textedit_init_fixed');
    nk_textedit_paste := MemoryGetProcAddress(LDllHandle, 'nk_textedit_paste');
    nk_textedit_redo := MemoryGetProcAddress(LDllHandle, 'nk_textedit_redo');
    nk_textedit_select_all := MemoryGetProcAddress(LDllHandle, 'nk_textedit_select_all');
    nk_textedit_text := MemoryGetProcAddress(LDllHandle, 'nk_textedit_text');
    nk_textedit_undo := MemoryGetProcAddress(LDllHandle, 'nk_textedit_undo');
    nk_tooltip := MemoryGetProcAddress(LDllHandle, 'nk_tooltip');
    nk_tooltip_begin := MemoryGetProcAddress(LDllHandle, 'nk_tooltip_begin');
    nk_tooltip_end := MemoryGetProcAddress(LDllHandle, 'nk_tooltip_end');
    nk_tree_element_image_push_hashed := MemoryGetProcAddress(LDllHandle, 'nk_tree_element_image_push_hashed');
    nk_tree_element_pop := MemoryGetProcAddress(LDllHandle, 'nk_tree_element_pop');
    nk_tree_element_push_hashed := MemoryGetProcAddress(LDllHandle, 'nk_tree_element_push_hashed');
    nk_tree_image_push_hashed := MemoryGetProcAddress(LDllHandle, 'nk_tree_image_push_hashed');
    nk_tree_pop := MemoryGetProcAddress(LDllHandle, 'nk_tree_pop');
    nk_tree_push_hashed := MemoryGetProcAddress(LDllHandle, 'nk_tree_push_hashed');
    nk_tree_state_image_push := MemoryGetProcAddress(LDllHandle, 'nk_tree_state_image_push');
    nk_tree_state_pop := MemoryGetProcAddress(LDllHandle, 'nk_tree_state_pop');
    nk_tree_state_push := MemoryGetProcAddress(LDllHandle, 'nk_tree_state_push');
    nk_triangle_from_direction := MemoryGetProcAddress(LDllHandle, 'nk_triangle_from_direction');
    nk_utf_at := MemoryGetProcAddress(LDllHandle, 'nk_utf_at');
    nk_utf_decode := MemoryGetProcAddress(LDllHandle, 'nk_utf_decode');
    nk_utf_encode := MemoryGetProcAddress(LDllHandle, 'nk_utf_encode');
    nk_utf_len := MemoryGetProcAddress(LDllHandle, 'nk_utf_len');
    nk_vec2_ := MemoryGetProcAddress(LDllHandle, 'nk_vec2');
    nk_vec2i_ := MemoryGetProcAddress(LDllHandle, 'nk_vec2i');
    nk_vec2iv := MemoryGetProcAddress(LDllHandle, 'nk_vec2iv');
    nk_vec2v := MemoryGetProcAddress(LDllHandle, 'nk_vec2v');
    nk_widget := MemoryGetProcAddress(LDllHandle, 'nk_widget');
    nk_widget_bounds := MemoryGetProcAddress(LDllHandle, 'nk_widget_bounds');
    nk_widget_fitting := MemoryGetProcAddress(LDllHandle, 'nk_widget_fitting');
    nk_widget_has_mouse_click_down := MemoryGetProcAddress(LDllHandle, 'nk_widget_has_mouse_click_down');
    nk_widget_height := MemoryGetProcAddress(LDllHandle, 'nk_widget_height');
    nk_widget_is_hovered := MemoryGetProcAddress(LDllHandle, 'nk_widget_is_hovered');
    nk_widget_is_mouse_clicked := MemoryGetProcAddress(LDllHandle, 'nk_widget_is_mouse_clicked');
    nk_widget_position := MemoryGetProcAddress(LDllHandle, 'nk_widget_position');
    nk_widget_size := MemoryGetProcAddress(LDllHandle, 'nk_widget_size');
    nk_widget_width := MemoryGetProcAddress(LDllHandle, 'nk_widget_width');
    nk_window_close := MemoryGetProcAddress(LDllHandle, 'nk_window_close');
    nk_window_collapse := MemoryGetProcAddress(LDllHandle, 'nk_window_collapse');
    nk_window_collapse_if := MemoryGetProcAddress(LDllHandle, 'nk_window_collapse_if');
    nk_window_find := MemoryGetProcAddress(LDllHandle, 'nk_window_find');
    nk_window_get_bounds := MemoryGetProcAddress(LDllHandle, 'nk_window_get_bounds');
    nk_window_get_canvas := MemoryGetProcAddress(LDllHandle, 'nk_window_get_canvas');
    nk_window_get_content_region := MemoryGetProcAddress(LDllHandle, 'nk_window_get_content_region');
    nk_window_get_content_region_max := MemoryGetProcAddress(LDllHandle, 'nk_window_get_content_region_max');
    nk_window_get_content_region_min := MemoryGetProcAddress(LDllHandle, 'nk_window_get_content_region_min');
    nk_window_get_content_region_size := MemoryGetProcAddress(LDllHandle, 'nk_window_get_content_region_size');
    nk_window_get_height := MemoryGetProcAddress(LDllHandle, 'nk_window_get_height');
    nk_window_get_panel := MemoryGetProcAddress(LDllHandle, 'nk_window_get_panel');
    nk_window_get_position := MemoryGetProcAddress(LDllHandle, 'nk_window_get_position');
    nk_window_get_scroll := MemoryGetProcAddress(LDllHandle, 'nk_window_get_scroll');
    nk_window_get_size := MemoryGetProcAddress(LDllHandle, 'nk_window_get_size');
    nk_window_get_width := MemoryGetProcAddress(LDllHandle, 'nk_window_get_width');
    nk_window_has_focus := MemoryGetProcAddress(LDllHandle, 'nk_window_has_focus');
    nk_window_is_active := MemoryGetProcAddress(LDllHandle, 'nk_window_is_active');
    nk_window_is_any_hovered := MemoryGetProcAddress(LDllHandle, 'nk_window_is_any_hovered');
    nk_window_is_closed := MemoryGetProcAddress(LDllHandle, 'nk_window_is_closed');
    nk_window_is_collapsed := MemoryGetProcAddress(LDllHandle, 'nk_window_is_collapsed');
    nk_window_is_hidden := MemoryGetProcAddress(LDllHandle, 'nk_window_is_hidden');
    nk_window_is_hovered := MemoryGetProcAddress(LDllHandle, 'nk_window_is_hovered');
    nk_window_set_bounds := MemoryGetProcAddress(LDllHandle, 'nk_window_set_bounds');
    nk_window_set_focus := MemoryGetProcAddress(LDllHandle, 'nk_window_set_focus');
    nk_window_set_position := MemoryGetProcAddress(LDllHandle, 'nk_window_set_position');
    nk_window_set_scroll := MemoryGetProcAddress(LDllHandle, 'nk_window_set_scroll');
    nk_window_set_size := MemoryGetProcAddress(LDllHandle, 'nk_window_set_size');
    nk_window_show := MemoryGetProcAddress(LDllHandle, 'nk_window_show');
    nk_window_show_if := MemoryGetProcAddress(LDllHandle, 'nk_window_show_if');
    plm_audio_create_with_buffer := MemoryGetProcAddress(LDllHandle, 'plm_audio_create_with_buffer');
    plm_audio_decode := MemoryGetProcAddress(LDllHandle, 'plm_audio_decode');
    plm_audio_destroy := MemoryGetProcAddress(LDllHandle, 'plm_audio_destroy');
    plm_audio_get_samplerate := MemoryGetProcAddress(LDllHandle, 'plm_audio_get_samplerate');
    plm_audio_get_time := MemoryGetProcAddress(LDllHandle, 'plm_audio_get_time');
    plm_audio_has_ended := MemoryGetProcAddress(LDllHandle, 'plm_audio_has_ended');
    plm_audio_has_header := MemoryGetProcAddress(LDllHandle, 'plm_audio_has_header');
    plm_audio_rewind := MemoryGetProcAddress(LDllHandle, 'plm_audio_rewind');
    plm_audio_set_time := MemoryGetProcAddress(LDllHandle, 'plm_audio_set_time');
    plm_buffer_create_for_appending := MemoryGetProcAddress(LDllHandle, 'plm_buffer_create_for_appending');
    plm_buffer_create_with_capacity := MemoryGetProcAddress(LDllHandle, 'plm_buffer_create_with_capacity');
    plm_buffer_create_with_file := MemoryGetProcAddress(LDllHandle, 'plm_buffer_create_with_file');
    plm_buffer_create_with_filename := MemoryGetProcAddress(LDllHandle, 'plm_buffer_create_with_filename');
    plm_buffer_create_with_memory := MemoryGetProcAddress(LDllHandle, 'plm_buffer_create_with_memory');
    plm_buffer_destroy := MemoryGetProcAddress(LDllHandle, 'plm_buffer_destroy');
    plm_buffer_get_remaining := MemoryGetProcAddress(LDllHandle, 'plm_buffer_get_remaining');
    plm_buffer_get_size := MemoryGetProcAddress(LDllHandle, 'plm_buffer_get_size');
    plm_buffer_has_ended := MemoryGetProcAddress(LDllHandle, 'plm_buffer_has_ended');
    plm_buffer_rewind := MemoryGetProcAddress(LDllHandle, 'plm_buffer_rewind');
    plm_buffer_set_load_callback := MemoryGetProcAddress(LDllHandle, 'plm_buffer_set_load_callback');
    plm_buffer_signal_end := MemoryGetProcAddress(LDllHandle, 'plm_buffer_signal_end');
    plm_buffer_write := MemoryGetProcAddress(LDllHandle, 'plm_buffer_write');
    plm_create_with_buffer := MemoryGetProcAddress(LDllHandle, 'plm_create_with_buffer');
    plm_create_with_file := MemoryGetProcAddress(LDllHandle, 'plm_create_with_file');
    plm_create_with_filename := MemoryGetProcAddress(LDllHandle, 'plm_create_with_filename');
    plm_create_with_memory := MemoryGetProcAddress(LDllHandle, 'plm_create_with_memory');
    plm_decode := MemoryGetProcAddress(LDllHandle, 'plm_decode');
    plm_decode_audio := MemoryGetProcAddress(LDllHandle, 'plm_decode_audio');
    plm_decode_video := MemoryGetProcAddress(LDllHandle, 'plm_decode_video');
    plm_demux_create := MemoryGetProcAddress(LDllHandle, 'plm_demux_create');
    plm_demux_decode := MemoryGetProcAddress(LDllHandle, 'plm_demux_decode');
    plm_demux_destroy := MemoryGetProcAddress(LDllHandle, 'plm_demux_destroy');
    plm_demux_get_duration := MemoryGetProcAddress(LDllHandle, 'plm_demux_get_duration');
    plm_demux_get_num_audio_streams := MemoryGetProcAddress(LDllHandle, 'plm_demux_get_num_audio_streams');
    plm_demux_get_num_video_streams := MemoryGetProcAddress(LDllHandle, 'plm_demux_get_num_video_streams');
    plm_demux_get_start_time := MemoryGetProcAddress(LDllHandle, 'plm_demux_get_start_time');
    plm_demux_has_ended := MemoryGetProcAddress(LDllHandle, 'plm_demux_has_ended');
    plm_demux_has_headers := MemoryGetProcAddress(LDllHandle, 'plm_demux_has_headers');
    plm_demux_rewind := MemoryGetProcAddress(LDllHandle, 'plm_demux_rewind');
    plm_demux_seek := MemoryGetProcAddress(LDllHandle, 'plm_demux_seek');
    plm_destroy := MemoryGetProcAddress(LDllHandle, 'plm_destroy');
    plm_frame_to_abgr := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_abgr');
    plm_frame_to_argb := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_argb');
    plm_frame_to_bgr := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_bgr');
    plm_frame_to_bgra := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_bgra');
    plm_frame_to_rgb := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_rgb');
    plm_frame_to_rgba := MemoryGetProcAddress(LDllHandle, 'plm_frame_to_rgba');
    plm_get_audio_enabled := MemoryGetProcAddress(LDllHandle, 'plm_get_audio_enabled');
    plm_get_audio_lead_time := MemoryGetProcAddress(LDllHandle, 'plm_get_audio_lead_time');
    plm_get_duration := MemoryGetProcAddress(LDllHandle, 'plm_get_duration');
    plm_get_framerate := MemoryGetProcAddress(LDllHandle, 'plm_get_framerate');
    plm_get_height := MemoryGetProcAddress(LDllHandle, 'plm_get_height');
    plm_get_loop := MemoryGetProcAddress(LDllHandle, 'plm_get_loop');
    plm_get_num_audio_streams := MemoryGetProcAddress(LDllHandle, 'plm_get_num_audio_streams');
    plm_get_num_video_streams := MemoryGetProcAddress(LDllHandle, 'plm_get_num_video_streams');
    plm_get_samplerate := MemoryGetProcAddress(LDllHandle, 'plm_get_samplerate');
    plm_get_time := MemoryGetProcAddress(LDllHandle, 'plm_get_time');
    plm_get_video_enabled := MemoryGetProcAddress(LDllHandle, 'plm_get_video_enabled');
    plm_get_width := MemoryGetProcAddress(LDllHandle, 'plm_get_width');
    plm_has_ended := MemoryGetProcAddress(LDllHandle, 'plm_has_ended');
    plm_has_headers := MemoryGetProcAddress(LDllHandle, 'plm_has_headers');
    plm_rewind := MemoryGetProcAddress(LDllHandle, 'plm_rewind');
    plm_seek := MemoryGetProcAddress(LDllHandle, 'plm_seek');
    plm_seek_frame := MemoryGetProcAddress(LDllHandle, 'plm_seek_frame');
    plm_set_audio_decode_callback := MemoryGetProcAddress(LDllHandle, 'plm_set_audio_decode_callback');
    plm_set_audio_enabled := MemoryGetProcAddress(LDllHandle, 'plm_set_audio_enabled');
    plm_set_audio_lead_time := MemoryGetProcAddress(LDllHandle, 'plm_set_audio_lead_time');
    plm_set_audio_stream := MemoryGetProcAddress(LDllHandle, 'plm_set_audio_stream');
    plm_set_loop := MemoryGetProcAddress(LDllHandle, 'plm_set_loop');
    plm_set_video_decode_callback := MemoryGetProcAddress(LDllHandle, 'plm_set_video_decode_callback');
    plm_set_video_enabled := MemoryGetProcAddress(LDllHandle, 'plm_set_video_enabled');
    plm_video_create_with_buffer := MemoryGetProcAddress(LDllHandle, 'plm_video_create_with_buffer');
    plm_video_decode := MemoryGetProcAddress(LDllHandle, 'plm_video_decode');
    plm_video_destroy := MemoryGetProcAddress(LDllHandle, 'plm_video_destroy');
    plm_video_get_framerate := MemoryGetProcAddress(LDllHandle, 'plm_video_get_framerate');
    plm_video_get_height := MemoryGetProcAddress(LDllHandle, 'plm_video_get_height');
    plm_video_get_time := MemoryGetProcAddress(LDllHandle, 'plm_video_get_time');
    plm_video_get_width := MemoryGetProcAddress(LDllHandle, 'plm_video_get_width');
    plm_video_has_ended := MemoryGetProcAddress(LDllHandle, 'plm_video_has_ended');
    plm_video_has_header := MemoryGetProcAddress(LDllHandle, 'plm_video_has_header');
    plm_video_rewind := MemoryGetProcAddress(LDllHandle, 'plm_video_rewind');
    plm_video_set_no_delay := MemoryGetProcAddress(LDllHandle, 'plm_video_set_no_delay');
    plm_video_set_time := MemoryGetProcAddress(LDllHandle, 'plm_video_set_time');
    SDL_abs := MemoryGetProcAddress(LDllHandle, 'SDL_abs');
    SDL_acos := MemoryGetProcAddress(LDllHandle, 'SDL_acos');
    SDL_acosf := MemoryGetProcAddress(LDllHandle, 'SDL_acosf');
    SDL_AddEventWatch := MemoryGetProcAddress(LDllHandle, 'SDL_AddEventWatch');
    SDL_AddHintCallback := MemoryGetProcAddress(LDllHandle, 'SDL_AddHintCallback');
    SDL_AddTimer := MemoryGetProcAddress(LDllHandle, 'SDL_AddTimer');
    SDL_AllocFormat := MemoryGetProcAddress(LDllHandle, 'SDL_AllocFormat');
    SDL_AllocPalette := MemoryGetProcAddress(LDllHandle, 'SDL_AllocPalette');
    SDL_AllocRW := MemoryGetProcAddress(LDllHandle, 'SDL_AllocRW');
    SDL_asin := MemoryGetProcAddress(LDllHandle, 'SDL_asin');
    SDL_asinf := MemoryGetProcAddress(LDllHandle, 'SDL_asinf');
    SDL_asprintf := MemoryGetProcAddress(LDllHandle, 'SDL_asprintf');
    SDL_atan := MemoryGetProcAddress(LDllHandle, 'SDL_atan');
    SDL_atan2 := MemoryGetProcAddress(LDllHandle, 'SDL_atan2');
    SDL_atan2f := MemoryGetProcAddress(LDllHandle, 'SDL_atan2f');
    SDL_atanf := MemoryGetProcAddress(LDllHandle, 'SDL_atanf');
    SDL_atof := MemoryGetProcAddress(LDllHandle, 'SDL_atof');
    SDL_atoi := MemoryGetProcAddress(LDllHandle, 'SDL_atoi');
    SDL_AtomicAdd := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicAdd');
    SDL_AtomicCAS := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicCAS');
    SDL_AtomicCASPtr := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicCASPtr');
    SDL_AtomicGet := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicGet');
    SDL_AtomicGetPtr := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicGetPtr');
    SDL_AtomicLock := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicLock');
    SDL_AtomicSet := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicSet');
    SDL_AtomicSetPtr := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicSetPtr');
    SDL_AtomicTryLock := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicTryLock');
    SDL_AtomicUnlock := MemoryGetProcAddress(LDllHandle, 'SDL_AtomicUnlock');
    SDL_AudioInit := MemoryGetProcAddress(LDllHandle, 'SDL_AudioInit');
    SDL_AudioQuit := MemoryGetProcAddress(LDllHandle, 'SDL_AudioQuit');
    SDL_AudioStreamAvailable := MemoryGetProcAddress(LDllHandle, 'SDL_AudioStreamAvailable');
    SDL_AudioStreamClear := MemoryGetProcAddress(LDllHandle, 'SDL_AudioStreamClear');
    SDL_AudioStreamFlush := MemoryGetProcAddress(LDllHandle, 'SDL_AudioStreamFlush');
    SDL_AudioStreamGet := MemoryGetProcAddress(LDllHandle, 'SDL_AudioStreamGet');
    SDL_AudioStreamPut := MemoryGetProcAddress(LDllHandle, 'SDL_AudioStreamPut');
    SDL_BuildAudioCVT := MemoryGetProcAddress(LDllHandle, 'SDL_BuildAudioCVT');
    SDL_CalculateGammaRamp := MemoryGetProcAddress(LDllHandle, 'SDL_CalculateGammaRamp');
    SDL_calloc := MemoryGetProcAddress(LDllHandle, 'SDL_calloc');
    SDL_CaptureMouse := MemoryGetProcAddress(LDllHandle, 'SDL_CaptureMouse');
    SDL_ceil := MemoryGetProcAddress(LDllHandle, 'SDL_ceil');
    SDL_ceilf := MemoryGetProcAddress(LDllHandle, 'SDL_ceilf');
    SDL_ClearError := MemoryGetProcAddress(LDllHandle, 'SDL_ClearError');
    SDL_ClearHints := MemoryGetProcAddress(LDllHandle, 'SDL_ClearHints');
    SDL_ClearQueuedAudio := MemoryGetProcAddress(LDllHandle, 'SDL_ClearQueuedAudio');
    SDL_CloseAudio := MemoryGetProcAddress(LDllHandle, 'SDL_CloseAudio');
    SDL_CloseAudioDevice := MemoryGetProcAddress(LDllHandle, 'SDL_CloseAudioDevice');
    SDL_ComposeCustomBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_ComposeCustomBlendMode');
    SDL_CondBroadcast := MemoryGetProcAddress(LDllHandle, 'SDL_CondBroadcast');
    SDL_CondSignal := MemoryGetProcAddress(LDllHandle, 'SDL_CondSignal');
    SDL_CondWait := MemoryGetProcAddress(LDllHandle, 'SDL_CondWait');
    SDL_CondWaitTimeout := MemoryGetProcAddress(LDllHandle, 'SDL_CondWaitTimeout');
    SDL_ConvertAudio := MemoryGetProcAddress(LDllHandle, 'SDL_ConvertAudio');
    SDL_ConvertPixels := MemoryGetProcAddress(LDllHandle, 'SDL_ConvertPixels');
    SDL_ConvertSurface := MemoryGetProcAddress(LDllHandle, 'SDL_ConvertSurface');
    SDL_ConvertSurfaceFormat := MemoryGetProcAddress(LDllHandle, 'SDL_ConvertSurfaceFormat');
    SDL_copysign := MemoryGetProcAddress(LDllHandle, 'SDL_copysign');
    SDL_copysignf := MemoryGetProcAddress(LDllHandle, 'SDL_copysignf');
    SDL_cos := MemoryGetProcAddress(LDllHandle, 'SDL_cos');
    SDL_cosf := MemoryGetProcAddress(LDllHandle, 'SDL_cosf');
    SDL_crc32 := MemoryGetProcAddress(LDllHandle, 'SDL_crc32');
    SDL_CreateColorCursor := MemoryGetProcAddress(LDllHandle, 'SDL_CreateColorCursor');
    SDL_CreateCond := MemoryGetProcAddress(LDllHandle, 'SDL_CreateCond');
    SDL_CreateCursor := MemoryGetProcAddress(LDllHandle, 'SDL_CreateCursor');
    SDL_CreateMutex := MemoryGetProcAddress(LDllHandle, 'SDL_CreateMutex');
    SDL_CreateRenderer := MemoryGetProcAddress(LDllHandle, 'SDL_CreateRenderer');
    SDL_CreateRGBSurface := MemoryGetProcAddress(LDllHandle, 'SDL_CreateRGBSurface');
    SDL_CreateRGBSurfaceFrom := MemoryGetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceFrom');
    SDL_CreateRGBSurfaceWithFormat := MemoryGetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceWithFormat');
    SDL_CreateRGBSurfaceWithFormatFrom := MemoryGetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceWithFormatFrom');
    SDL_CreateSemaphore := MemoryGetProcAddress(LDllHandle, 'SDL_CreateSemaphore');
    SDL_CreateShapedWindow := MemoryGetProcAddress(LDllHandle, 'SDL_CreateShapedWindow');
    SDL_CreateSoftwareRenderer := MemoryGetProcAddress(LDllHandle, 'SDL_CreateSoftwareRenderer');
    SDL_CreateSystemCursor := MemoryGetProcAddress(LDllHandle, 'SDL_CreateSystemCursor');
    SDL_CreateTexture := MemoryGetProcAddress(LDllHandle, 'SDL_CreateTexture');
    SDL_CreateTextureFromSurface := MemoryGetProcAddress(LDllHandle, 'SDL_CreateTextureFromSurface');
    SDL_CreateThread := MemoryGetProcAddress(LDllHandle, 'SDL_CreateThread');
    SDL_CreateThreadWithStackSize := MemoryGetProcAddress(LDllHandle, 'SDL_CreateThreadWithStackSize');
    SDL_CreateWindow := MemoryGetProcAddress(LDllHandle, 'SDL_CreateWindow');
    SDL_CreateWindowAndRenderer := MemoryGetProcAddress(LDllHandle, 'SDL_CreateWindowAndRenderer');
    SDL_CreateWindowFrom := MemoryGetProcAddress(LDllHandle, 'SDL_CreateWindowFrom');
    SDL_Delay := MemoryGetProcAddress(LDllHandle, 'SDL_Delay');
    SDL_DelEventWatch := MemoryGetProcAddress(LDllHandle, 'SDL_DelEventWatch');
    SDL_DelHintCallback := MemoryGetProcAddress(LDllHandle, 'SDL_DelHintCallback');
    SDL_DequeueAudio := MemoryGetProcAddress(LDllHandle, 'SDL_DequeueAudio');
    SDL_DestroyCond := MemoryGetProcAddress(LDllHandle, 'SDL_DestroyCond');
    SDL_DestroyMutex := MemoryGetProcAddress(LDllHandle, 'SDL_DestroyMutex');
    SDL_DestroyRenderer := MemoryGetProcAddress(LDllHandle, 'SDL_DestroyRenderer');
    SDL_DestroySemaphore := MemoryGetProcAddress(LDllHandle, 'SDL_DestroySemaphore');
    SDL_DestroyTexture := MemoryGetProcAddress(LDllHandle, 'SDL_DestroyTexture');
    SDL_DestroyWindow := MemoryGetProcAddress(LDllHandle, 'SDL_DestroyWindow');
    SDL_DetachThread := MemoryGetProcAddress(LDllHandle, 'SDL_DetachThread');
    SDL_Direct3D9GetAdapterIndex := MemoryGetProcAddress(LDllHandle, 'SDL_Direct3D9GetAdapterIndex');
    SDL_DisableScreenSaver := MemoryGetProcAddress(LDllHandle, 'SDL_DisableScreenSaver');
    SDL_DuplicateSurface := MemoryGetProcAddress(LDllHandle, 'SDL_DuplicateSurface');
    SDL_DXGIGetOutputInfo := MemoryGetProcAddress(LDllHandle, 'SDL_DXGIGetOutputInfo');
    SDL_EnableScreenSaver := MemoryGetProcAddress(LDllHandle, 'SDL_EnableScreenSaver');
    SDL_EnclosePoints := MemoryGetProcAddress(LDllHandle, 'SDL_EnclosePoints');
    SDL_Error := MemoryGetProcAddress(LDllHandle, 'SDL_Error');
    SDL_EventState := MemoryGetProcAddress(LDllHandle, 'SDL_EventState');
    SDL_exp := MemoryGetProcAddress(LDllHandle, 'SDL_exp');
    SDL_expf := MemoryGetProcAddress(LDllHandle, 'SDL_expf');
    SDL_fabs := MemoryGetProcAddress(LDllHandle, 'SDL_fabs');
    SDL_fabsf := MemoryGetProcAddress(LDllHandle, 'SDL_fabsf');
    SDL_FillRect := MemoryGetProcAddress(LDllHandle, 'SDL_FillRect');
    SDL_FillRects := MemoryGetProcAddress(LDllHandle, 'SDL_FillRects');
    SDL_FilterEvents := MemoryGetProcAddress(LDllHandle, 'SDL_FilterEvents');
    SDL_FlashWindow := MemoryGetProcAddress(LDllHandle, 'SDL_FlashWindow');
    SDL_floor := MemoryGetProcAddress(LDllHandle, 'SDL_floor');
    SDL_floorf := MemoryGetProcAddress(LDllHandle, 'SDL_floorf');
    SDL_FlushEvent := MemoryGetProcAddress(LDllHandle, 'SDL_FlushEvent');
    SDL_FlushEvents := MemoryGetProcAddress(LDllHandle, 'SDL_FlushEvents');
    SDL_fmod := MemoryGetProcAddress(LDllHandle, 'SDL_fmod');
    SDL_fmodf := MemoryGetProcAddress(LDllHandle, 'SDL_fmodf');
    SDL_free := MemoryGetProcAddress(LDllHandle, 'SDL_free');
    SDL_FreeAudioStream := MemoryGetProcAddress(LDllHandle, 'SDL_FreeAudioStream');
    SDL_FreeCursor := MemoryGetProcAddress(LDllHandle, 'SDL_FreeCursor');
    SDL_FreeFormat := MemoryGetProcAddress(LDllHandle, 'SDL_FreeFormat');
    SDL_FreePalette := MemoryGetProcAddress(LDllHandle, 'SDL_FreePalette');
    SDL_FreeRW := MemoryGetProcAddress(LDllHandle, 'SDL_FreeRW');
    SDL_FreeSurface := MemoryGetProcAddress(LDllHandle, 'SDL_FreeSurface');
    SDL_FreeWAV := MemoryGetProcAddress(LDllHandle, 'SDL_FreeWAV');
    SDL_GameControllerAddMapping := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerAddMapping');
    SDL_GameControllerAddMappingsFromRW := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerAddMappingsFromRW');
    SDL_GameControllerClose := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerClose');
    SDL_GameControllerEventState := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerEventState');
    SDL_GameControllerFromInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerFromInstanceID');
    SDL_GameControllerFromPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerFromPlayerIndex');
    SDL_GameControllerGetAppleSFSymbolsNameForAxis := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForAxis');
    SDL_GameControllerGetAppleSFSymbolsNameForButton := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForButton');
    SDL_GameControllerGetAttached := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetAttached');
    SDL_GameControllerGetAxis := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetAxis');
    SDL_GameControllerGetAxisFromString := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetAxisFromString');
    SDL_GameControllerGetBindForAxis := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetBindForAxis');
    SDL_GameControllerGetBindForButton := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetBindForButton');
    SDL_GameControllerGetButton := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetButton');
    SDL_GameControllerGetButtonFromString := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetButtonFromString');
    SDL_GameControllerGetJoystick := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetJoystick');
    SDL_GameControllerGetNumTouchpadFingers := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetNumTouchpadFingers');
    SDL_GameControllerGetNumTouchpads := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetNumTouchpads');
    SDL_GameControllerGetPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetPlayerIndex');
    SDL_GameControllerGetProduct := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetProduct');
    SDL_GameControllerGetProductVersion := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetProductVersion');
    SDL_GameControllerGetSensorData := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetSensorData');
    SDL_GameControllerGetSensorDataRate := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetSensorDataRate');
    SDL_GameControllerGetSerial := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetSerial');
    SDL_GameControllerGetStringForAxis := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetStringForAxis');
    SDL_GameControllerGetStringForButton := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetStringForButton');
    SDL_GameControllerGetTouchpadFinger := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetTouchpadFinger');
    SDL_GameControllerGetType := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetType');
    SDL_GameControllerGetVendor := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerGetVendor');
    SDL_GameControllerHasAxis := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasAxis');
    SDL_GameControllerHasButton := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasButton');
    SDL_GameControllerHasLED := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasLED');
    SDL_GameControllerHasRumble := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasRumble');
    SDL_GameControllerHasRumbleTriggers := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasRumbleTriggers');
    SDL_GameControllerHasSensor := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerHasSensor');
    SDL_GameControllerIsSensorEnabled := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerIsSensorEnabled');
    SDL_GameControllerMapping := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerMapping');
    SDL_GameControllerMappingForDeviceIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerMappingForDeviceIndex');
    SDL_GameControllerMappingForGUID := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerMappingForGUID');
    SDL_GameControllerMappingForIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerMappingForIndex');
    SDL_GameControllerName := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerName');
    SDL_GameControllerNameForIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerNameForIndex');
    SDL_GameControllerNumMappings := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerNumMappings');
    SDL_GameControllerOpen := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerOpen');
    SDL_GameControllerRumble := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerRumble');
    SDL_GameControllerRumbleTriggers := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerRumbleTriggers');
    SDL_GameControllerSendEffect := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerSendEffect');
    SDL_GameControllerSetLED := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerSetLED');
    SDL_GameControllerSetPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerSetPlayerIndex');
    SDL_GameControllerSetSensorEnabled := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerSetSensorEnabled');
    SDL_GameControllerTypeForIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerTypeForIndex');
    SDL_GameControllerUpdate := MemoryGetProcAddress(LDllHandle, 'SDL_GameControllerUpdate');
    SDL_GetAssertionHandler := MemoryGetProcAddress(LDllHandle, 'SDL_GetAssertionHandler');
    SDL_GetAssertionReport := MemoryGetProcAddress(LDllHandle, 'SDL_GetAssertionReport');
    SDL_GetAudioDeviceName := MemoryGetProcAddress(LDllHandle, 'SDL_GetAudioDeviceName');
    SDL_GetAudioDeviceSpec := MemoryGetProcAddress(LDllHandle, 'SDL_GetAudioDeviceSpec');
    SDL_GetAudioDeviceStatus := MemoryGetProcAddress(LDllHandle, 'SDL_GetAudioDeviceStatus');
    SDL_GetAudioDriver := MemoryGetProcAddress(LDllHandle, 'SDL_GetAudioDriver');
    SDL_GetAudioStatus := MemoryGetProcAddress(LDllHandle, 'SDL_GetAudioStatus');
    SDL_GetBasePath := MemoryGetProcAddress(LDllHandle, 'SDL_GetBasePath');
    SDL_GetClipboardText := MemoryGetProcAddress(LDllHandle, 'SDL_GetClipboardText');
    SDL_GetClipRect := MemoryGetProcAddress(LDllHandle, 'SDL_GetClipRect');
    SDL_GetClosestDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetClosestDisplayMode');
    SDL_GetColorKey := MemoryGetProcAddress(LDllHandle, 'SDL_GetColorKey');
    SDL_GetCPUCacheLineSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetCPUCacheLineSize');
    SDL_GetCPUCount := MemoryGetProcAddress(LDllHandle, 'SDL_GetCPUCount');
    SDL_GetCurrentAudioDriver := MemoryGetProcAddress(LDllHandle, 'SDL_GetCurrentAudioDriver');
    SDL_GetCurrentDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetCurrentDisplayMode');
    SDL_GetCurrentVideoDriver := MemoryGetProcAddress(LDllHandle, 'SDL_GetCurrentVideoDriver');
    SDL_GetCursor := MemoryGetProcAddress(LDllHandle, 'SDL_GetCursor');
    SDL_GetDefaultAssertionHandler := MemoryGetProcAddress(LDllHandle, 'SDL_GetDefaultAssertionHandler');
    SDL_GetDefaultCursor := MemoryGetProcAddress(LDllHandle, 'SDL_GetDefaultCursor');
    SDL_GetDesktopDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetDesktopDisplayMode');
    SDL_GetDisplayBounds := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayBounds');
    SDL_GetDisplayDPI := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayDPI');
    SDL_GetDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayMode');
    SDL_GetDisplayName := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayName');
    SDL_GetDisplayOrientation := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayOrientation');
    SDL_GetDisplayUsableBounds := MemoryGetProcAddress(LDllHandle, 'SDL_GetDisplayUsableBounds');
    SDL_getenv := MemoryGetProcAddress(LDllHandle, 'SDL_getenv');
    SDL_GetError := MemoryGetProcAddress(LDllHandle, 'SDL_GetError');
    SDL_GetErrorMsg := MemoryGetProcAddress(LDllHandle, 'SDL_GetErrorMsg');
    SDL_GetEventFilter := MemoryGetProcAddress(LDllHandle, 'SDL_GetEventFilter');
    SDL_GetGlobalMouseState := MemoryGetProcAddress(LDllHandle, 'SDL_GetGlobalMouseState');
    SDL_GetGrabbedWindow := MemoryGetProcAddress(LDllHandle, 'SDL_GetGrabbedWindow');
    SDL_GetHint := MemoryGetProcAddress(LDllHandle, 'SDL_GetHint');
    SDL_GetHintBoolean := MemoryGetProcAddress(LDllHandle, 'SDL_GetHintBoolean');
    SDL_GetKeyboardFocus := MemoryGetProcAddress(LDllHandle, 'SDL_GetKeyboardFocus');
    SDL_GetKeyboardState := MemoryGetProcAddress(LDllHandle, 'SDL_GetKeyboardState');
    SDL_GetKeyFromName := MemoryGetProcAddress(LDllHandle, 'SDL_GetKeyFromName');
    SDL_GetKeyFromScancode := MemoryGetProcAddress(LDllHandle, 'SDL_GetKeyFromScancode');
    SDL_GetKeyName := MemoryGetProcAddress(LDllHandle, 'SDL_GetKeyName');
    SDL_GetMemoryFunctions := MemoryGetProcAddress(LDllHandle, 'SDL_GetMemoryFunctions');
    SDL_GetModState := MemoryGetProcAddress(LDllHandle, 'SDL_GetModState');
    SDL_GetMouseFocus := MemoryGetProcAddress(LDllHandle, 'SDL_GetMouseFocus');
    SDL_GetMouseState := MemoryGetProcAddress(LDllHandle, 'SDL_GetMouseState');
    SDL_GetNumAllocations := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumAllocations');
    SDL_GetNumAudioDevices := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumAudioDevices');
    SDL_GetNumAudioDrivers := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumAudioDrivers');
    SDL_GetNumDisplayModes := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumDisplayModes');
    SDL_GetNumRenderDrivers := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumRenderDrivers');
    SDL_GetNumTouchDevices := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumTouchDevices');
    SDL_GetNumTouchFingers := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumTouchFingers');
    SDL_GetNumVideoDisplays := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumVideoDisplays');
    SDL_GetNumVideoDrivers := MemoryGetProcAddress(LDllHandle, 'SDL_GetNumVideoDrivers');
    SDL_GetPerformanceCounter := MemoryGetProcAddress(LDllHandle, 'SDL_GetPerformanceCounter');
    SDL_GetPerformanceFrequency := MemoryGetProcAddress(LDllHandle, 'SDL_GetPerformanceFrequency');
    SDL_GetPixelFormatName := MemoryGetProcAddress(LDllHandle, 'SDL_GetPixelFormatName');
    SDL_GetPlatform := MemoryGetProcAddress(LDllHandle, 'SDL_GetPlatform');
    SDL_GetPowerInfo := MemoryGetProcAddress(LDllHandle, 'SDL_GetPowerInfo');
    SDL_GetPreferredLocales := MemoryGetProcAddress(LDllHandle, 'SDL_GetPreferredLocales');
    SDL_GetPrefPath := MemoryGetProcAddress(LDllHandle, 'SDL_GetPrefPath');
    SDL_GetQueuedAudioSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetQueuedAudioSize');
    SDL_GetRelativeMouseMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetRelativeMouseMode');
    SDL_GetRelativeMouseState := MemoryGetProcAddress(LDllHandle, 'SDL_GetRelativeMouseState');
    SDL_GetRenderDrawBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetRenderDrawBlendMode');
    SDL_GetRenderDrawColor := MemoryGetProcAddress(LDllHandle, 'SDL_GetRenderDrawColor');
    SDL_GetRenderDriverInfo := MemoryGetProcAddress(LDllHandle, 'SDL_GetRenderDriverInfo');
    SDL_GetRenderer := MemoryGetProcAddress(LDllHandle, 'SDL_GetRenderer');
    SDL_GetRendererInfo := MemoryGetProcAddress(LDllHandle, 'SDL_GetRendererInfo');
    SDL_GetRendererOutputSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetRendererOutputSize');
    SDL_GetRenderTarget := MemoryGetProcAddress(LDllHandle, 'SDL_GetRenderTarget');
    SDL_GetRevision := MemoryGetProcAddress(LDllHandle, 'SDL_GetRevision');
    SDL_GetRevisionNumber := MemoryGetProcAddress(LDllHandle, 'SDL_GetRevisionNumber');
    SDL_GetRGB := MemoryGetProcAddress(LDllHandle, 'SDL_GetRGB');
    SDL_GetRGBA := MemoryGetProcAddress(LDllHandle, 'SDL_GetRGBA');
    SDL_GetScancodeFromKey := MemoryGetProcAddress(LDllHandle, 'SDL_GetScancodeFromKey');
    SDL_GetScancodeFromName := MemoryGetProcAddress(LDllHandle, 'SDL_GetScancodeFromName');
    SDL_GetScancodeName := MemoryGetProcAddress(LDllHandle, 'SDL_GetScancodeName');
    SDL_GetShapedWindowMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetShapedWindowMode');
    SDL_GetSurfaceAlphaMod := MemoryGetProcAddress(LDllHandle, 'SDL_GetSurfaceAlphaMod');
    SDL_GetSurfaceBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetSurfaceBlendMode');
    SDL_GetSurfaceColorMod := MemoryGetProcAddress(LDllHandle, 'SDL_GetSurfaceColorMod');
    SDL_GetSystemRAM := MemoryGetProcAddress(LDllHandle, 'SDL_GetSystemRAM');
    SDL_GetTextureAlphaMod := MemoryGetProcAddress(LDllHandle, 'SDL_GetTextureAlphaMod');
    SDL_GetTextureBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetTextureBlendMode');
    SDL_GetTextureColorMod := MemoryGetProcAddress(LDllHandle, 'SDL_GetTextureColorMod');
    SDL_GetTextureScaleMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetTextureScaleMode');
    SDL_GetTextureUserData := MemoryGetProcAddress(LDllHandle, 'SDL_GetTextureUserData');
    SDL_GetThreadID := MemoryGetProcAddress(LDllHandle, 'SDL_GetThreadID');
    SDL_GetThreadName := MemoryGetProcAddress(LDllHandle, 'SDL_GetThreadName');
    SDL_GetTicks := MemoryGetProcAddress(LDllHandle, 'SDL_GetTicks');
    SDL_GetTicks64 := MemoryGetProcAddress(LDllHandle, 'SDL_GetTicks64');
    SDL_GetTouchDevice := MemoryGetProcAddress(LDllHandle, 'SDL_GetTouchDevice');
    SDL_GetTouchDeviceType := MemoryGetProcAddress(LDllHandle, 'SDL_GetTouchDeviceType');
    SDL_GetTouchFinger := MemoryGetProcAddress(LDllHandle, 'SDL_GetTouchFinger');
    SDL_GetVersion := MemoryGetProcAddress(LDllHandle, 'SDL_GetVersion');
    SDL_GetVideoDriver := MemoryGetProcAddress(LDllHandle, 'SDL_GetVideoDriver');
    SDL_GetWindowBordersSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowBordersSize');
    SDL_GetWindowBrightness := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowBrightness');
    SDL_GetWindowData := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowData');
    SDL_GetWindowDisplayIndex := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowDisplayIndex');
    SDL_GetWindowDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowDisplayMode');
    SDL_GetWindowFlags := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowFlags');
    SDL_GetWindowFromID := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowFromID');
    SDL_GetWindowGammaRamp := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowGammaRamp');
    SDL_GetWindowGrab := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowGrab');
    SDL_GetWindowICCProfile := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowICCProfile');
    SDL_GetWindowID := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowID');
    SDL_GetWindowKeyboardGrab := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowKeyboardGrab');
    SDL_GetWindowMaximumSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowMaximumSize');
    SDL_GetWindowMinimumSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowMinimumSize');
    SDL_GetWindowMouseGrab := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowMouseGrab');
    SDL_GetWindowMouseRect := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowMouseRect');
    SDL_GetWindowOpacity := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowOpacity');
    SDL_GetWindowPixelFormat := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowPixelFormat');
    SDL_GetWindowPosition := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowPosition');
    SDL_GetWindowSize := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowSize');
    SDL_GetWindowSurface := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowSurface');
    SDL_GetWindowTitle := MemoryGetProcAddress(LDllHandle, 'SDL_GetWindowTitle');
    SDL_GetYUVConversionMode := MemoryGetProcAddress(LDllHandle, 'SDL_GetYUVConversionMode');
    SDL_GetYUVConversionModeForResolution := MemoryGetProcAddress(LDllHandle, 'SDL_GetYUVConversionModeForResolution');
    SDL_GL_BindTexture := MemoryGetProcAddress(LDllHandle, 'SDL_GL_BindTexture');
    SDL_GL_CreateContext := MemoryGetProcAddress(LDllHandle, 'SDL_GL_CreateContext');
    SDL_GL_DeleteContext := MemoryGetProcAddress(LDllHandle, 'SDL_GL_DeleteContext');
    SDL_GL_ExtensionSupported := MemoryGetProcAddress(LDllHandle, 'SDL_GL_ExtensionSupported');
    SDL_GL_GetAttribute := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetAttribute');
    SDL_GL_GetCurrentContext := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetCurrentContext');
    SDL_GL_GetCurrentWindow := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetCurrentWindow');
    SDL_GL_GetDrawableSize := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetDrawableSize');
    SDL_GL_GetProcAddress := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetProcAddress');
    SDL_GL_GetSwapInterval := MemoryGetProcAddress(LDllHandle, 'SDL_GL_GetSwapInterval');
    SDL_GL_LoadLibrary := MemoryGetProcAddress(LDllHandle, 'SDL_GL_LoadLibrary');
    SDL_GL_MakeCurrent := MemoryGetProcAddress(LDllHandle, 'SDL_GL_MakeCurrent');
    SDL_GL_ResetAttributes := MemoryGetProcAddress(LDllHandle, 'SDL_GL_ResetAttributes');
    SDL_GL_SetAttribute := MemoryGetProcAddress(LDllHandle, 'SDL_GL_SetAttribute');
    SDL_GL_SetSwapInterval := MemoryGetProcAddress(LDllHandle, 'SDL_GL_SetSwapInterval');
    SDL_GL_SwapWindow := MemoryGetProcAddress(LDllHandle, 'SDL_GL_SwapWindow');
    SDL_GL_UnbindTexture := MemoryGetProcAddress(LDllHandle, 'SDL_GL_UnbindTexture');
    SDL_GL_UnloadLibrary := MemoryGetProcAddress(LDllHandle, 'SDL_GL_UnloadLibrary');
    SDL_HapticClose := MemoryGetProcAddress(LDllHandle, 'SDL_HapticClose');
    SDL_HapticDestroyEffect := MemoryGetProcAddress(LDllHandle, 'SDL_HapticDestroyEffect');
    SDL_HapticEffectSupported := MemoryGetProcAddress(LDllHandle, 'SDL_HapticEffectSupported');
    SDL_HapticGetEffectStatus := MemoryGetProcAddress(LDllHandle, 'SDL_HapticGetEffectStatus');
    SDL_HapticIndex := MemoryGetProcAddress(LDllHandle, 'SDL_HapticIndex');
    SDL_HapticName := MemoryGetProcAddress(LDllHandle, 'SDL_HapticName');
    SDL_HapticNewEffect := MemoryGetProcAddress(LDllHandle, 'SDL_HapticNewEffect');
    SDL_HapticNumAxes := MemoryGetProcAddress(LDllHandle, 'SDL_HapticNumAxes');
    SDL_HapticNumEffects := MemoryGetProcAddress(LDllHandle, 'SDL_HapticNumEffects');
    SDL_HapticNumEffectsPlaying := MemoryGetProcAddress(LDllHandle, 'SDL_HapticNumEffectsPlaying');
    SDL_HapticOpen := MemoryGetProcAddress(LDllHandle, 'SDL_HapticOpen');
    SDL_HapticOpened := MemoryGetProcAddress(LDllHandle, 'SDL_HapticOpened');
    SDL_HapticOpenFromJoystick := MemoryGetProcAddress(LDllHandle, 'SDL_HapticOpenFromJoystick');
    SDL_HapticOpenFromMouse := MemoryGetProcAddress(LDllHandle, 'SDL_HapticOpenFromMouse');
    SDL_HapticPause := MemoryGetProcAddress(LDllHandle, 'SDL_HapticPause');
    SDL_HapticQuery := MemoryGetProcAddress(LDllHandle, 'SDL_HapticQuery');
    SDL_HapticRumbleInit := MemoryGetProcAddress(LDllHandle, 'SDL_HapticRumbleInit');
    SDL_HapticRumblePlay := MemoryGetProcAddress(LDllHandle, 'SDL_HapticRumblePlay');
    SDL_HapticRumbleStop := MemoryGetProcAddress(LDllHandle, 'SDL_HapticRumbleStop');
    SDL_HapticRumbleSupported := MemoryGetProcAddress(LDllHandle, 'SDL_HapticRumbleSupported');
    SDL_HapticRunEffect := MemoryGetProcAddress(LDllHandle, 'SDL_HapticRunEffect');
    SDL_HapticSetAutocenter := MemoryGetProcAddress(LDllHandle, 'SDL_HapticSetAutocenter');
    SDL_HapticSetGain := MemoryGetProcAddress(LDllHandle, 'SDL_HapticSetGain');
    SDL_HapticStopAll := MemoryGetProcAddress(LDllHandle, 'SDL_HapticStopAll');
    SDL_HapticStopEffect := MemoryGetProcAddress(LDllHandle, 'SDL_HapticStopEffect');
    SDL_HapticUnpause := MemoryGetProcAddress(LDllHandle, 'SDL_HapticUnpause');
    SDL_HapticUpdateEffect := MemoryGetProcAddress(LDllHandle, 'SDL_HapticUpdateEffect');
    SDL_Has3DNow := MemoryGetProcAddress(LDllHandle, 'SDL_Has3DNow');
    SDL_HasAltiVec := MemoryGetProcAddress(LDllHandle, 'SDL_HasAltiVec');
    SDL_HasARMSIMD := MemoryGetProcAddress(LDllHandle, 'SDL_HasARMSIMD');
    SDL_HasAVX := MemoryGetProcAddress(LDllHandle, 'SDL_HasAVX');
    SDL_HasAVX2 := MemoryGetProcAddress(LDllHandle, 'SDL_HasAVX2');
    SDL_HasAVX512F := MemoryGetProcAddress(LDllHandle, 'SDL_HasAVX512F');
    SDL_HasClipboardText := MemoryGetProcAddress(LDllHandle, 'SDL_HasClipboardText');
    SDL_HasColorKey := MemoryGetProcAddress(LDllHandle, 'SDL_HasColorKey');
    SDL_HasEvent := MemoryGetProcAddress(LDllHandle, 'SDL_HasEvent');
    SDL_HasEvents := MemoryGetProcAddress(LDllHandle, 'SDL_HasEvents');
    SDL_HasIntersection := MemoryGetProcAddress(LDllHandle, 'SDL_HasIntersection');
    SDL_HasMMX := MemoryGetProcAddress(LDllHandle, 'SDL_HasMMX');
    SDL_HasNEON := MemoryGetProcAddress(LDllHandle, 'SDL_HasNEON');
    SDL_HasRDTSC := MemoryGetProcAddress(LDllHandle, 'SDL_HasRDTSC');
    SDL_HasScreenKeyboardSupport := MemoryGetProcAddress(LDllHandle, 'SDL_HasScreenKeyboardSupport');
    SDL_HasSSE := MemoryGetProcAddress(LDllHandle, 'SDL_HasSSE');
    SDL_HasSSE2 := MemoryGetProcAddress(LDllHandle, 'SDL_HasSSE2');
    SDL_HasSSE3 := MemoryGetProcAddress(LDllHandle, 'SDL_HasSSE3');
    SDL_HasSSE41 := MemoryGetProcAddress(LDllHandle, 'SDL_HasSSE41');
    SDL_HasSSE42 := MemoryGetProcAddress(LDllHandle, 'SDL_HasSSE42');
    SDL_HasSurfaceRLE := MemoryGetProcAddress(LDllHandle, 'SDL_HasSurfaceRLE');
    SDL_hid_ble_scan := MemoryGetProcAddress(LDllHandle, 'SDL_hid_ble_scan');
    SDL_hid_close := MemoryGetProcAddress(LDllHandle, 'SDL_hid_close');
    SDL_hid_device_change_count := MemoryGetProcAddress(LDllHandle, 'SDL_hid_device_change_count');
    SDL_hid_enumerate := MemoryGetProcAddress(LDllHandle, 'SDL_hid_enumerate');
    SDL_hid_exit := MemoryGetProcAddress(LDllHandle, 'SDL_hid_exit');
    SDL_hid_free_enumeration := MemoryGetProcAddress(LDllHandle, 'SDL_hid_free_enumeration');
    SDL_hid_get_feature_report := MemoryGetProcAddress(LDllHandle, 'SDL_hid_get_feature_report');
    SDL_hid_get_indexed_string := MemoryGetProcAddress(LDllHandle, 'SDL_hid_get_indexed_string');
    SDL_hid_get_manufacturer_string := MemoryGetProcAddress(LDllHandle, 'SDL_hid_get_manufacturer_string');
    SDL_hid_get_product_string := MemoryGetProcAddress(LDllHandle, 'SDL_hid_get_product_string');
    SDL_hid_get_serial_number_string := MemoryGetProcAddress(LDllHandle, 'SDL_hid_get_serial_number_string');
    SDL_hid_init := MemoryGetProcAddress(LDllHandle, 'SDL_hid_init');
    SDL_hid_open := MemoryGetProcAddress(LDllHandle, 'SDL_hid_open');
    SDL_hid_open_path := MemoryGetProcAddress(LDllHandle, 'SDL_hid_open_path');
    SDL_hid_read := MemoryGetProcAddress(LDllHandle, 'SDL_hid_read');
    SDL_hid_read_timeout := MemoryGetProcAddress(LDllHandle, 'SDL_hid_read_timeout');
    SDL_hid_send_feature_report := MemoryGetProcAddress(LDllHandle, 'SDL_hid_send_feature_report');
    SDL_hid_set_nonblocking := MemoryGetProcAddress(LDllHandle, 'SDL_hid_set_nonblocking');
    SDL_hid_write := MemoryGetProcAddress(LDllHandle, 'SDL_hid_write');
    SDL_HideWindow := MemoryGetProcAddress(LDllHandle, 'SDL_HideWindow');
    SDL_iconv := MemoryGetProcAddress(LDllHandle, 'SDL_iconv');
    SDL_iconv_close := MemoryGetProcAddress(LDllHandle, 'SDL_iconv_close');
    SDL_iconv_open := MemoryGetProcAddress(LDllHandle, 'SDL_iconv_open');
    SDL_iconv_string := MemoryGetProcAddress(LDllHandle, 'SDL_iconv_string');
    SDL_Init := MemoryGetProcAddress(LDllHandle, 'SDL_Init');
    SDL_InitSubSystem := MemoryGetProcAddress(LDllHandle, 'SDL_InitSubSystem');
    SDL_IntersectRect := MemoryGetProcAddress(LDllHandle, 'SDL_IntersectRect');
    SDL_IntersectRectAndLine := MemoryGetProcAddress(LDllHandle, 'SDL_IntersectRectAndLine');
    SDL_isalnum := MemoryGetProcAddress(LDllHandle, 'SDL_isalnum');
    SDL_isalpha := MemoryGetProcAddress(LDllHandle, 'SDL_isalpha');
    SDL_isblank := MemoryGetProcAddress(LDllHandle, 'SDL_isblank');
    SDL_iscntrl := MemoryGetProcAddress(LDllHandle, 'SDL_iscntrl');
    SDL_isdigit := MemoryGetProcAddress(LDllHandle, 'SDL_isdigit');
    SDL_IsGameController := MemoryGetProcAddress(LDllHandle, 'SDL_IsGameController');
    SDL_isgraph := MemoryGetProcAddress(LDllHandle, 'SDL_isgraph');
    SDL_islower := MemoryGetProcAddress(LDllHandle, 'SDL_islower');
    SDL_isprint := MemoryGetProcAddress(LDllHandle, 'SDL_isprint');
    SDL_ispunct := MemoryGetProcAddress(LDllHandle, 'SDL_ispunct');
    SDL_IsScreenKeyboardShown := MemoryGetProcAddress(LDllHandle, 'SDL_IsScreenKeyboardShown');
    SDL_IsScreenSaverEnabled := MemoryGetProcAddress(LDllHandle, 'SDL_IsScreenSaverEnabled');
    SDL_IsShapedWindow := MemoryGetProcAddress(LDllHandle, 'SDL_IsShapedWindow');
    SDL_isspace := MemoryGetProcAddress(LDllHandle, 'SDL_isspace');
    SDL_IsTablet := MemoryGetProcAddress(LDllHandle, 'SDL_IsTablet');
    SDL_IsTextInputActive := MemoryGetProcAddress(LDllHandle, 'SDL_IsTextInputActive');
    SDL_isupper := MemoryGetProcAddress(LDllHandle, 'SDL_isupper');
    SDL_isxdigit := MemoryGetProcAddress(LDllHandle, 'SDL_isxdigit');
    SDL_itoa := MemoryGetProcAddress(LDllHandle, 'SDL_itoa');
    SDL_JoystickAttachVirtual := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickAttachVirtual');
    SDL_JoystickClose := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickClose');
    SDL_JoystickCurrentPowerLevel := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickCurrentPowerLevel');
    SDL_JoystickDetachVirtual := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickDetachVirtual');
    SDL_JoystickEventState := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickEventState');
    SDL_JoystickFromInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickFromInstanceID');
    SDL_JoystickFromPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickFromPlayerIndex');
    SDL_JoystickGetAttached := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetAttached');
    SDL_JoystickGetAxis := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetAxis');
    SDL_JoystickGetAxisInitialState := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetAxisInitialState');
    SDL_JoystickGetBall := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetBall');
    SDL_JoystickGetButton := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetButton');
    SDL_JoystickGetDeviceGUID := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceGUID');
    SDL_JoystickGetDeviceInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceInstanceID');
    SDL_JoystickGetDevicePlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDevicePlayerIndex');
    SDL_JoystickGetDeviceProduct := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceProduct');
    SDL_JoystickGetDeviceProductVersion := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceProductVersion');
    SDL_JoystickGetDeviceType := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceType');
    SDL_JoystickGetDeviceVendor := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceVendor');
    SDL_JoystickGetGUID := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetGUID');
    SDL_JoystickGetGUIDFromString := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetGUIDFromString');
    SDL_JoystickGetGUIDString := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetGUIDString');
    SDL_JoystickGetHat := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetHat');
    SDL_JoystickGetPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetPlayerIndex');
    SDL_JoystickGetProduct := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetProduct');
    SDL_JoystickGetProductVersion := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetProductVersion');
    SDL_JoystickGetSerial := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetSerial');
    SDL_JoystickGetType := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetType');
    SDL_JoystickGetVendor := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickGetVendor');
    SDL_JoystickHasLED := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickHasLED');
    SDL_JoystickHasRumble := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickHasRumble');
    SDL_JoystickHasRumbleTriggers := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickHasRumbleTriggers');
    SDL_JoystickInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickInstanceID');
    SDL_JoystickIsHaptic := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickIsHaptic');
    SDL_JoystickIsVirtual := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickIsVirtual');
    SDL_JoystickName := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickName');
    SDL_JoystickNameForIndex := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickNameForIndex');
    SDL_JoystickNumAxes := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickNumAxes');
    SDL_JoystickNumBalls := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickNumBalls');
    SDL_JoystickNumButtons := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickNumButtons');
    SDL_JoystickNumHats := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickNumHats');
    SDL_JoystickOpen := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickOpen');
    SDL_JoystickRumble := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickRumble');
    SDL_JoystickRumbleTriggers := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickRumbleTriggers');
    SDL_JoystickSendEffect := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSendEffect');
    SDL_JoystickSetLED := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSetLED');
    SDL_JoystickSetPlayerIndex := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSetPlayerIndex');
    SDL_JoystickSetVirtualAxis := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualAxis');
    SDL_JoystickSetVirtualButton := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualButton');
    SDL_JoystickSetVirtualHat := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualHat');
    SDL_JoystickUpdate := MemoryGetProcAddress(LDllHandle, 'SDL_JoystickUpdate');
    SDL_lltoa := MemoryGetProcAddress(LDllHandle, 'SDL_lltoa');
    SDL_LoadBMP_RW := MemoryGetProcAddress(LDllHandle, 'SDL_LoadBMP_RW');
    SDL_LoadDollarTemplates := MemoryGetProcAddress(LDllHandle, 'SDL_LoadDollarTemplates');
    SDL_LoadFile := MemoryGetProcAddress(LDllHandle, 'SDL_LoadFile');
    SDL_LoadFile_RW := MemoryGetProcAddress(LDllHandle, 'SDL_LoadFile_RW');
    SDL_LoadFunction := MemoryGetProcAddress(LDllHandle, 'SDL_LoadFunction');
    SDL_LoadObject := MemoryGetProcAddress(LDllHandle, 'SDL_LoadObject');
    SDL_LoadWAV_RW := MemoryGetProcAddress(LDllHandle, 'SDL_LoadWAV_RW');
    SDL_LockAudio := MemoryGetProcAddress(LDllHandle, 'SDL_LockAudio');
    SDL_LockAudioDevice := MemoryGetProcAddress(LDllHandle, 'SDL_LockAudioDevice');
    SDL_LockJoysticks := MemoryGetProcAddress(LDllHandle, 'SDL_LockJoysticks');
    SDL_LockMutex := MemoryGetProcAddress(LDllHandle, 'SDL_LockMutex');
    SDL_LockSensors := MemoryGetProcAddress(LDllHandle, 'SDL_LockSensors');
    SDL_LockSurface := MemoryGetProcAddress(LDllHandle, 'SDL_LockSurface');
    SDL_LockTexture := MemoryGetProcAddress(LDllHandle, 'SDL_LockTexture');
    SDL_LockTextureToSurface := MemoryGetProcAddress(LDllHandle, 'SDL_LockTextureToSurface');
    SDL_log := MemoryGetProcAddress(LDllHandle, 'SDL_log');
    SDL_Log_ := MemoryGetProcAddress(LDllHandle, 'SDL_Log');
    SDL_log10 := MemoryGetProcAddress(LDllHandle, 'SDL_log10');
    SDL_log10f := MemoryGetProcAddress(LDllHandle, 'SDL_log10f');
    SDL_LogCritical := MemoryGetProcAddress(LDllHandle, 'SDL_LogCritical');
    SDL_LogDebug := MemoryGetProcAddress(LDllHandle, 'SDL_LogDebug');
    SDL_LogError := MemoryGetProcAddress(LDllHandle, 'SDL_LogError');
    SDL_logf := MemoryGetProcAddress(LDllHandle, 'SDL_logf');
    SDL_LogGetOutputFunction := MemoryGetProcAddress(LDllHandle, 'SDL_LogGetOutputFunction');
    SDL_LogGetPriority := MemoryGetProcAddress(LDllHandle, 'SDL_LogGetPriority');
    SDL_LogInfo := MemoryGetProcAddress(LDllHandle, 'SDL_LogInfo');
    SDL_LogMessage := MemoryGetProcAddress(LDllHandle, 'SDL_LogMessage');
    SDL_LogMessageV := MemoryGetProcAddress(LDllHandle, 'SDL_LogMessageV');
    SDL_LogResetPriorities := MemoryGetProcAddress(LDllHandle, 'SDL_LogResetPriorities');
    SDL_LogSetAllPriority := MemoryGetProcAddress(LDllHandle, 'SDL_LogSetAllPriority');
    SDL_LogSetOutputFunction := MemoryGetProcAddress(LDllHandle, 'SDL_LogSetOutputFunction');
    SDL_LogSetPriority := MemoryGetProcAddress(LDllHandle, 'SDL_LogSetPriority');
    SDL_LogVerbose := MemoryGetProcAddress(LDllHandle, 'SDL_LogVerbose');
    SDL_LogWarn := MemoryGetProcAddress(LDllHandle, 'SDL_LogWarn');
    SDL_LowerBlit := MemoryGetProcAddress(LDllHandle, 'SDL_LowerBlit');
    SDL_LowerBlitScaled := MemoryGetProcAddress(LDllHandle, 'SDL_LowerBlitScaled');
    SDL_lround := MemoryGetProcAddress(LDllHandle, 'SDL_lround');
    SDL_lroundf := MemoryGetProcAddress(LDllHandle, 'SDL_lroundf');
    SDL_ltoa := MemoryGetProcAddress(LDllHandle, 'SDL_ltoa');
    SDL_malloc := MemoryGetProcAddress(LDllHandle, 'SDL_malloc');
    SDL_MapRGB := MemoryGetProcAddress(LDllHandle, 'SDL_MapRGB');
    SDL_MapRGBA := MemoryGetProcAddress(LDllHandle, 'SDL_MapRGBA');
    SDL_MasksToPixelFormatEnum := MemoryGetProcAddress(LDllHandle, 'SDL_MasksToPixelFormatEnum');
    SDL_MaximizeWindow := MemoryGetProcAddress(LDllHandle, 'SDL_MaximizeWindow');
    SDL_memcmp := MemoryGetProcAddress(LDllHandle, 'SDL_memcmp');
    SDL_memcpy := MemoryGetProcAddress(LDllHandle, 'SDL_memcpy');
    SDL_memmove := MemoryGetProcAddress(LDllHandle, 'SDL_memmove');
    SDL_MemoryBarrierAcquireFunction := MemoryGetProcAddress(LDllHandle, 'SDL_MemoryBarrierAcquireFunction');
    SDL_MemoryBarrierReleaseFunction := MemoryGetProcAddress(LDllHandle, 'SDL_MemoryBarrierReleaseFunction');
    SDL_memset := MemoryGetProcAddress(LDllHandle, 'SDL_memset');
    SDL_Metal_CreateView := MemoryGetProcAddress(LDllHandle, 'SDL_Metal_CreateView');
    SDL_Metal_DestroyView := MemoryGetProcAddress(LDllHandle, 'SDL_Metal_DestroyView');
    SDL_Metal_GetDrawableSize := MemoryGetProcAddress(LDllHandle, 'SDL_Metal_GetDrawableSize');
    SDL_Metal_GetLayer := MemoryGetProcAddress(LDllHandle, 'SDL_Metal_GetLayer');
    SDL_MinimizeWindow := MemoryGetProcAddress(LDllHandle, 'SDL_MinimizeWindow');
    SDL_MixAudio := MemoryGetProcAddress(LDllHandle, 'SDL_MixAudio');
    SDL_MixAudioFormat := MemoryGetProcAddress(LDllHandle, 'SDL_MixAudioFormat');
    SDL_MouseIsHaptic := MemoryGetProcAddress(LDllHandle, 'SDL_MouseIsHaptic');
    SDL_NewAudioStream := MemoryGetProcAddress(LDllHandle, 'SDL_NewAudioStream');
    SDL_NumHaptics := MemoryGetProcAddress(LDllHandle, 'SDL_NumHaptics');
    SDL_NumJoysticks := MemoryGetProcAddress(LDllHandle, 'SDL_NumJoysticks');
    SDL_NumSensors := MemoryGetProcAddress(LDllHandle, 'SDL_NumSensors');
    SDL_OnApplicationDidBecomeActive := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationDidBecomeActive');
    SDL_OnApplicationDidEnterBackground := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationDidEnterBackground');
    SDL_OnApplicationDidReceiveMemoryWarning := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationDidReceiveMemoryWarning');
    SDL_OnApplicationWillEnterForeground := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationWillEnterForeground');
    SDL_OnApplicationWillResignActive := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationWillResignActive');
    SDL_OnApplicationWillTerminate := MemoryGetProcAddress(LDllHandle, 'SDL_OnApplicationWillTerminate');
    SDL_OpenAudio := MemoryGetProcAddress(LDllHandle, 'SDL_OpenAudio');
    SDL_OpenAudioDevice := MemoryGetProcAddress(LDllHandle, 'SDL_OpenAudioDevice');
    SDL_OpenURL := MemoryGetProcAddress(LDllHandle, 'SDL_OpenURL');
    SDL_PauseAudio := MemoryGetProcAddress(LDllHandle, 'SDL_PauseAudio');
    SDL_PauseAudioDevice := MemoryGetProcAddress(LDllHandle, 'SDL_PauseAudioDevice');
    SDL_PeepEvents := MemoryGetProcAddress(LDllHandle, 'SDL_PeepEvents');
    SDL_PixelFormatEnumToMasks := MemoryGetProcAddress(LDllHandle, 'SDL_PixelFormatEnumToMasks');
    SDL_PollEvent := MemoryGetProcAddress(LDllHandle, 'SDL_PollEvent');
    SDL_pow := MemoryGetProcAddress(LDllHandle, 'SDL_pow');
    SDL_powf := MemoryGetProcAddress(LDllHandle, 'SDL_powf');
    SDL_PremultiplyAlpha := MemoryGetProcAddress(LDllHandle, 'SDL_PremultiplyAlpha');
    SDL_PumpEvents := MemoryGetProcAddress(LDllHandle, 'SDL_PumpEvents');
    SDL_PushEvent := MemoryGetProcAddress(LDllHandle, 'SDL_PushEvent');
    SDL_qsort := MemoryGetProcAddress(LDllHandle, 'SDL_qsort');
    SDL_QueryTexture := MemoryGetProcAddress(LDllHandle, 'SDL_QueryTexture');
    SDL_QueueAudio := MemoryGetProcAddress(LDllHandle, 'SDL_QueueAudio');
    SDL_Quit := MemoryGetProcAddress(LDllHandle, 'SDL_Quit');
    SDL_QuitSubSystem := MemoryGetProcAddress(LDllHandle, 'SDL_QuitSubSystem');
    SDL_RaiseWindow := MemoryGetProcAddress(LDllHandle, 'SDL_RaiseWindow');
    SDL_ReadBE16 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadBE16');
    SDL_ReadBE32 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadBE32');
    SDL_ReadBE64 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadBE64');
    SDL_ReadLE16 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadLE16');
    SDL_ReadLE32 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadLE32');
    SDL_ReadLE64 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadLE64');
    SDL_ReadU8 := MemoryGetProcAddress(LDllHandle, 'SDL_ReadU8');
    SDL_realloc := MemoryGetProcAddress(LDllHandle, 'SDL_realloc');
    SDL_RecordGesture := MemoryGetProcAddress(LDllHandle, 'SDL_RecordGesture');
    SDL_RegisterApp := MemoryGetProcAddress(LDllHandle, 'SDL_RegisterApp');
    SDL_RegisterEvents := MemoryGetProcAddress(LDllHandle, 'SDL_RegisterEvents');
    SDL_RemoveTimer := MemoryGetProcAddress(LDllHandle, 'SDL_RemoveTimer');
    SDL_RenderClear := MemoryGetProcAddress(LDllHandle, 'SDL_RenderClear');
    SDL_RenderCopy := MemoryGetProcAddress(LDllHandle, 'SDL_RenderCopy');
    SDL_RenderCopyEx := MemoryGetProcAddress(LDllHandle, 'SDL_RenderCopyEx');
    SDL_RenderCopyExF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderCopyExF');
    SDL_RenderCopyF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderCopyF');
    SDL_RenderDrawLine := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawLine');
    SDL_RenderDrawLineF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawLineF');
    SDL_RenderDrawLines := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawLines');
    SDL_RenderDrawLinesF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawLinesF');
    SDL_RenderDrawPoint := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawPoint');
    SDL_RenderDrawPointF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawPointF');
    SDL_RenderDrawPoints := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawPoints');
    SDL_RenderDrawPointsF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawPointsF');
    SDL_RenderDrawRect := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawRect');
    SDL_RenderDrawRectF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawRectF');
    SDL_RenderDrawRects := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawRects');
    SDL_RenderDrawRectsF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderDrawRectsF');
    SDL_RenderFillRect := MemoryGetProcAddress(LDllHandle, 'SDL_RenderFillRect');
    SDL_RenderFillRectF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderFillRectF');
    SDL_RenderFillRects := MemoryGetProcAddress(LDllHandle, 'SDL_RenderFillRects');
    SDL_RenderFillRectsF := MemoryGetProcAddress(LDllHandle, 'SDL_RenderFillRectsF');
    SDL_RenderFlush := MemoryGetProcAddress(LDllHandle, 'SDL_RenderFlush');
    SDL_RenderGeometry := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGeometry');
    SDL_RenderGeometryRaw := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGeometryRaw');
    SDL_RenderGetClipRect := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetClipRect');
    SDL_RenderGetD3D11Device := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetD3D11Device');
    SDL_RenderGetD3D9Device := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetD3D9Device');
    SDL_RenderGetIntegerScale := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetIntegerScale');
    SDL_RenderGetLogicalSize := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetLogicalSize');
    SDL_RenderGetMetalCommandEncoder := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetMetalCommandEncoder');
    SDL_RenderGetMetalLayer := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetMetalLayer');
    SDL_RenderGetScale := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetScale');
    SDL_RenderGetViewport := MemoryGetProcAddress(LDllHandle, 'SDL_RenderGetViewport');
    SDL_RenderIsClipEnabled := MemoryGetProcAddress(LDllHandle, 'SDL_RenderIsClipEnabled');
    SDL_RenderLogicalToWindow := MemoryGetProcAddress(LDllHandle, 'SDL_RenderLogicalToWindow');
    SDL_RenderPresent := MemoryGetProcAddress(LDllHandle, 'SDL_RenderPresent');
    SDL_RenderReadPixels := MemoryGetProcAddress(LDllHandle, 'SDL_RenderReadPixels');
    SDL_RenderSetClipRect := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetClipRect');
    SDL_RenderSetIntegerScale := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetIntegerScale');
    SDL_RenderSetLogicalSize := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetLogicalSize');
    SDL_RenderSetScale := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetScale');
    SDL_RenderSetViewport := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetViewport');
    SDL_RenderSetVSync := MemoryGetProcAddress(LDllHandle, 'SDL_RenderSetVSync');
    SDL_RenderTargetSupported := MemoryGetProcAddress(LDllHandle, 'SDL_RenderTargetSupported');
    SDL_RenderWindowToLogical := MemoryGetProcAddress(LDllHandle, 'SDL_RenderWindowToLogical');
    SDL_ReportAssertion := MemoryGetProcAddress(LDllHandle, 'SDL_ReportAssertion');
    SDL_ResetAssertionReport := MemoryGetProcAddress(LDllHandle, 'SDL_ResetAssertionReport');
    SDL_RestoreWindow := MemoryGetProcAddress(LDllHandle, 'SDL_RestoreWindow');
    SDL_round := MemoryGetProcAddress(LDllHandle, 'SDL_round');
    SDL_roundf := MemoryGetProcAddress(LDllHandle, 'SDL_roundf');
    SDL_RWclose := MemoryGetProcAddress(LDllHandle, 'SDL_RWclose');
    SDL_RWFromConstMem := MemoryGetProcAddress(LDllHandle, 'SDL_RWFromConstMem');
    SDL_RWFromFile := MemoryGetProcAddress(LDllHandle, 'SDL_RWFromFile');
    SDL_RWFromFP := MemoryGetProcAddress(LDllHandle, 'SDL_RWFromFP');
    SDL_RWFromMem := MemoryGetProcAddress(LDllHandle, 'SDL_RWFromMem');
    SDL_RWread := MemoryGetProcAddress(LDllHandle, 'SDL_RWread');
    SDL_RWseek := MemoryGetProcAddress(LDllHandle, 'SDL_RWseek');
    SDL_RWsize := MemoryGetProcAddress(LDllHandle, 'SDL_RWsize');
    SDL_RWtell := MemoryGetProcAddress(LDllHandle, 'SDL_RWtell');
    SDL_RWwrite := MemoryGetProcAddress(LDllHandle, 'SDL_RWwrite');
    SDL_SaveAllDollarTemplates := MemoryGetProcAddress(LDllHandle, 'SDL_SaveAllDollarTemplates');
    SDL_SaveBMP_RW := MemoryGetProcAddress(LDllHandle, 'SDL_SaveBMP_RW');
    SDL_SaveDollarTemplate := MemoryGetProcAddress(LDllHandle, 'SDL_SaveDollarTemplate');
    SDL_scalbn := MemoryGetProcAddress(LDllHandle, 'SDL_scalbn');
    SDL_scalbnf := MemoryGetProcAddress(LDllHandle, 'SDL_scalbnf');
    SDL_SemPost := MemoryGetProcAddress(LDllHandle, 'SDL_SemPost');
    SDL_SemTryWait := MemoryGetProcAddress(LDllHandle, 'SDL_SemTryWait');
    SDL_SemValue := MemoryGetProcAddress(LDllHandle, 'SDL_SemValue');
    SDL_SemWait := MemoryGetProcAddress(LDllHandle, 'SDL_SemWait');
    SDL_SemWaitTimeout := MemoryGetProcAddress(LDllHandle, 'SDL_SemWaitTimeout');
    SDL_SensorClose := MemoryGetProcAddress(LDllHandle, 'SDL_SensorClose');
    SDL_SensorFromInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_SensorFromInstanceID');
    SDL_SensorGetData := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetData');
    SDL_SensorGetDeviceInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetDeviceInstanceID');
    SDL_SensorGetDeviceName := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetDeviceName');
    SDL_SensorGetDeviceNonPortableType := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetDeviceNonPortableType');
    SDL_SensorGetDeviceType := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetDeviceType');
    SDL_SensorGetInstanceID := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetInstanceID');
    SDL_SensorGetName := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetName');
    SDL_SensorGetNonPortableType := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetNonPortableType');
    SDL_SensorGetType := MemoryGetProcAddress(LDllHandle, 'SDL_SensorGetType');
    SDL_SensorOpen := MemoryGetProcAddress(LDllHandle, 'SDL_SensorOpen');
    SDL_SensorUpdate := MemoryGetProcAddress(LDllHandle, 'SDL_SensorUpdate');
    SDL_SetAssertionHandler := MemoryGetProcAddress(LDllHandle, 'SDL_SetAssertionHandler');
    SDL_SetClipboardText := MemoryGetProcAddress(LDllHandle, 'SDL_SetClipboardText');
    SDL_SetClipRect := MemoryGetProcAddress(LDllHandle, 'SDL_SetClipRect');
    SDL_SetColorKey := MemoryGetProcAddress(LDllHandle, 'SDL_SetColorKey');
    SDL_SetCursor := MemoryGetProcAddress(LDllHandle, 'SDL_SetCursor');
    SDL_setenv := MemoryGetProcAddress(LDllHandle, 'SDL_setenv');
    SDL_SetError := MemoryGetProcAddress(LDllHandle, 'SDL_SetError');
    SDL_SetEventFilter := MemoryGetProcAddress(LDllHandle, 'SDL_SetEventFilter');
    SDL_SetHint := MemoryGetProcAddress(LDllHandle, 'SDL_SetHint');
    SDL_SetHintWithPriority := MemoryGetProcAddress(LDllHandle, 'SDL_SetHintWithPriority');
    SDL_SetMainReady := MemoryGetProcAddress(LDllHandle, 'SDL_SetMainReady');
    SDL_SetMemoryFunctions := MemoryGetProcAddress(LDllHandle, 'SDL_SetMemoryFunctions');
    SDL_SetModState := MemoryGetProcAddress(LDllHandle, 'SDL_SetModState');
    SDL_SetPaletteColors := MemoryGetProcAddress(LDllHandle, 'SDL_SetPaletteColors');
    SDL_SetPixelFormatPalette := MemoryGetProcAddress(LDllHandle, 'SDL_SetPixelFormatPalette');
    SDL_SetRelativeMouseMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetRelativeMouseMode');
    SDL_SetRenderDrawBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetRenderDrawBlendMode');
    SDL_SetRenderDrawColor := MemoryGetProcAddress(LDllHandle, 'SDL_SetRenderDrawColor');
    SDL_SetRenderTarget := MemoryGetProcAddress(LDllHandle, 'SDL_SetRenderTarget');
    SDL_SetSurfaceAlphaMod := MemoryGetProcAddress(LDllHandle, 'SDL_SetSurfaceAlphaMod');
    SDL_SetSurfaceBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetSurfaceBlendMode');
    SDL_SetSurfaceColorMod := MemoryGetProcAddress(LDllHandle, 'SDL_SetSurfaceColorMod');
    SDL_SetSurfacePalette := MemoryGetProcAddress(LDllHandle, 'SDL_SetSurfacePalette');
    SDL_SetSurfaceRLE := MemoryGetProcAddress(LDllHandle, 'SDL_SetSurfaceRLE');
    SDL_SetTextInputRect := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextInputRect');
    SDL_SetTextureAlphaMod := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextureAlphaMod');
    SDL_SetTextureBlendMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextureBlendMode');
    SDL_SetTextureColorMod := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextureColorMod');
    SDL_SetTextureScaleMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextureScaleMode');
    SDL_SetTextureUserData := MemoryGetProcAddress(LDllHandle, 'SDL_SetTextureUserData');
    SDL_SetThreadPriority := MemoryGetProcAddress(LDllHandle, 'SDL_SetThreadPriority');
    SDL_SetWindowAlwaysOnTop := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowAlwaysOnTop');
    SDL_SetWindowBordered := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowBordered');
    SDL_SetWindowBrightness := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowBrightness');
    SDL_SetWindowData := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowData');
    SDL_SetWindowDisplayMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowDisplayMode');
    SDL_SetWindowFullscreen := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowFullscreen');
    SDL_SetWindowGammaRamp := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowGammaRamp');
    SDL_SetWindowGrab := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowGrab');
    SDL_SetWindowHitTest := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowHitTest');
    SDL_SetWindowIcon := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowIcon');
    SDL_SetWindowInputFocus := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowInputFocus');
    SDL_SetWindowKeyboardGrab := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowKeyboardGrab');
    SDL_SetWindowMaximumSize := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowMaximumSize');
    SDL_SetWindowMinimumSize := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowMinimumSize');
    SDL_SetWindowModalFor := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowModalFor');
    SDL_SetWindowMouseGrab := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowMouseGrab');
    SDL_SetWindowMouseRect := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowMouseRect');
    SDL_SetWindowOpacity := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowOpacity');
    SDL_SetWindowPosition := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowPosition');
    SDL_SetWindowResizable := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowResizable');
    SDL_SetWindowShape := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowShape');
    SDL_SetWindowSize := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowSize');
    SDL_SetWindowsMessageHook := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowsMessageHook');
    SDL_SetWindowTitle := MemoryGetProcAddress(LDllHandle, 'SDL_SetWindowTitle');
    SDL_SetYUVConversionMode := MemoryGetProcAddress(LDllHandle, 'SDL_SetYUVConversionMode');
    SDL_ShowCursor := MemoryGetProcAddress(LDllHandle, 'SDL_ShowCursor');
    SDL_ShowMessageBox := MemoryGetProcAddress(LDllHandle, 'SDL_ShowMessageBox');
    SDL_ShowSimpleMessageBox := MemoryGetProcAddress(LDllHandle, 'SDL_ShowSimpleMessageBox');
    SDL_ShowWindow := MemoryGetProcAddress(LDllHandle, 'SDL_ShowWindow');
    SDL_SIMDAlloc := MemoryGetProcAddress(LDllHandle, 'SDL_SIMDAlloc');
    SDL_SIMDFree := MemoryGetProcAddress(LDllHandle, 'SDL_SIMDFree');
    SDL_SIMDGetAlignment := MemoryGetProcAddress(LDllHandle, 'SDL_SIMDGetAlignment');
    SDL_SIMDRealloc := MemoryGetProcAddress(LDllHandle, 'SDL_SIMDRealloc');
    SDL_sin := MemoryGetProcAddress(LDllHandle, 'SDL_sin');
    SDL_sinf := MemoryGetProcAddress(LDllHandle, 'SDL_sinf');
    SDL_snprintf := MemoryGetProcAddress(LDllHandle, 'SDL_snprintf');
    SDL_SoftStretch := MemoryGetProcAddress(LDllHandle, 'SDL_SoftStretch');
    SDL_SoftStretchLinear := MemoryGetProcAddress(LDllHandle, 'SDL_SoftStretchLinear');
    SDL_sqrt := MemoryGetProcAddress(LDllHandle, 'SDL_sqrt');
    SDL_sqrtf := MemoryGetProcAddress(LDllHandle, 'SDL_sqrtf');
    SDL_sscanf := MemoryGetProcAddress(LDllHandle, 'SDL_sscanf');
    SDL_StartTextInput := MemoryGetProcAddress(LDllHandle, 'SDL_StartTextInput');
    SDL_StopTextInput := MemoryGetProcAddress(LDllHandle, 'SDL_StopTextInput');
    SDL_strcasecmp := MemoryGetProcAddress(LDllHandle, 'SDL_strcasecmp');
    SDL_strchr := MemoryGetProcAddress(LDllHandle, 'SDL_strchr');
    SDL_strcmp := MemoryGetProcAddress(LDllHandle, 'SDL_strcmp');
    SDL_strdup := MemoryGetProcAddress(LDllHandle, 'SDL_strdup');
    SDL_strlcat := MemoryGetProcAddress(LDllHandle, 'SDL_strlcat');
    SDL_strlcpy := MemoryGetProcAddress(LDllHandle, 'SDL_strlcpy');
    SDL_strlen := MemoryGetProcAddress(LDllHandle, 'SDL_strlen');
    SDL_strlwr := MemoryGetProcAddress(LDllHandle, 'SDL_strlwr');
    SDL_strncasecmp := MemoryGetProcAddress(LDllHandle, 'SDL_strncasecmp');
    SDL_strncmp := MemoryGetProcAddress(LDllHandle, 'SDL_strncmp');
    SDL_strrchr := MemoryGetProcAddress(LDllHandle, 'SDL_strrchr');
    SDL_strrev := MemoryGetProcAddress(LDllHandle, 'SDL_strrev');
    SDL_strstr := MemoryGetProcAddress(LDllHandle, 'SDL_strstr');
    SDL_strtod := MemoryGetProcAddress(LDllHandle, 'SDL_strtod');
    SDL_strtokr := MemoryGetProcAddress(LDllHandle, 'SDL_strtokr');
    SDL_strtol := MemoryGetProcAddress(LDllHandle, 'SDL_strtol');
    SDL_strtoll := MemoryGetProcAddress(LDllHandle, 'SDL_strtoll');
    SDL_strtoul := MemoryGetProcAddress(LDllHandle, 'SDL_strtoul');
    SDL_strtoull := MemoryGetProcAddress(LDllHandle, 'SDL_strtoull');
    SDL_strupr := MemoryGetProcAddress(LDllHandle, 'SDL_strupr');
    SDL_tan := MemoryGetProcAddress(LDllHandle, 'SDL_tan');
    SDL_tanf := MemoryGetProcAddress(LDllHandle, 'SDL_tanf');
    SDL_ThreadID := MemoryGetProcAddress(LDllHandle, 'SDL_ThreadID');
    SDL_TLSCleanup := MemoryGetProcAddress(LDllHandle, 'SDL_TLSCleanup');
    SDL_TLSCreate := MemoryGetProcAddress(LDllHandle, 'SDL_TLSCreate');
    SDL_TLSGet := MemoryGetProcAddress(LDllHandle, 'SDL_TLSGet');
    SDL_TLSSet := MemoryGetProcAddress(LDllHandle, 'SDL_TLSSet');
    SDL_tolower := MemoryGetProcAddress(LDllHandle, 'SDL_tolower');
    SDL_toupper := MemoryGetProcAddress(LDllHandle, 'SDL_toupper');
    SDL_trunc := MemoryGetProcAddress(LDllHandle, 'SDL_trunc');
    SDL_truncf := MemoryGetProcAddress(LDllHandle, 'SDL_truncf');
    SDL_TryLockMutex := MemoryGetProcAddress(LDllHandle, 'SDL_TryLockMutex');
    SDL_uitoa := MemoryGetProcAddress(LDllHandle, 'SDL_uitoa');
    SDL_ulltoa := MemoryGetProcAddress(LDllHandle, 'SDL_ulltoa');
    SDL_ultoa := MemoryGetProcAddress(LDllHandle, 'SDL_ultoa');
    SDL_UnionRect := MemoryGetProcAddress(LDllHandle, 'SDL_UnionRect');
    SDL_UnloadObject := MemoryGetProcAddress(LDllHandle, 'SDL_UnloadObject');
    SDL_UnlockAudio := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockAudio');
    SDL_UnlockAudioDevice := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockAudioDevice');
    SDL_UnlockJoysticks := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockJoysticks');
    SDL_UnlockMutex := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockMutex');
    SDL_UnlockSensors := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockSensors');
    SDL_UnlockSurface := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockSurface');
    SDL_UnlockTexture := MemoryGetProcAddress(LDllHandle, 'SDL_UnlockTexture');
    SDL_UnregisterApp := MemoryGetProcAddress(LDllHandle, 'SDL_UnregisterApp');
    SDL_UpdateNVTexture := MemoryGetProcAddress(LDllHandle, 'SDL_UpdateNVTexture');
    SDL_UpdateTexture := MemoryGetProcAddress(LDllHandle, 'SDL_UpdateTexture');
    SDL_UpdateWindowSurface := MemoryGetProcAddress(LDllHandle, 'SDL_UpdateWindowSurface');
    SDL_UpdateWindowSurfaceRects := MemoryGetProcAddress(LDllHandle, 'SDL_UpdateWindowSurfaceRects');
    SDL_UpdateYUVTexture := MemoryGetProcAddress(LDllHandle, 'SDL_UpdateYUVTexture');
    SDL_UpperBlit := MemoryGetProcAddress(LDllHandle, 'SDL_UpperBlit');
    SDL_UpperBlitScaled := MemoryGetProcAddress(LDllHandle, 'SDL_UpperBlitScaled');
    SDL_utf8strlcpy := MemoryGetProcAddress(LDllHandle, 'SDL_utf8strlcpy');
    SDL_utf8strlen := MemoryGetProcAddress(LDllHandle, 'SDL_utf8strlen');
    SDL_vasprintf := MemoryGetProcAddress(LDllHandle, 'SDL_vasprintf');
    SDL_VideoInit := MemoryGetProcAddress(LDllHandle, 'SDL_VideoInit');
    SDL_VideoQuit := MemoryGetProcAddress(LDllHandle, 'SDL_VideoQuit');
    SDL_vsnprintf := MemoryGetProcAddress(LDllHandle, 'SDL_vsnprintf');
    SDL_vsscanf := MemoryGetProcAddress(LDllHandle, 'SDL_vsscanf');
    SDL_WaitEvent := MemoryGetProcAddress(LDllHandle, 'SDL_WaitEvent');
    SDL_WaitEventTimeout := MemoryGetProcAddress(LDllHandle, 'SDL_WaitEventTimeout');
    SDL_WaitThread := MemoryGetProcAddress(LDllHandle, 'SDL_WaitThread');
    SDL_WarpMouseGlobal := MemoryGetProcAddress(LDllHandle, 'SDL_WarpMouseGlobal');
    SDL_WarpMouseInWindow := MemoryGetProcAddress(LDllHandle, 'SDL_WarpMouseInWindow');
    SDL_WasInit := MemoryGetProcAddress(LDllHandle, 'SDL_WasInit');
    SDL_wcscasecmp := MemoryGetProcAddress(LDllHandle, 'SDL_wcscasecmp');
    SDL_wcscmp := MemoryGetProcAddress(LDllHandle, 'SDL_wcscmp');
    SDL_wcsdup := MemoryGetProcAddress(LDllHandle, 'SDL_wcsdup');
    SDL_wcslcat := MemoryGetProcAddress(LDllHandle, 'SDL_wcslcat');
    SDL_wcslcpy := MemoryGetProcAddress(LDllHandle, 'SDL_wcslcpy');
    SDL_wcslen := MemoryGetProcAddress(LDllHandle, 'SDL_wcslen');
    SDL_wcsncasecmp := MemoryGetProcAddress(LDllHandle, 'SDL_wcsncasecmp');
    SDL_wcsncmp := MemoryGetProcAddress(LDllHandle, 'SDL_wcsncmp');
    SDL_wcsstr := MemoryGetProcAddress(LDllHandle, 'SDL_wcsstr');
    SDL_WriteBE16 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteBE16');
    SDL_WriteBE32 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteBE32');
    SDL_WriteBE64 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteBE64');
    SDL_WriteLE16 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteLE16');
    SDL_WriteLE32 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteLE32');
    SDL_WriteLE64 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteLE64');
    SDL_WriteU8 := MemoryGetProcAddress(LDllHandle, 'SDL_WriteU8');
    SDLNet_AddSocket := MemoryGetProcAddress(LDllHandle, 'SDLNet_AddSocket');
    SDLNet_AllocPacket := MemoryGetProcAddress(LDllHandle, 'SDLNet_AllocPacket');
    SDLNet_AllocPacketV := MemoryGetProcAddress(LDllHandle, 'SDLNet_AllocPacketV');
    SDLNet_AllocSocketSet := MemoryGetProcAddress(LDllHandle, 'SDLNet_AllocSocketSet');
    SDLNet_CheckSockets := MemoryGetProcAddress(LDllHandle, 'SDLNet_CheckSockets');
    SDLNet_DelSocket := MemoryGetProcAddress(LDllHandle, 'SDLNet_DelSocket');
    SDLNet_FreePacket := MemoryGetProcAddress(LDllHandle, 'SDLNet_FreePacket');
    SDLNet_FreePacketV := MemoryGetProcAddress(LDllHandle, 'SDLNet_FreePacketV');
    SDLNet_FreeSocketSet := MemoryGetProcAddress(LDllHandle, 'SDLNet_FreeSocketSet');
    SDLNet_GetError := MemoryGetProcAddress(LDllHandle, 'SDLNet_GetError');
    SDLNet_GetLocalAddresses := MemoryGetProcAddress(LDllHandle, 'SDLNet_GetLocalAddresses');
    SDLNet_Init := MemoryGetProcAddress(LDllHandle, 'SDLNet_Init');
    SDLNet_Linked_Version := MemoryGetProcAddress(LDllHandle, 'SDLNet_Linked_Version');
    SDLNet_Quit := MemoryGetProcAddress(LDllHandle, 'SDLNet_Quit');
    SDLNet_ResizePacket := MemoryGetProcAddress(LDllHandle, 'SDLNet_ResizePacket');
    SDLNet_ResolveHost := MemoryGetProcAddress(LDllHandle, 'SDLNet_ResolveHost');
    SDLNet_ResolveIP := MemoryGetProcAddress(LDllHandle, 'SDLNet_ResolveIP');
    SDLNet_SetError := MemoryGetProcAddress(LDllHandle, 'SDLNet_SetError');
    SDLNet_TCP_Accept := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_Accept');
    SDLNet_TCP_Close := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_Close');
    SDLNet_TCP_GetPeerAddress := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_GetPeerAddress');
    SDLNet_TCP_Open := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_Open');
    SDLNet_TCP_Recv := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_Recv');
    SDLNet_TCP_Send := MemoryGetProcAddress(LDllHandle, 'SDLNet_TCP_Send');
    SDLNet_UDP_Bind := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Bind');
    SDLNet_UDP_Close := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Close');
    SDLNet_UDP_GetPeerAddress := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_GetPeerAddress');
    SDLNet_UDP_Open := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Open');
    SDLNet_UDP_Recv := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Recv');
    SDLNet_UDP_RecvV := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_RecvV');
    SDLNet_UDP_Send := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Send');
    SDLNet_UDP_SendV := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_SendV');
    SDLNet_UDP_SetPacketLoss := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_SetPacketLoss');
    SDLNet_UDP_Unbind := MemoryGetProcAddress(LDllHandle, 'SDLNet_UDP_Unbind');
    TTF_ByteSwappedUNICODE := MemoryGetProcAddress(LDllHandle, 'TTF_ByteSwappedUNICODE');
    TTF_CloseFont := MemoryGetProcAddress(LDllHandle, 'TTF_CloseFont');
    TTF_FontAscent := MemoryGetProcAddress(LDllHandle, 'TTF_FontAscent');
    TTF_FontDescent := MemoryGetProcAddress(LDllHandle, 'TTF_FontDescent');
    TTF_FontFaceFamilyName := MemoryGetProcAddress(LDllHandle, 'TTF_FontFaceFamilyName');
    TTF_FontFaceIsFixedWidth := MemoryGetProcAddress(LDllHandle, 'TTF_FontFaceIsFixedWidth');
    TTF_FontFaces := MemoryGetProcAddress(LDllHandle, 'TTF_FontFaces');
    TTF_FontFaceStyleName := MemoryGetProcAddress(LDllHandle, 'TTF_FontFaceStyleName');
    TTF_FontHeight := MemoryGetProcAddress(LDllHandle, 'TTF_FontHeight');
    TTF_FontLineSkip := MemoryGetProcAddress(LDllHandle, 'TTF_FontLineSkip');
    TTF_GetFontHinting := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontHinting');
    TTF_GetFontKerning := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontKerning');
    TTF_GetFontKerningSize := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontKerningSize');
    TTF_GetFontKerningSizeGlyphs := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontKerningSizeGlyphs');
    TTF_GetFontOutline := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontOutline');
    TTF_GetFontStyle := MemoryGetProcAddress(LDllHandle, 'TTF_GetFontStyle');
    TTF_GlyphIsProvided := MemoryGetProcAddress(LDllHandle, 'TTF_GlyphIsProvided');
    TTF_GlyphMetrics := MemoryGetProcAddress(LDllHandle, 'TTF_GlyphMetrics');
    TTF_Init := MemoryGetProcAddress(LDllHandle, 'TTF_Init');
    TTF_Linked_Version := MemoryGetProcAddress(LDllHandle, 'TTF_Linked_Version');
    TTF_OpenFont := MemoryGetProcAddress(LDllHandle, 'TTF_OpenFont');
    TTF_OpenFontIndex := MemoryGetProcAddress(LDllHandle, 'TTF_OpenFontIndex');
    TTF_OpenFontIndexRW := MemoryGetProcAddress(LDllHandle, 'TTF_OpenFontIndexRW');
    TTF_OpenFontRW := MemoryGetProcAddress(LDllHandle, 'TTF_OpenFontRW');
    TTF_Quit := MemoryGetProcAddress(LDllHandle, 'TTF_Quit');
    TTF_RenderGlyph_Blended := MemoryGetProcAddress(LDllHandle, 'TTF_RenderGlyph_Blended');
    TTF_RenderGlyph_Shaded := MemoryGetProcAddress(LDllHandle, 'TTF_RenderGlyph_Shaded');
    TTF_RenderGlyph_Solid := MemoryGetProcAddress(LDllHandle, 'TTF_RenderGlyph_Solid');
    TTF_RenderText_Blended := MemoryGetProcAddress(LDllHandle, 'TTF_RenderText_Blended');
    TTF_RenderText_Blended_Wrapped := MemoryGetProcAddress(LDllHandle, 'TTF_RenderText_Blended_Wrapped');
    TTF_RenderText_Shaded := MemoryGetProcAddress(LDllHandle, 'TTF_RenderText_Shaded');
    TTF_RenderText_Solid := MemoryGetProcAddress(LDllHandle, 'TTF_RenderText_Solid');
    TTF_RenderUNICODE_Blended := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUNICODE_Blended');
    TTF_RenderUNICODE_Blended_Wrapped := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUNICODE_Blended_Wrapped');
    TTF_RenderUNICODE_Shaded := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUNICODE_Shaded');
    TTF_RenderUNICODE_Solid := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUNICODE_Solid');
    TTF_RenderUTF8_Blended := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUTF8_Blended');
    TTF_RenderUTF8_Blended_Wrapped := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUTF8_Blended_Wrapped');
    TTF_RenderUTF8_Shaded := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUTF8_Shaded');
    TTF_RenderUTF8_Solid := MemoryGetProcAddress(LDllHandle, 'TTF_RenderUTF8_Solid');
    TTF_SetFontHinting := MemoryGetProcAddress(LDllHandle, 'TTF_SetFontHinting');
    TTF_SetFontKerning := MemoryGetProcAddress(LDllHandle, 'TTF_SetFontKerning');
    TTF_SetFontOutline := MemoryGetProcAddress(LDllHandle, 'TTF_SetFontOutline');
    TTF_SetFontStyle := MemoryGetProcAddress(LDllHandle, 'TTF_SetFontStyle');
    TTF_SizeText := MemoryGetProcAddress(LDllHandle, 'TTF_SizeText');
    TTF_SizeUNICODE := MemoryGetProcAddress(LDllHandle, 'TTF_SizeUNICODE');
    TTF_SizeUTF8 := MemoryGetProcAddress(LDllHandle, 'TTF_SizeUTF8');
    TTF_WasInit := MemoryGetProcAddress(LDllHandle, 'TTF_WasInit');
  finally
    FreeAndNil(LStream);
  end;

end;

procedure UnloadDLL;
begin
  MemoryFreeLibrary(LDllHandle);
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
